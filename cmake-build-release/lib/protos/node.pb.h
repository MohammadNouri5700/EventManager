// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2eproto;
class ConfigNodeS;
struct ConfigNodeSDefaultTypeInternal;
extern ConfigNodeSDefaultTypeInternal _ConfigNodeS_default_instance_;
class ConfigNodeS_NodeData;
struct ConfigNodeS_NodeDataDefaultTypeInternal;
extern ConfigNodeS_NodeDataDefaultTypeInternal _ConfigNodeS_NodeData_default_instance_;
class ConfigNodeS_NodeData_TagListConfig;
struct ConfigNodeS_NodeData_TagListConfigDefaultTypeInternal;
extern ConfigNodeS_NodeData_TagListConfigDefaultTypeInternal _ConfigNodeS_NodeData_TagListConfig_default_instance_;
class NodeConfigResponse;
struct NodeConfigResponseDefaultTypeInternal;
extern NodeConfigResponseDefaultTypeInternal _NodeConfigResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ConfigNodeS* Arena::CreateMaybeMessage<::ConfigNodeS>(Arena*);
template<> ::ConfigNodeS_NodeData* Arena::CreateMaybeMessage<::ConfigNodeS_NodeData>(Arena*);
template<> ::ConfigNodeS_NodeData_TagListConfig* Arena::CreateMaybeMessage<::ConfigNodeS_NodeData_TagListConfig>(Arena*);
template<> ::NodeConfigResponse* Arena::CreateMaybeMessage<::NodeConfigResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class NodeConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NodeConfigResponse) */ {
 public:
  inline NodeConfigResponse() : NodeConfigResponse(nullptr) {}
  ~NodeConfigResponse() override;
  explicit constexpr NodeConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeConfigResponse(const NodeConfigResponse& from);
  NodeConfigResponse(NodeConfigResponse&& from) noexcept
    : NodeConfigResponse() {
    *this = ::std::move(from);
  }

  inline NodeConfigResponse& operator=(const NodeConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeConfigResponse& operator=(NodeConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeConfigResponse* internal_default_instance() {
    return reinterpret_cast<const NodeConfigResponse*>(
               &_NodeConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeConfigResponse& a, NodeConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NodeConfigResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NodeConfigResponse";
  }
  protected:
  explicit NodeConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorDescFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // string errorDesc = 3;
  void clear_errordesc();
  const std::string& errordesc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errordesc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errordesc();
  PROTOBUF_NODISCARD std::string* release_errordesc();
  void set_allocated_errordesc(std::string* errordesc);
  private:
  const std::string& _internal_errordesc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errordesc(const std::string& value);
  std::string* _internal_mutable_errordesc();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 errorCode = 2;
  void clear_errorcode();
  int32_t errorcode() const;
  void set_errorcode(int32_t value);
  private:
  int32_t _internal_errorcode() const;
  void _internal_set_errorcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NodeConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errordesc_;
  bool success_;
  int32_t errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class ConfigNodeS_NodeData_TagListConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigNodeS.NodeData.TagListConfig) */ {
 public:
  inline ConfigNodeS_NodeData_TagListConfig() : ConfigNodeS_NodeData_TagListConfig(nullptr) {}
  ~ConfigNodeS_NodeData_TagListConfig() override;
  explicit constexpr ConfigNodeS_NodeData_TagListConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigNodeS_NodeData_TagListConfig(const ConfigNodeS_NodeData_TagListConfig& from);
  ConfigNodeS_NodeData_TagListConfig(ConfigNodeS_NodeData_TagListConfig&& from) noexcept
    : ConfigNodeS_NodeData_TagListConfig() {
    *this = ::std::move(from);
  }

  inline ConfigNodeS_NodeData_TagListConfig& operator=(const ConfigNodeS_NodeData_TagListConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigNodeS_NodeData_TagListConfig& operator=(ConfigNodeS_NodeData_TagListConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigNodeS_NodeData_TagListConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigNodeS_NodeData_TagListConfig* internal_default_instance() {
    return reinterpret_cast<const ConfigNodeS_NodeData_TagListConfig*>(
               &_ConfigNodeS_NodeData_TagListConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConfigNodeS_NodeData_TagListConfig& a, ConfigNodeS_NodeData_TagListConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigNodeS_NodeData_TagListConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigNodeS_NodeData_TagListConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigNodeS_NodeData_TagListConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigNodeS_NodeData_TagListConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigNodeS_NodeData_TagListConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfigNodeS_NodeData_TagListConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigNodeS_NodeData_TagListConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigNodeS.NodeData.TagListConfig";
  }
  protected:
  explicit ConfigNodeS_NodeData_TagListConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagNameFieldNumber = 2,
    kAlternativeFieldNumber = 3,
    kAttribFieldNumber = 1,
  };
  // string TagName = 2;
  void clear_tagname();
  const std::string& tagname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tagname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tagname();
  PROTOBUF_NODISCARD std::string* release_tagname();
  void set_allocated_tagname(std::string* tagname);
  private:
  const std::string& _internal_tagname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tagname(const std::string& value);
  std::string* _internal_mutable_tagname();
  public:

  // string Alternative = 3;
  void clear_alternative();
  const std::string& alternative() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alternative(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alternative();
  PROTOBUF_NODISCARD std::string* release_alternative();
  void set_allocated_alternative(std::string* alternative);
  private:
  const std::string& _internal_alternative() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alternative(const std::string& value);
  std::string* _internal_mutable_alternative();
  public:

  // int32 Attrib = 1;
  void clear_attrib();
  int32_t attrib() const;
  void set_attrib(int32_t value);
  private:
  int32_t _internal_attrib() const;
  void _internal_set_attrib(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ConfigNodeS.NodeData.TagListConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tagname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alternative_;
  int32_t attrib_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class ConfigNodeS_NodeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigNodeS.NodeData) */ {
 public:
  inline ConfigNodeS_NodeData() : ConfigNodeS_NodeData(nullptr) {}
  ~ConfigNodeS_NodeData() override;
  explicit constexpr ConfigNodeS_NodeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigNodeS_NodeData(const ConfigNodeS_NodeData& from);
  ConfigNodeS_NodeData(ConfigNodeS_NodeData&& from) noexcept
    : ConfigNodeS_NodeData() {
    *this = ::std::move(from);
  }

  inline ConfigNodeS_NodeData& operator=(const ConfigNodeS_NodeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigNodeS_NodeData& operator=(ConfigNodeS_NodeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigNodeS_NodeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigNodeS_NodeData* internal_default_instance() {
    return reinterpret_cast<const ConfigNodeS_NodeData*>(
               &_ConfigNodeS_NodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConfigNodeS_NodeData& a, ConfigNodeS_NodeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigNodeS_NodeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigNodeS_NodeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigNodeS_NodeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigNodeS_NodeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigNodeS_NodeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfigNodeS_NodeData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigNodeS_NodeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigNodeS.NodeData";
  }
  protected:
  explicit ConfigNodeS_NodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConfigNodeS_NodeData_TagListConfig TagListConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kTagListConfigFieldNumber = 5,
    kNodeNameFieldNumber = 1,
    kNodeIDFieldNumber = 2,
    kConnectionNameFieldNumber = 3,
    kTopicFieldNumber = 6,
    kTimerFieldNumber = 4,
  };
  // repeated .ConfigNodeS.NodeData.TagListConfig tagListConfig = 5;
  int taglistconfig_size() const;
  private:
  int _internal_taglistconfig_size() const;
  public:
  void clear_taglistconfig();
  ::ConfigNodeS_NodeData_TagListConfig* mutable_taglistconfig(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigNodeS_NodeData_TagListConfig >*
      mutable_taglistconfig();
  private:
  const ::ConfigNodeS_NodeData_TagListConfig& _internal_taglistconfig(int index) const;
  ::ConfigNodeS_NodeData_TagListConfig* _internal_add_taglistconfig();
  public:
  const ::ConfigNodeS_NodeData_TagListConfig& taglistconfig(int index) const;
  ::ConfigNodeS_NodeData_TagListConfig* add_taglistconfig();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigNodeS_NodeData_TagListConfig >&
      taglistconfig() const;

  // string nodeName = 1;
  void clear_nodename();
  const std::string& nodename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodename();
  PROTOBUF_NODISCARD std::string* release_nodename();
  void set_allocated_nodename(std::string* nodename);
  private:
  const std::string& _internal_nodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodename(const std::string& value);
  std::string* _internal_mutable_nodename();
  public:

  // string nodeID = 2;
  void clear_nodeid();
  const std::string& nodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodeid();
  PROTOBUF_NODISCARD std::string* release_nodeid();
  void set_allocated_nodeid(std::string* nodeid);
  private:
  const std::string& _internal_nodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodeid(const std::string& value);
  std::string* _internal_mutable_nodeid();
  public:

  // string connectionName = 3;
  void clear_connectionname();
  const std::string& connectionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connectionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connectionname();
  PROTOBUF_NODISCARD std::string* release_connectionname();
  void set_allocated_connectionname(std::string* connectionname);
  private:
  const std::string& _internal_connectionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connectionname(const std::string& value);
  std::string* _internal_mutable_connectionname();
  public:

  // string topic = 6;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // int32 timer = 4;
  void clear_timer();
  int32_t timer() const;
  void set_timer(int32_t value);
  private:
  int32_t _internal_timer() const;
  void _internal_set_timer(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ConfigNodeS.NodeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigNodeS_NodeData_TagListConfig > taglistconfig_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connectionname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  int32_t timer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class ConfigNodeS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigNodeS) */ {
 public:
  inline ConfigNodeS() : ConfigNodeS(nullptr) {}
  ~ConfigNodeS() override;
  explicit constexpr ConfigNodeS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigNodeS(const ConfigNodeS& from);
  ConfigNodeS(ConfigNodeS&& from) noexcept
    : ConfigNodeS() {
    *this = ::std::move(from);
  }

  inline ConfigNodeS& operator=(const ConfigNodeS& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigNodeS& operator=(ConfigNodeS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigNodeS& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigNodeS* internal_default_instance() {
    return reinterpret_cast<const ConfigNodeS*>(
               &_ConfigNodeS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConfigNodeS& a, ConfigNodeS& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigNodeS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigNodeS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigNodeS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigNodeS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigNodeS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfigNodeS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigNodeS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigNodeS";
  }
  protected:
  explicit ConfigNodeS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConfigNodeS_NodeData NodeData;

  // accessors -------------------------------------------------------

  enum : int {
    kNodeDataFieldNumber = 1,
  };
  // repeated .ConfigNodeS.NodeData nodeData = 1;
  int nodedata_size() const;
  private:
  int _internal_nodedata_size() const;
  public:
  void clear_nodedata();
  ::ConfigNodeS_NodeData* mutable_nodedata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigNodeS_NodeData >*
      mutable_nodedata();
  private:
  const ::ConfigNodeS_NodeData& _internal_nodedata(int index) const;
  ::ConfigNodeS_NodeData* _internal_add_nodedata();
  public:
  const ::ConfigNodeS_NodeData& nodedata(int index) const;
  ::ConfigNodeS_NodeData* add_nodedata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigNodeS_NodeData >&
      nodedata() const;

  // @@protoc_insertion_point(class_scope:ConfigNodeS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigNodeS_NodeData > nodedata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeConfigResponse

// bool Success = 1;
inline void NodeConfigResponse::clear_success() {
  success_ = false;
}
inline bool NodeConfigResponse::_internal_success() const {
  return success_;
}
inline bool NodeConfigResponse::success() const {
  // @@protoc_insertion_point(field_get:NodeConfigResponse.Success)
  return _internal_success();
}
inline void NodeConfigResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void NodeConfigResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:NodeConfigResponse.Success)
}

// int32 errorCode = 2;
inline void NodeConfigResponse::clear_errorcode() {
  errorcode_ = 0;
}
inline int32_t NodeConfigResponse::_internal_errorcode() const {
  return errorcode_;
}
inline int32_t NodeConfigResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:NodeConfigResponse.errorCode)
  return _internal_errorcode();
}
inline void NodeConfigResponse::_internal_set_errorcode(int32_t value) {
  
  errorcode_ = value;
}
inline void NodeConfigResponse::set_errorcode(int32_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:NodeConfigResponse.errorCode)
}

// string errorDesc = 3;
inline void NodeConfigResponse::clear_errordesc() {
  errordesc_.ClearToEmpty();
}
inline const std::string& NodeConfigResponse::errordesc() const {
  // @@protoc_insertion_point(field_get:NodeConfigResponse.errorDesc)
  return _internal_errordesc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeConfigResponse::set_errordesc(ArgT0&& arg0, ArgT... args) {
 
 errordesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NodeConfigResponse.errorDesc)
}
inline std::string* NodeConfigResponse::mutable_errordesc() {
  std::string* _s = _internal_mutable_errordesc();
  // @@protoc_insertion_point(field_mutable:NodeConfigResponse.errorDesc)
  return _s;
}
inline const std::string& NodeConfigResponse::_internal_errordesc() const {
  return errordesc_.Get();
}
inline void NodeConfigResponse::_internal_set_errordesc(const std::string& value) {
  
  errordesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeConfigResponse::_internal_mutable_errordesc() {
  
  return errordesc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeConfigResponse::release_errordesc() {
  // @@protoc_insertion_point(field_release:NodeConfigResponse.errorDesc)
  return errordesc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeConfigResponse::set_allocated_errordesc(std::string* errordesc) {
  if (errordesc != nullptr) {
    
  } else {
    
  }
  errordesc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errordesc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errordesc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    errordesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NodeConfigResponse.errorDesc)
}

// -------------------------------------------------------------------

// ConfigNodeS_NodeData_TagListConfig

// int32 Attrib = 1;
inline void ConfigNodeS_NodeData_TagListConfig::clear_attrib() {
  attrib_ = 0;
}
inline int32_t ConfigNodeS_NodeData_TagListConfig::_internal_attrib() const {
  return attrib_;
}
inline int32_t ConfigNodeS_NodeData_TagListConfig::attrib() const {
  // @@protoc_insertion_point(field_get:ConfigNodeS.NodeData.TagListConfig.Attrib)
  return _internal_attrib();
}
inline void ConfigNodeS_NodeData_TagListConfig::_internal_set_attrib(int32_t value) {
  
  attrib_ = value;
}
inline void ConfigNodeS_NodeData_TagListConfig::set_attrib(int32_t value) {
  _internal_set_attrib(value);
  // @@protoc_insertion_point(field_set:ConfigNodeS.NodeData.TagListConfig.Attrib)
}

// string TagName = 2;
inline void ConfigNodeS_NodeData_TagListConfig::clear_tagname() {
  tagname_.ClearToEmpty();
}
inline const std::string& ConfigNodeS_NodeData_TagListConfig::tagname() const {
  // @@protoc_insertion_point(field_get:ConfigNodeS.NodeData.TagListConfig.TagName)
  return _internal_tagname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigNodeS_NodeData_TagListConfig::set_tagname(ArgT0&& arg0, ArgT... args) {
 
 tagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConfigNodeS.NodeData.TagListConfig.TagName)
}
inline std::string* ConfigNodeS_NodeData_TagListConfig::mutable_tagname() {
  std::string* _s = _internal_mutable_tagname();
  // @@protoc_insertion_point(field_mutable:ConfigNodeS.NodeData.TagListConfig.TagName)
  return _s;
}
inline const std::string& ConfigNodeS_NodeData_TagListConfig::_internal_tagname() const {
  return tagname_.Get();
}
inline void ConfigNodeS_NodeData_TagListConfig::_internal_set_tagname(const std::string& value) {
  
  tagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigNodeS_NodeData_TagListConfig::_internal_mutable_tagname() {
  
  return tagname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigNodeS_NodeData_TagListConfig::release_tagname() {
  // @@protoc_insertion_point(field_release:ConfigNodeS.NodeData.TagListConfig.TagName)
  return tagname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigNodeS_NodeData_TagListConfig::set_allocated_tagname(std::string* tagname) {
  if (tagname != nullptr) {
    
  } else {
    
  }
  tagname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tagname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tagname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tagname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConfigNodeS.NodeData.TagListConfig.TagName)
}

// string Alternative = 3;
inline void ConfigNodeS_NodeData_TagListConfig::clear_alternative() {
  alternative_.ClearToEmpty();
}
inline const std::string& ConfigNodeS_NodeData_TagListConfig::alternative() const {
  // @@protoc_insertion_point(field_get:ConfigNodeS.NodeData.TagListConfig.Alternative)
  return _internal_alternative();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigNodeS_NodeData_TagListConfig::set_alternative(ArgT0&& arg0, ArgT... args) {
 
 alternative_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConfigNodeS.NodeData.TagListConfig.Alternative)
}
inline std::string* ConfigNodeS_NodeData_TagListConfig::mutable_alternative() {
  std::string* _s = _internal_mutable_alternative();
  // @@protoc_insertion_point(field_mutable:ConfigNodeS.NodeData.TagListConfig.Alternative)
  return _s;
}
inline const std::string& ConfigNodeS_NodeData_TagListConfig::_internal_alternative() const {
  return alternative_.Get();
}
inline void ConfigNodeS_NodeData_TagListConfig::_internal_set_alternative(const std::string& value) {
  
  alternative_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigNodeS_NodeData_TagListConfig::_internal_mutable_alternative() {
  
  return alternative_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigNodeS_NodeData_TagListConfig::release_alternative() {
  // @@protoc_insertion_point(field_release:ConfigNodeS.NodeData.TagListConfig.Alternative)
  return alternative_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigNodeS_NodeData_TagListConfig::set_allocated_alternative(std::string* alternative) {
  if (alternative != nullptr) {
    
  } else {
    
  }
  alternative_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alternative,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (alternative_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    alternative_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConfigNodeS.NodeData.TagListConfig.Alternative)
}

// -------------------------------------------------------------------

// ConfigNodeS_NodeData

// string nodeName = 1;
inline void ConfigNodeS_NodeData::clear_nodename() {
  nodename_.ClearToEmpty();
}
inline const std::string& ConfigNodeS_NodeData::nodename() const {
  // @@protoc_insertion_point(field_get:ConfigNodeS.NodeData.nodeName)
  return _internal_nodename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigNodeS_NodeData::set_nodename(ArgT0&& arg0, ArgT... args) {
 
 nodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConfigNodeS.NodeData.nodeName)
}
inline std::string* ConfigNodeS_NodeData::mutable_nodename() {
  std::string* _s = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:ConfigNodeS.NodeData.nodeName)
  return _s;
}
inline const std::string& ConfigNodeS_NodeData::_internal_nodename() const {
  return nodename_.Get();
}
inline void ConfigNodeS_NodeData::_internal_set_nodename(const std::string& value) {
  
  nodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigNodeS_NodeData::_internal_mutable_nodename() {
  
  return nodename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigNodeS_NodeData::release_nodename() {
  // @@protoc_insertion_point(field_release:ConfigNodeS.NodeData.nodeName)
  return nodename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigNodeS_NodeData::set_allocated_nodename(std::string* nodename) {
  if (nodename != nullptr) {
    
  } else {
    
  }
  nodename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nodename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConfigNodeS.NodeData.nodeName)
}

// string nodeID = 2;
inline void ConfigNodeS_NodeData::clear_nodeid() {
  nodeid_.ClearToEmpty();
}
inline const std::string& ConfigNodeS_NodeData::nodeid() const {
  // @@protoc_insertion_point(field_get:ConfigNodeS.NodeData.nodeID)
  return _internal_nodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigNodeS_NodeData::set_nodeid(ArgT0&& arg0, ArgT... args) {
 
 nodeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConfigNodeS.NodeData.nodeID)
}
inline std::string* ConfigNodeS_NodeData::mutable_nodeid() {
  std::string* _s = _internal_mutable_nodeid();
  // @@protoc_insertion_point(field_mutable:ConfigNodeS.NodeData.nodeID)
  return _s;
}
inline const std::string& ConfigNodeS_NodeData::_internal_nodeid() const {
  return nodeid_.Get();
}
inline void ConfigNodeS_NodeData::_internal_set_nodeid(const std::string& value) {
  
  nodeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigNodeS_NodeData::_internal_mutable_nodeid() {
  
  return nodeid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigNodeS_NodeData::release_nodeid() {
  // @@protoc_insertion_point(field_release:ConfigNodeS.NodeData.nodeID)
  return nodeid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigNodeS_NodeData::set_allocated_nodeid(std::string* nodeid) {
  if (nodeid != nullptr) {
    
  } else {
    
  }
  nodeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodeid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nodeid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConfigNodeS.NodeData.nodeID)
}

// string connectionName = 3;
inline void ConfigNodeS_NodeData::clear_connectionname() {
  connectionname_.ClearToEmpty();
}
inline const std::string& ConfigNodeS_NodeData::connectionname() const {
  // @@protoc_insertion_point(field_get:ConfigNodeS.NodeData.connectionName)
  return _internal_connectionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigNodeS_NodeData::set_connectionname(ArgT0&& arg0, ArgT... args) {
 
 connectionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConfigNodeS.NodeData.connectionName)
}
inline std::string* ConfigNodeS_NodeData::mutable_connectionname() {
  std::string* _s = _internal_mutable_connectionname();
  // @@protoc_insertion_point(field_mutable:ConfigNodeS.NodeData.connectionName)
  return _s;
}
inline const std::string& ConfigNodeS_NodeData::_internal_connectionname() const {
  return connectionname_.Get();
}
inline void ConfigNodeS_NodeData::_internal_set_connectionname(const std::string& value) {
  
  connectionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigNodeS_NodeData::_internal_mutable_connectionname() {
  
  return connectionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigNodeS_NodeData::release_connectionname() {
  // @@protoc_insertion_point(field_release:ConfigNodeS.NodeData.connectionName)
  return connectionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigNodeS_NodeData::set_allocated_connectionname(std::string* connectionname) {
  if (connectionname != nullptr) {
    
  } else {
    
  }
  connectionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connectionname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connectionname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConfigNodeS.NodeData.connectionName)
}

// int32 timer = 4;
inline void ConfigNodeS_NodeData::clear_timer() {
  timer_ = 0;
}
inline int32_t ConfigNodeS_NodeData::_internal_timer() const {
  return timer_;
}
inline int32_t ConfigNodeS_NodeData::timer() const {
  // @@protoc_insertion_point(field_get:ConfigNodeS.NodeData.timer)
  return _internal_timer();
}
inline void ConfigNodeS_NodeData::_internal_set_timer(int32_t value) {
  
  timer_ = value;
}
inline void ConfigNodeS_NodeData::set_timer(int32_t value) {
  _internal_set_timer(value);
  // @@protoc_insertion_point(field_set:ConfigNodeS.NodeData.timer)
}

// repeated .ConfigNodeS.NodeData.TagListConfig tagListConfig = 5;
inline int ConfigNodeS_NodeData::_internal_taglistconfig_size() const {
  return taglistconfig_.size();
}
inline int ConfigNodeS_NodeData::taglistconfig_size() const {
  return _internal_taglistconfig_size();
}
inline void ConfigNodeS_NodeData::clear_taglistconfig() {
  taglistconfig_.Clear();
}
inline ::ConfigNodeS_NodeData_TagListConfig* ConfigNodeS_NodeData::mutable_taglistconfig(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigNodeS.NodeData.tagListConfig)
  return taglistconfig_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigNodeS_NodeData_TagListConfig >*
ConfigNodeS_NodeData::mutable_taglistconfig() {
  // @@protoc_insertion_point(field_mutable_list:ConfigNodeS.NodeData.tagListConfig)
  return &taglistconfig_;
}
inline const ::ConfigNodeS_NodeData_TagListConfig& ConfigNodeS_NodeData::_internal_taglistconfig(int index) const {
  return taglistconfig_.Get(index);
}
inline const ::ConfigNodeS_NodeData_TagListConfig& ConfigNodeS_NodeData::taglistconfig(int index) const {
  // @@protoc_insertion_point(field_get:ConfigNodeS.NodeData.tagListConfig)
  return _internal_taglistconfig(index);
}
inline ::ConfigNodeS_NodeData_TagListConfig* ConfigNodeS_NodeData::_internal_add_taglistconfig() {
  return taglistconfig_.Add();
}
inline ::ConfigNodeS_NodeData_TagListConfig* ConfigNodeS_NodeData::add_taglistconfig() {
  ::ConfigNodeS_NodeData_TagListConfig* _add = _internal_add_taglistconfig();
  // @@protoc_insertion_point(field_add:ConfigNodeS.NodeData.tagListConfig)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigNodeS_NodeData_TagListConfig >&
ConfigNodeS_NodeData::taglistconfig() const {
  // @@protoc_insertion_point(field_list:ConfigNodeS.NodeData.tagListConfig)
  return taglistconfig_;
}

// string topic = 6;
inline void ConfigNodeS_NodeData::clear_topic() {
  topic_.ClearToEmpty();
}
inline const std::string& ConfigNodeS_NodeData::topic() const {
  // @@protoc_insertion_point(field_get:ConfigNodeS.NodeData.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigNodeS_NodeData::set_topic(ArgT0&& arg0, ArgT... args) {
 
 topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConfigNodeS.NodeData.topic)
}
inline std::string* ConfigNodeS_NodeData::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:ConfigNodeS.NodeData.topic)
  return _s;
}
inline const std::string& ConfigNodeS_NodeData::_internal_topic() const {
  return topic_.Get();
}
inline void ConfigNodeS_NodeData::_internal_set_topic(const std::string& value) {
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigNodeS_NodeData::_internal_mutable_topic() {
  
  return topic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigNodeS_NodeData::release_topic() {
  // @@protoc_insertion_point(field_release:ConfigNodeS.NodeData.topic)
  return topic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigNodeS_NodeData::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (topic_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConfigNodeS.NodeData.topic)
}

// -------------------------------------------------------------------

// ConfigNodeS

// repeated .ConfigNodeS.NodeData nodeData = 1;
inline int ConfigNodeS::_internal_nodedata_size() const {
  return nodedata_.size();
}
inline int ConfigNodeS::nodedata_size() const {
  return _internal_nodedata_size();
}
inline void ConfigNodeS::clear_nodedata() {
  nodedata_.Clear();
}
inline ::ConfigNodeS_NodeData* ConfigNodeS::mutable_nodedata(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigNodeS.nodeData)
  return nodedata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigNodeS_NodeData >*
ConfigNodeS::mutable_nodedata() {
  // @@protoc_insertion_point(field_mutable_list:ConfigNodeS.nodeData)
  return &nodedata_;
}
inline const ::ConfigNodeS_NodeData& ConfigNodeS::_internal_nodedata(int index) const {
  return nodedata_.Get(index);
}
inline const ::ConfigNodeS_NodeData& ConfigNodeS::nodedata(int index) const {
  // @@protoc_insertion_point(field_get:ConfigNodeS.nodeData)
  return _internal_nodedata(index);
}
inline ::ConfigNodeS_NodeData* ConfigNodeS::_internal_add_nodedata() {
  return nodedata_.Add();
}
inline ::ConfigNodeS_NodeData* ConfigNodeS::add_nodedata() {
  ::ConfigNodeS_NodeData* _add = _internal_add_nodedata();
  // @@protoc_insertion_point(field_add:ConfigNodeS.nodeData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigNodeS_NodeData >&
ConfigNodeS::nodedata() const {
  // @@protoc_insertion_point(field_list:ConfigNodeS.nodeData)
  return nodedata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2eproto
