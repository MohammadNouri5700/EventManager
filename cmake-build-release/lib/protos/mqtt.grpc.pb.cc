// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mqtt.proto

#include "mqtt.pb.h"
#include "mqtt.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* MqttClientsConfig_method_names[] = {
  "/MqttClientsConfig/SendMqttClientsConfig",
};

std::unique_ptr< MqttClientsConfig::Stub> MqttClientsConfig::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MqttClientsConfig::Stub> stub(new MqttClientsConfig::Stub(channel, options));
  return stub;
}

MqttClientsConfig::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendMqttClientsConfig_(MqttClientsConfig_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MqttClientsConfig::Stub::SendMqttClientsConfig(::grpc::ClientContext* context, const ::MqttClients& request, ::ConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MqttClients, ::ConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMqttClientsConfig_, context, request, response);
}

void MqttClientsConfig::Stub::async::SendMqttClientsConfig(::grpc::ClientContext* context, const ::MqttClients* request, ::ConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MqttClients, ::ConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMqttClientsConfig_, context, request, response, std::move(f));
}

void MqttClientsConfig::Stub::async::SendMqttClientsConfig(::grpc::ClientContext* context, const ::MqttClients* request, ::ConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMqttClientsConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ConfigResponse>* MqttClientsConfig::Stub::PrepareAsyncSendMqttClientsConfigRaw(::grpc::ClientContext* context, const ::MqttClients& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ConfigResponse, ::MqttClients, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMqttClientsConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ConfigResponse>* MqttClientsConfig::Stub::AsyncSendMqttClientsConfigRaw(::grpc::ClientContext* context, const ::MqttClients& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMqttClientsConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

MqttClientsConfig::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MqttClientsConfig_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MqttClientsConfig::Service, ::MqttClients, ::ConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MqttClientsConfig::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MqttClients* req,
             ::ConfigResponse* resp) {
               return service->SendMqttClientsConfig(ctx, req, resp);
             }, this)));
}

MqttClientsConfig::Service::~Service() {
}

::grpc::Status MqttClientsConfig::Service::SendMqttClientsConfig(::grpc::ServerContext* context, const ::MqttClients* request, ::ConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* MqttBrokerConfig_method_names[] = {
  "/MqttBrokerConfig/SendMqttBrokerConfig",
};

std::unique_ptr< MqttBrokerConfig::Stub> MqttBrokerConfig::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MqttBrokerConfig::Stub> stub(new MqttBrokerConfig::Stub(channel, options));
  return stub;
}

MqttBrokerConfig::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendMqttBrokerConfig_(MqttBrokerConfig_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MqttBrokerConfig::Stub::SendMqttBrokerConfig(::grpc::ClientContext* context, const ::MqttBorker& request, ::ConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MqttBorker, ::ConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMqttBrokerConfig_, context, request, response);
}

void MqttBrokerConfig::Stub::async::SendMqttBrokerConfig(::grpc::ClientContext* context, const ::MqttBorker* request, ::ConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MqttBorker, ::ConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMqttBrokerConfig_, context, request, response, std::move(f));
}

void MqttBrokerConfig::Stub::async::SendMqttBrokerConfig(::grpc::ClientContext* context, const ::MqttBorker* request, ::ConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMqttBrokerConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ConfigResponse>* MqttBrokerConfig::Stub::PrepareAsyncSendMqttBrokerConfigRaw(::grpc::ClientContext* context, const ::MqttBorker& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ConfigResponse, ::MqttBorker, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMqttBrokerConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ConfigResponse>* MqttBrokerConfig::Stub::AsyncSendMqttBrokerConfigRaw(::grpc::ClientContext* context, const ::MqttBorker& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMqttBrokerConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

MqttBrokerConfig::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MqttBrokerConfig_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MqttBrokerConfig::Service, ::MqttBorker, ::ConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MqttBrokerConfig::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MqttBorker* req,
             ::ConfigResponse* resp) {
               return service->SendMqttBrokerConfig(ctx, req, resp);
             }, this)));
}

MqttBrokerConfig::Service::~Service() {
}

::grpc::Status MqttBrokerConfig::Service::SendMqttBrokerConfig(::grpc::ServerContext* context, const ::MqttBorker* request, ::ConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


