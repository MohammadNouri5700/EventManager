// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#include "network.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr NetworkResponse::NetworkResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errordesc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false)
  , errorcode_(0){}
struct NetworkResponseDefaultTypeInternal {
  constexpr NetworkResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetworkResponseDefaultTypeInternal() {}
  union {
    NetworkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetworkResponseDefaultTypeInternal _NetworkResponse_default_instance_;
constexpr GatewayNetworksConfig_NetworksConfig::GatewayNetworksConfig_NetworksConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dhcpenabled_(false)
  , status_(false){}
struct GatewayNetworksConfig_NetworksConfigDefaultTypeInternal {
  constexpr GatewayNetworksConfig_NetworksConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GatewayNetworksConfig_NetworksConfigDefaultTypeInternal() {}
  union {
    GatewayNetworksConfig_NetworksConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GatewayNetworksConfig_NetworksConfigDefaultTypeInternal _GatewayNetworksConfig_NetworksConfig_default_instance_;
constexpr GatewayNetworksConfig_NetworkIPConfig::GatewayNetworksConfig_NetworkIPConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : netip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , netmask_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , defaultgate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GatewayNetworksConfig_NetworkIPConfigDefaultTypeInternal {
  constexpr GatewayNetworksConfig_NetworkIPConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GatewayNetworksConfig_NetworkIPConfigDefaultTypeInternal() {}
  union {
    GatewayNetworksConfig_NetworkIPConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GatewayNetworksConfig_NetworkIPConfigDefaultTypeInternal _GatewayNetworksConfig_NetworkIPConfig_default_instance_;
constexpr GatewayNetworksConfig_NetworkDNSConfig::GatewayNetworksConfig_NetworkDNSConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dnsconfig_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GatewayNetworksConfig_NetworkDNSConfigDefaultTypeInternal {
  constexpr GatewayNetworksConfig_NetworkDNSConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GatewayNetworksConfig_NetworkDNSConfigDefaultTypeInternal() {}
  union {
    GatewayNetworksConfig_NetworkDNSConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GatewayNetworksConfig_NetworkDNSConfigDefaultTypeInternal _GatewayNetworksConfig_NetworkDNSConfig_default_instance_;
constexpr GatewayNetworksConfig::GatewayNetworksConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : networkipconfig_()
  , networkdnsconfig_()
  , otnetworkconfig_(nullptr){}
struct GatewayNetworksConfigDefaultTypeInternal {
  constexpr GatewayNetworksConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GatewayNetworksConfigDefaultTypeInternal() {}
  union {
    GatewayNetworksConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GatewayNetworksConfigDefaultTypeInternal _GatewayNetworksConfig_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_network_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_network_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_network_2eproto = nullptr;

const uint32_t TableStruct_network_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetworkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NetworkResponse, success_),
  PROTOBUF_FIELD_OFFSET(::NetworkResponse, errorcode_),
  PROTOBUF_FIELD_OFFSET(::NetworkResponse, errordesc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworksConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworksConfig, dhcpenabled_),
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworksConfig, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworkIPConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworkIPConfig, netip_),
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworkIPConfig, netmask_),
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworkIPConfig, defaultgate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworkDNSConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig_NetworkDNSConfig, dnsconfig_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig, networkipconfig_),
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig, networkdnsconfig_),
  PROTOBUF_FIELD_OFFSET(::GatewayNetworksConfig, otnetworkconfig_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::NetworkResponse)},
  { 9, -1, -1, sizeof(::GatewayNetworksConfig_NetworksConfig)},
  { 17, -1, -1, sizeof(::GatewayNetworksConfig_NetworkIPConfig)},
  { 26, -1, -1, sizeof(::GatewayNetworksConfig_NetworkDNSConfig)},
  { 33, -1, -1, sizeof(::GatewayNetworksConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NetworkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GatewayNetworksConfig_NetworksConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GatewayNetworksConfig_NetworkIPConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GatewayNetworksConfig_NetworkDNSConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GatewayNetworksConfig_default_instance_),
};

const char descriptor_table_protodef_network_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rnetwork.proto\"H\n\017NetworkResponse\022\017\n\007Su"
  "ccess\030\001 \001(\010\022\021\n\terrorCode\030\002 \001(\005\022\021\n\terrorD"
  "esc\030\003 \001(\t\"\201\003\n\025GatewayNetworksConfig\022\?\n\017n"
  "etworkIPConfig\030\001 \003(\0132&.GatewayNetworksCo"
  "nfig.NetworkIPConfig\022A\n\020networkDNSConfig"
  "\030\002 \003(\0132\'.GatewayNetworksConfig.NetworkDN"
  "SConfig\022>\n\017OTNetworkConfig\030\003 \001(\0132%.Gatew"
  "ayNetworksConfig.NetworksConfig\0325\n\016Netwo"
  "rksConfig\022\023\n\013dhcpEnabled\030\001 \001(\010\022\016\n\006Status"
  "\030\002 \001(\010\032F\n\017NetworkIPConfig\022\r\n\005netIP\030\001 \001(\t"
  "\022\017\n\007netMask\030\002 \001(\t\022\023\n\013defaultGate\030\003 \001(\t\032%"
  "\n\020NetworkDNSConfig\022\021\n\tDNSConfig\030\001 \001(\t2Z\n"
  "\023SystemNetworkConfig\022C\n\027SendSystemNetwor"
  "kConfig\022\026.GatewayNetworksConfig\032\020.Networ"
  "kResponseb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_network_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_2eproto = {
  false, false, 577, descriptor_table_protodef_network_2eproto, "network.proto", 
  &descriptor_table_network_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_network_2eproto::offsets,
  file_level_metadata_network_2eproto, file_level_enum_descriptors_network_2eproto, file_level_service_descriptors_network_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_network_2eproto_getter() {
  return &descriptor_table_network_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_network_2eproto(&descriptor_table_network_2eproto);

// ===================================================================

class NetworkResponse::_Internal {
 public:
};

NetworkResponse::NetworkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:NetworkResponse)
}
NetworkResponse::NetworkResponse(const NetworkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errordesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errordesc().empty()) {
    errordesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errordesc(), 
      GetArenaForAllocation());
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:NetworkResponse)
}

inline void NetworkResponse::SharedCtor() {
errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errordesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
}

NetworkResponse::~NetworkResponse() {
  // @@protoc_insertion_point(destructor:NetworkResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetworkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errordesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkResponse::ArenaDtor(void* object) {
  NetworkResponse* _this = reinterpret_cast< NetworkResponse* >(object);
  (void)_this;
}
void NetworkResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetworkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:NetworkResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errordesc_.ClearToEmpty();
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errorDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errordesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NetworkResponse.errorDesc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetworkResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_errorcode(), target);
  }

  // string errorDesc = 3;
  if (!this->_internal_errordesc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errordesc().data(), static_cast<int>(this->_internal_errordesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NetworkResponse.errorDesc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errordesc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetworkResponse)
  return target;
}

size_t NetworkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetworkResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorDesc = 3;
  if (!this->_internal_errordesc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errordesc());
  }

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_errorcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetworkResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkResponse::GetClassData() const { return &_class_data_; }

void NetworkResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetworkResponse *>(to)->MergeFrom(
      static_cast<const NetworkResponse &>(from));
}


void NetworkResponse::MergeFrom(const NetworkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetworkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errordesc().empty()) {
    _internal_set_errordesc(from._internal_errordesc());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkResponse::CopyFrom(const NetworkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetworkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkResponse::IsInitialized() const {
  return true;
}

void NetworkResponse::InternalSwap(NetworkResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errordesc_, lhs_arena,
      &other->errordesc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkResponse, errorcode_)
      + sizeof(NetworkResponse::errorcode_)
      - PROTOBUF_FIELD_OFFSET(NetworkResponse, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[0]);
}

// ===================================================================

class GatewayNetworksConfig_NetworksConfig::_Internal {
 public:
};

GatewayNetworksConfig_NetworksConfig::GatewayNetworksConfig_NetworksConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GatewayNetworksConfig.NetworksConfig)
}
GatewayNetworksConfig_NetworksConfig::GatewayNetworksConfig_NetworksConfig(const GatewayNetworksConfig_NetworksConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dhcpenabled_, &from.dhcpenabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&dhcpenabled_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:GatewayNetworksConfig.NetworksConfig)
}

inline void GatewayNetworksConfig_NetworksConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dhcpenabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&dhcpenabled_)) + sizeof(status_));
}

GatewayNetworksConfig_NetworksConfig::~GatewayNetworksConfig_NetworksConfig() {
  // @@protoc_insertion_point(destructor:GatewayNetworksConfig.NetworksConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GatewayNetworksConfig_NetworksConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GatewayNetworksConfig_NetworksConfig::ArenaDtor(void* object) {
  GatewayNetworksConfig_NetworksConfig* _this = reinterpret_cast< GatewayNetworksConfig_NetworksConfig* >(object);
  (void)_this;
}
void GatewayNetworksConfig_NetworksConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GatewayNetworksConfig_NetworksConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GatewayNetworksConfig_NetworksConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayNetworksConfig.NetworksConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dhcpenabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&dhcpenabled_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GatewayNetworksConfig_NetworksConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool dhcpEnabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          dhcpenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GatewayNetworksConfig_NetworksConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayNetworksConfig.NetworksConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool dhcpEnabled = 1;
  if (this->_internal_dhcpenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_dhcpenabled(), target);
  }

  // bool Status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayNetworksConfig.NetworksConfig)
  return target;
}

size_t GatewayNetworksConfig_NetworksConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayNetworksConfig.NetworksConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool dhcpEnabled = 1;
  if (this->_internal_dhcpenabled() != 0) {
    total_size += 1 + 1;
  }

  // bool Status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GatewayNetworksConfig_NetworksConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GatewayNetworksConfig_NetworksConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GatewayNetworksConfig_NetworksConfig::GetClassData() const { return &_class_data_; }

void GatewayNetworksConfig_NetworksConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GatewayNetworksConfig_NetworksConfig *>(to)->MergeFrom(
      static_cast<const GatewayNetworksConfig_NetworksConfig &>(from));
}


void GatewayNetworksConfig_NetworksConfig::MergeFrom(const GatewayNetworksConfig_NetworksConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayNetworksConfig.NetworksConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dhcpenabled() != 0) {
    _internal_set_dhcpenabled(from._internal_dhcpenabled());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GatewayNetworksConfig_NetworksConfig::CopyFrom(const GatewayNetworksConfig_NetworksConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayNetworksConfig.NetworksConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayNetworksConfig_NetworksConfig::IsInitialized() const {
  return true;
}

void GatewayNetworksConfig_NetworksConfig::InternalSwap(GatewayNetworksConfig_NetworksConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GatewayNetworksConfig_NetworksConfig, status_)
      + sizeof(GatewayNetworksConfig_NetworksConfig::status_)
      - PROTOBUF_FIELD_OFFSET(GatewayNetworksConfig_NetworksConfig, dhcpenabled_)>(
          reinterpret_cast<char*>(&dhcpenabled_),
          reinterpret_cast<char*>(&other->dhcpenabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GatewayNetworksConfig_NetworksConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[1]);
}

// ===================================================================

class GatewayNetworksConfig_NetworkIPConfig::_Internal {
 public:
};

GatewayNetworksConfig_NetworkIPConfig::GatewayNetworksConfig_NetworkIPConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GatewayNetworksConfig.NetworkIPConfig)
}
GatewayNetworksConfig_NetworkIPConfig::GatewayNetworksConfig_NetworkIPConfig(const GatewayNetworksConfig_NetworkIPConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  netip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    netip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_netip().empty()) {
    netip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_netip(), 
      GetArenaForAllocation());
  }
  netmask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    netmask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_netmask().empty()) {
    netmask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_netmask(), 
      GetArenaForAllocation());
  }
  defaultgate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    defaultgate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_defaultgate().empty()) {
    defaultgate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_defaultgate(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GatewayNetworksConfig.NetworkIPConfig)
}

inline void GatewayNetworksConfig_NetworkIPConfig::SharedCtor() {
netip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  netip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
netmask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  netmask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
defaultgate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  defaultgate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GatewayNetworksConfig_NetworkIPConfig::~GatewayNetworksConfig_NetworkIPConfig() {
  // @@protoc_insertion_point(destructor:GatewayNetworksConfig.NetworkIPConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GatewayNetworksConfig_NetworkIPConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  netip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  netmask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defaultgate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GatewayNetworksConfig_NetworkIPConfig::ArenaDtor(void* object) {
  GatewayNetworksConfig_NetworkIPConfig* _this = reinterpret_cast< GatewayNetworksConfig_NetworkIPConfig* >(object);
  (void)_this;
}
void GatewayNetworksConfig_NetworkIPConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GatewayNetworksConfig_NetworkIPConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GatewayNetworksConfig_NetworkIPConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayNetworksConfig.NetworkIPConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  netip_.ClearToEmpty();
  netmask_.ClearToEmpty();
  defaultgate_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GatewayNetworksConfig_NetworkIPConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string netIP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_netip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayNetworksConfig.NetworkIPConfig.netIP"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string netMask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_netmask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayNetworksConfig.NetworkIPConfig.netMask"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string defaultGate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_defaultgate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayNetworksConfig.NetworkIPConfig.defaultGate"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GatewayNetworksConfig_NetworkIPConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayNetworksConfig.NetworkIPConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string netIP = 1;
  if (!this->_internal_netip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_netip().data(), static_cast<int>(this->_internal_netip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GatewayNetworksConfig.NetworkIPConfig.netIP");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_netip(), target);
  }

  // string netMask = 2;
  if (!this->_internal_netmask().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_netmask().data(), static_cast<int>(this->_internal_netmask().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GatewayNetworksConfig.NetworkIPConfig.netMask");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_netmask(), target);
  }

  // string defaultGate = 3;
  if (!this->_internal_defaultgate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_defaultgate().data(), static_cast<int>(this->_internal_defaultgate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GatewayNetworksConfig.NetworkIPConfig.defaultGate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_defaultgate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayNetworksConfig.NetworkIPConfig)
  return target;
}

size_t GatewayNetworksConfig_NetworkIPConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayNetworksConfig.NetworkIPConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string netIP = 1;
  if (!this->_internal_netip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_netip());
  }

  // string netMask = 2;
  if (!this->_internal_netmask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_netmask());
  }

  // string defaultGate = 3;
  if (!this->_internal_defaultgate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_defaultgate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GatewayNetworksConfig_NetworkIPConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GatewayNetworksConfig_NetworkIPConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GatewayNetworksConfig_NetworkIPConfig::GetClassData() const { return &_class_data_; }

void GatewayNetworksConfig_NetworkIPConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GatewayNetworksConfig_NetworkIPConfig *>(to)->MergeFrom(
      static_cast<const GatewayNetworksConfig_NetworkIPConfig &>(from));
}


void GatewayNetworksConfig_NetworkIPConfig::MergeFrom(const GatewayNetworksConfig_NetworkIPConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayNetworksConfig.NetworkIPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_netip().empty()) {
    _internal_set_netip(from._internal_netip());
  }
  if (!from._internal_netmask().empty()) {
    _internal_set_netmask(from._internal_netmask());
  }
  if (!from._internal_defaultgate().empty()) {
    _internal_set_defaultgate(from._internal_defaultgate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GatewayNetworksConfig_NetworkIPConfig::CopyFrom(const GatewayNetworksConfig_NetworkIPConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayNetworksConfig.NetworkIPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayNetworksConfig_NetworkIPConfig::IsInitialized() const {
  return true;
}

void GatewayNetworksConfig_NetworkIPConfig::InternalSwap(GatewayNetworksConfig_NetworkIPConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &netip_, lhs_arena,
      &other->netip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &netmask_, lhs_arena,
      &other->netmask_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &defaultgate_, lhs_arena,
      &other->defaultgate_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GatewayNetworksConfig_NetworkIPConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[2]);
}

// ===================================================================

class GatewayNetworksConfig_NetworkDNSConfig::_Internal {
 public:
};

GatewayNetworksConfig_NetworkDNSConfig::GatewayNetworksConfig_NetworkDNSConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GatewayNetworksConfig.NetworkDNSConfig)
}
GatewayNetworksConfig_NetworkDNSConfig::GatewayNetworksConfig_NetworkDNSConfig(const GatewayNetworksConfig_NetworkDNSConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dnsconfig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dnsconfig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dnsconfig().empty()) {
    dnsconfig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dnsconfig(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GatewayNetworksConfig.NetworkDNSConfig)
}

inline void GatewayNetworksConfig_NetworkDNSConfig::SharedCtor() {
dnsconfig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dnsconfig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GatewayNetworksConfig_NetworkDNSConfig::~GatewayNetworksConfig_NetworkDNSConfig() {
  // @@protoc_insertion_point(destructor:GatewayNetworksConfig.NetworkDNSConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GatewayNetworksConfig_NetworkDNSConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dnsconfig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GatewayNetworksConfig_NetworkDNSConfig::ArenaDtor(void* object) {
  GatewayNetworksConfig_NetworkDNSConfig* _this = reinterpret_cast< GatewayNetworksConfig_NetworkDNSConfig* >(object);
  (void)_this;
}
void GatewayNetworksConfig_NetworkDNSConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GatewayNetworksConfig_NetworkDNSConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GatewayNetworksConfig_NetworkDNSConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayNetworksConfig.NetworkDNSConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dnsconfig_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GatewayNetworksConfig_NetworkDNSConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string DNSConfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dnsconfig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayNetworksConfig.NetworkDNSConfig.DNSConfig"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GatewayNetworksConfig_NetworkDNSConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayNetworksConfig.NetworkDNSConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string DNSConfig = 1;
  if (!this->_internal_dnsconfig().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dnsconfig().data(), static_cast<int>(this->_internal_dnsconfig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GatewayNetworksConfig.NetworkDNSConfig.DNSConfig");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dnsconfig(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayNetworksConfig.NetworkDNSConfig)
  return target;
}

size_t GatewayNetworksConfig_NetworkDNSConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayNetworksConfig.NetworkDNSConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string DNSConfig = 1;
  if (!this->_internal_dnsconfig().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dnsconfig());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GatewayNetworksConfig_NetworkDNSConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GatewayNetworksConfig_NetworkDNSConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GatewayNetworksConfig_NetworkDNSConfig::GetClassData() const { return &_class_data_; }

void GatewayNetworksConfig_NetworkDNSConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GatewayNetworksConfig_NetworkDNSConfig *>(to)->MergeFrom(
      static_cast<const GatewayNetworksConfig_NetworkDNSConfig &>(from));
}


void GatewayNetworksConfig_NetworkDNSConfig::MergeFrom(const GatewayNetworksConfig_NetworkDNSConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayNetworksConfig.NetworkDNSConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dnsconfig().empty()) {
    _internal_set_dnsconfig(from._internal_dnsconfig());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GatewayNetworksConfig_NetworkDNSConfig::CopyFrom(const GatewayNetworksConfig_NetworkDNSConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayNetworksConfig.NetworkDNSConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayNetworksConfig_NetworkDNSConfig::IsInitialized() const {
  return true;
}

void GatewayNetworksConfig_NetworkDNSConfig::InternalSwap(GatewayNetworksConfig_NetworkDNSConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dnsconfig_, lhs_arena,
      &other->dnsconfig_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GatewayNetworksConfig_NetworkDNSConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[3]);
}

// ===================================================================

class GatewayNetworksConfig::_Internal {
 public:
  static const ::GatewayNetworksConfig_NetworksConfig& otnetworkconfig(const GatewayNetworksConfig* msg);
};

const ::GatewayNetworksConfig_NetworksConfig&
GatewayNetworksConfig::_Internal::otnetworkconfig(const GatewayNetworksConfig* msg) {
  return *msg->otnetworkconfig_;
}
GatewayNetworksConfig::GatewayNetworksConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  networkipconfig_(arena),
  networkdnsconfig_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GatewayNetworksConfig)
}
GatewayNetworksConfig::GatewayNetworksConfig(const GatewayNetworksConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      networkipconfig_(from.networkipconfig_),
      networkdnsconfig_(from.networkdnsconfig_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_otnetworkconfig()) {
    otnetworkconfig_ = new ::GatewayNetworksConfig_NetworksConfig(*from.otnetworkconfig_);
  } else {
    otnetworkconfig_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GatewayNetworksConfig)
}

inline void GatewayNetworksConfig::SharedCtor() {
otnetworkconfig_ = nullptr;
}

GatewayNetworksConfig::~GatewayNetworksConfig() {
  // @@protoc_insertion_point(destructor:GatewayNetworksConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GatewayNetworksConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete otnetworkconfig_;
}

void GatewayNetworksConfig::ArenaDtor(void* object) {
  GatewayNetworksConfig* _this = reinterpret_cast< GatewayNetworksConfig* >(object);
  (void)_this;
}
void GatewayNetworksConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GatewayNetworksConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GatewayNetworksConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayNetworksConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networkipconfig_.Clear();
  networkdnsconfig_.Clear();
  if (GetArenaForAllocation() == nullptr && otnetworkconfig_ != nullptr) {
    delete otnetworkconfig_;
  }
  otnetworkconfig_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GatewayNetworksConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .GatewayNetworksConfig.NetworkIPConfig networkIPConfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_networkipconfig(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .GatewayNetworksConfig.NetworkDNSConfig networkDNSConfig = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_networkdnsconfig(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .GatewayNetworksConfig.NetworksConfig OTNetworkConfig = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_otnetworkconfig(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GatewayNetworksConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayNetworksConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GatewayNetworksConfig.NetworkIPConfig networkIPConfig = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_networkipconfig_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_networkipconfig(i), target, stream);
  }

  // repeated .GatewayNetworksConfig.NetworkDNSConfig networkDNSConfig = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_networkdnsconfig_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_networkdnsconfig(i), target, stream);
  }

  // .GatewayNetworksConfig.NetworksConfig OTNetworkConfig = 3;
  if (this->_internal_has_otnetworkconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::otnetworkconfig(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayNetworksConfig)
  return target;
}

size_t GatewayNetworksConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayNetworksConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GatewayNetworksConfig.NetworkIPConfig networkIPConfig = 1;
  total_size += 1UL * this->_internal_networkipconfig_size();
  for (const auto& msg : this->networkipconfig_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GatewayNetworksConfig.NetworkDNSConfig networkDNSConfig = 2;
  total_size += 1UL * this->_internal_networkdnsconfig_size();
  for (const auto& msg : this->networkdnsconfig_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .GatewayNetworksConfig.NetworksConfig OTNetworkConfig = 3;
  if (this->_internal_has_otnetworkconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *otnetworkconfig_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GatewayNetworksConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GatewayNetworksConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GatewayNetworksConfig::GetClassData() const { return &_class_data_; }

void GatewayNetworksConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GatewayNetworksConfig *>(to)->MergeFrom(
      static_cast<const GatewayNetworksConfig &>(from));
}


void GatewayNetworksConfig::MergeFrom(const GatewayNetworksConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayNetworksConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  networkipconfig_.MergeFrom(from.networkipconfig_);
  networkdnsconfig_.MergeFrom(from.networkdnsconfig_);
  if (from._internal_has_otnetworkconfig()) {
    _internal_mutable_otnetworkconfig()->::GatewayNetworksConfig_NetworksConfig::MergeFrom(from._internal_otnetworkconfig());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GatewayNetworksConfig::CopyFrom(const GatewayNetworksConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayNetworksConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayNetworksConfig::IsInitialized() const {
  return true;
}

void GatewayNetworksConfig::InternalSwap(GatewayNetworksConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  networkipconfig_.InternalSwap(&other->networkipconfig_);
  networkdnsconfig_.InternalSwap(&other->networkdnsconfig_);
  swap(otnetworkconfig_, other->otnetworkconfig_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GatewayNetworksConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_network_2eproto_getter, &descriptor_table_network_2eproto_once,
      file_level_metadata_network_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NetworkResponse* Arena::CreateMaybeMessage< ::NetworkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetworkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayNetworksConfig_NetworksConfig* Arena::CreateMaybeMessage< ::GatewayNetworksConfig_NetworksConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayNetworksConfig_NetworksConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayNetworksConfig_NetworkIPConfig* Arena::CreateMaybeMessage< ::GatewayNetworksConfig_NetworkIPConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayNetworksConfig_NetworkIPConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayNetworksConfig_NetworkDNSConfig* Arena::CreateMaybeMessage< ::GatewayNetworksConfig_NetworkDNSConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayNetworksConfig_NetworkDNSConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayNetworksConfig* Arena::CreateMaybeMessage< ::GatewayNetworksConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayNetworksConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
