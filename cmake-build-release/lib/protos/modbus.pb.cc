// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modbus.proto

#include "modbus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr ModbusConfigResponse::ModbusConfigResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errordesc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false)
  , errorcode_(0){}
struct ModbusConfigResponseDefaultTypeInternal {
  constexpr ModbusConfigResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModbusConfigResponseDefaultTypeInternal() {}
  union {
    ModbusConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModbusConfigResponseDefaultTypeInternal _ModbusConfigResponse_default_instance_;
constexpr ModbusConfig_ModbusDevice_ModbusRTUSlaves::ModbusConfig_ModbusDevice_ModbusRTUSlaves(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clientname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clientid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , baudrate_(0)

  , parity_(0)

  , startbit_(0)
  , stopbit_(0)
  , databit_(0){}
struct ModbusConfig_ModbusDevice_ModbusRTUSlavesDefaultTypeInternal {
  constexpr ModbusConfig_ModbusDevice_ModbusRTUSlavesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModbusConfig_ModbusDevice_ModbusRTUSlavesDefaultTypeInternal() {}
  union {
    ModbusConfig_ModbusDevice_ModbusRTUSlaves _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModbusConfig_ModbusDevice_ModbusRTUSlavesDefaultTypeInternal _ModbusConfig_ModbusDevice_ModbusRTUSlaves_default_instance_;
constexpr ModbusConfig_ModbusDevice_ModbusTCPSlaves::ModbusConfig_ModbusDevice_ModbusTCPSlaves(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clientname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clientid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0){}
struct ModbusConfig_ModbusDevice_ModbusTCPSlavesDefaultTypeInternal {
  constexpr ModbusConfig_ModbusDevice_ModbusTCPSlavesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModbusConfig_ModbusDevice_ModbusTCPSlavesDefaultTypeInternal() {}
  union {
    ModbusConfig_ModbusDevice_ModbusTCPSlaves _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModbusConfig_ModbusDevice_ModbusTCPSlavesDefaultTypeInternal _ModbusConfig_ModbusDevice_ModbusTCPSlaves_default_instance_;
constexpr ModbusConfig_ModbusDevice_ModbusTag::ModbusConfig_ModbusDevice_ModbusTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tagname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tagid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serverid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , datatype_(0)

  , functioncode_(0)

  , intervaltime_(0)
  , startingaddress_(0)
  , numberofregisters_(0){}
struct ModbusConfig_ModbusDevice_ModbusTagDefaultTypeInternal {
  constexpr ModbusConfig_ModbusDevice_ModbusTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModbusConfig_ModbusDevice_ModbusTagDefaultTypeInternal() {}
  union {
    ModbusConfig_ModbusDevice_ModbusTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModbusConfig_ModbusDevice_ModbusTagDefaultTypeInternal _ModbusConfig_ModbusDevice_ModbusTag_default_instance_;
constexpr ModbusConfig_ModbusDevice::ModbusConfig_ModbusDevice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modbustag_()
  , modbusrtuslaves_(nullptr)
  , modbustcpslaves_(nullptr)
  , rtuortcp_(false){}
struct ModbusConfig_ModbusDeviceDefaultTypeInternal {
  constexpr ModbusConfig_ModbusDeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModbusConfig_ModbusDeviceDefaultTypeInternal() {}
  union {
    ModbusConfig_ModbusDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModbusConfig_ModbusDeviceDefaultTypeInternal _ModbusConfig_ModbusDevice_default_instance_;
constexpr ModbusConfig::ModbusConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modbusdevice_(){}
struct ModbusConfigDefaultTypeInternal {
  constexpr ModbusConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModbusConfigDefaultTypeInternal() {}
  union {
    ModbusConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModbusConfigDefaultTypeInternal _ModbusConfig_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modbus_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modbus_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modbus_2eproto = nullptr;

const uint32_t TableStruct_modbus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ModbusConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ModbusConfigResponse, success_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfigResponse, errorcode_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfigResponse, errordesc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusRTUSlaves, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusRTUSlaves, clientname_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusRTUSlaves, clientid_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusRTUSlaves, baudrate_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusRTUSlaves, parity_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusRTUSlaves, startbit_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusRTUSlaves, stopbit_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusRTUSlaves, databit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusTCPSlaves, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusTCPSlaves, clientname_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusTCPSlaves, clientid_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusTCPSlaves, ip_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusTCPSlaves, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusTag, tagname_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusTag, tagid_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusTag, serverid_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusTag, datatype_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusTag, functioncode_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusTag, intervaltime_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusTag, startingaddress_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice_ModbusTag, numberofregisters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice, rtuortcp_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice, modbusrtuslaves_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice, modbustcpslaves_),
  PROTOBUF_FIELD_OFFSET(::ModbusConfig_ModbusDevice, modbustag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ModbusConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ModbusConfig, modbusdevice_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ModbusConfigResponse)},
  { 9, -1, -1, sizeof(::ModbusConfig_ModbusDevice_ModbusRTUSlaves)},
  { 22, -1, -1, sizeof(::ModbusConfig_ModbusDevice_ModbusTCPSlaves)},
  { 32, -1, -1, sizeof(::ModbusConfig_ModbusDevice_ModbusTag)},
  { 46, -1, -1, sizeof(::ModbusConfig_ModbusDevice)},
  { 56, -1, -1, sizeof(::ModbusConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ModbusConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ModbusConfig_ModbusDevice_ModbusRTUSlaves_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ModbusConfig_ModbusDevice_ModbusTCPSlaves_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ModbusConfig_ModbusDevice_ModbusTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ModbusConfig_ModbusDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ModbusConfig_default_instance_),
};

const char descriptor_table_protodef_modbus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014modbus.proto\"M\n\024ModbusConfigResponse\022\017"
  "\n\007Success\030\001 \001(\010\022\021\n\terrorCode\030\002 \001(\005\022\021\n\ter"
  "rorDesc\030\003 \001(\t\"\357\005\n\014ModbusConfig\0220\n\014modbus"
  "Device\030\001 \003(\0132\032.ModbusConfig.ModbusDevice"
  "\032\254\005\n\014ModbusDevice\022\020\n\010rtuOrTcp\030\001 \001(\010\022C\n\017m"
  "odbusRTUSlaves\030\002 \001(\0132*.ModbusConfig.Modb"
  "usDevice.ModbusRTUSlaves\022C\n\017modbusTCPSla"
  "ves\030\003 \001(\0132*.ModbusConfig.ModbusDevice.Mo"
  "dbusTCPSlaves\0227\n\tmodbusTag\030\004 \003(\0132$.Modbu"
  "sConfig.ModbusDevice.ModbusTag\032\241\001\n\017Modbu"
  "sRTUSlaves\022\022\n\nclientName\030\001 \001(\t\022\020\n\010client"
  "ID\030\002 \001(\t\022\033\n\010baudRate\030\003 \001(\0162\t.BaudRate\022\027\n"
  "\006parity\030\004 \001(\0162\007.Parity\022\020\n\010startBit\030\005 \001(\005"
  "\022\017\n\007stopBit\030\006 \001(\005\022\017\n\007dataBit\030\007 \001(\005\032Q\n\017Mo"
  "dbusTCPSlaves\022\022\n\nclientName\030\001 \001(\t\022\020\n\010cli"
  "entID\030\002 \001(\t\022\n\n\002IP\030\003 \001(\t\022\014\n\004port\030\004 \001(\005\032\317\001"
  "\n\tModbusTag\022\017\n\007tagName\030\001 \001(\t\022\r\n\005tagId\030\002 "
  "\001(\t\022\020\n\010serverId\030\003 \001(\t\022!\n\010dataType\030\004 \001(\0162"
  "\017.ModbusDataType\022#\n\014functionCode\030\005 \001(\0162\r"
  ".FunctionCode\022\024\n\014intervalTime\030\006 \001(\005\022\027\n\017s"
  "tartingAddress\030\007 \001(\005\022\031\n\021numberOfRegister"
  "s\030\010 \001(\005*%\n\006Parity\022\007\n\003ODD\020\000\022\010\n\004EVEN\020\001\022\010\n\004"
  "NONE\020\002*\344\001\n\010BaudRate\022\013\n\007BAUD110\020\000\022\013\n\007BAUD"
  "300\020\001\022\013\n\007BAUD600\020\002\022\014\n\010BAUD1200\020\003\022\014\n\010BAUD"
  "2400\020\004\022\014\n\010BAUD4800\020\005\022\014\n\010BAUD9600\020\006\022\r\n\tBA"
  "UD14400\020\007\022\r\n\tBAUD19200\020\010\022\r\n\tBAUD38400\020\t\022"
  "\r\n\tBAUD56000\020\n\022\r\n\tBAUD57600\020\013\022\016\n\nBAUD115"
  "200\020\014\022\016\n\nBAUD125000\020\r\022\016\n\nBAUD256000\020\016*\357\001"
  "\n\014FunctionCode\022\r\n\tRRAD_COIL\020\000\022\030\n\024READ_DI"
  "SCRETE_INPUTS\020\001\022#\n\037READ_MULTIPLE_HOLDING"
  "_REGISTERS\020\002\022\030\n\024READ_INPUT_REGISTERS\020\003\022\025"
  "\n\021WRITE_SINGLE_COIL\020\004\022!\n\035WRITE_SINGLE_HO"
  "LDING_REGISTER\020\005\022\030\n\024WRITE_MULTIPLE_COILS"
  "\020\006\022#\n\037WRITE_MULTIPLE_HLDING_REGISTERS\020\007*"
  "\251\001\n\016ModbusDataType\022\014\n\010MBOOLEAN\020\000\022\t\n\005MINT"
  "8\020\001\022\n\n\006MUINT8\020\002\022\n\n\006MINT16\020\003\022\013\n\007MUINT16\020\004"
  "\022\n\n\006MINT32\020\005\022\013\n\007MUINT32\020\006\022\n\n\006MINT64\020\007\022\013\n"
  "\007MUINT64\020\010\022\014\n\010MFLOAT32\020\t\022\014\n\010MFLOAT64\020\n\022\013"
  "\n\007MSTRING\020\0132T\n\022SystemModbusConfig\022>\n\026Sen"
  "dSystemModbusConfig\022\r.ModbusConfig\032\025.Mod"
  "busConfigResponseb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modbus_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modbus_2eproto = {
  false, false, 1625, descriptor_table_protodef_modbus_2eproto, "modbus.proto", 
  &descriptor_table_modbus_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_modbus_2eproto::offsets,
  file_level_metadata_modbus_2eproto, file_level_enum_descriptors_modbus_2eproto, file_level_service_descriptors_modbus_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modbus_2eproto_getter() {
  return &descriptor_table_modbus_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modbus_2eproto(&descriptor_table_modbus_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Parity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modbus_2eproto);
  return file_level_enum_descriptors_modbus_2eproto[0];
}
bool Parity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BaudRate_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modbus_2eproto);
  return file_level_enum_descriptors_modbus_2eproto[1];
}
bool BaudRate_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modbus_2eproto);
  return file_level_enum_descriptors_modbus_2eproto[2];
}
bool FunctionCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModbusDataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modbus_2eproto);
  return file_level_enum_descriptors_modbus_2eproto[3];
}
bool ModbusDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ModbusConfigResponse::_Internal {
 public:
};

ModbusConfigResponse::ModbusConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ModbusConfigResponse)
}
ModbusConfigResponse::ModbusConfigResponse(const ModbusConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errordesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errordesc().empty()) {
    errordesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errordesc(), 
      GetArenaForAllocation());
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:ModbusConfigResponse)
}

inline void ModbusConfigResponse::SharedCtor() {
errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errordesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
}

ModbusConfigResponse::~ModbusConfigResponse() {
  // @@protoc_insertion_point(destructor:ModbusConfigResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModbusConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errordesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModbusConfigResponse::ArenaDtor(void* object) {
  ModbusConfigResponse* _this = reinterpret_cast< ModbusConfigResponse* >(object);
  (void)_this;
}
void ModbusConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModbusConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModbusConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ModbusConfigResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errordesc_.ClearToEmpty();
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModbusConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errorDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errordesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModbusConfigResponse.errorDesc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModbusConfigResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ModbusConfigResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_errorcode(), target);
  }

  // string errorDesc = 3;
  if (!this->_internal_errordesc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errordesc().data(), static_cast<int>(this->_internal_errordesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModbusConfigResponse.errorDesc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errordesc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ModbusConfigResponse)
  return target;
}

size_t ModbusConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ModbusConfigResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorDesc = 3;
  if (!this->_internal_errordesc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errordesc());
  }

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_errorcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModbusConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModbusConfigResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModbusConfigResponse::GetClassData() const { return &_class_data_; }

void ModbusConfigResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModbusConfigResponse *>(to)->MergeFrom(
      static_cast<const ModbusConfigResponse &>(from));
}


void ModbusConfigResponse::MergeFrom(const ModbusConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ModbusConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errordesc().empty()) {
    _internal_set_errordesc(from._internal_errordesc());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModbusConfigResponse::CopyFrom(const ModbusConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ModbusConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModbusConfigResponse::IsInitialized() const {
  return true;
}

void ModbusConfigResponse::InternalSwap(ModbusConfigResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errordesc_, lhs_arena,
      &other->errordesc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModbusConfigResponse, errorcode_)
      + sizeof(ModbusConfigResponse::errorcode_)
      - PROTOBUF_FIELD_OFFSET(ModbusConfigResponse, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModbusConfigResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modbus_2eproto_getter, &descriptor_table_modbus_2eproto_once,
      file_level_metadata_modbus_2eproto[0]);
}

// ===================================================================

class ModbusConfig_ModbusDevice_ModbusRTUSlaves::_Internal {
 public:
};

ModbusConfig_ModbusDevice_ModbusRTUSlaves::ModbusConfig_ModbusDevice_ModbusRTUSlaves(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ModbusConfig.ModbusDevice.ModbusRTUSlaves)
}
ModbusConfig_ModbusDevice_ModbusRTUSlaves::ModbusConfig_ModbusDevice_ModbusRTUSlaves(const ModbusConfig_ModbusDevice_ModbusRTUSlaves& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    clientname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientname().empty()) {
    clientname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientname(), 
      GetArenaForAllocation());
  }
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&baudrate_, &from.baudrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&databit_) -
    reinterpret_cast<char*>(&baudrate_)) + sizeof(databit_));
  // @@protoc_insertion_point(copy_constructor:ModbusConfig.ModbusDevice.ModbusRTUSlaves)
}

inline void ModbusConfig_ModbusDevice_ModbusRTUSlaves::SharedCtor() {
clientname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clientname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&baudrate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&databit_) -
    reinterpret_cast<char*>(&baudrate_)) + sizeof(databit_));
}

ModbusConfig_ModbusDevice_ModbusRTUSlaves::~ModbusConfig_ModbusDevice_ModbusRTUSlaves() {
  // @@protoc_insertion_point(destructor:ModbusConfig.ModbusDevice.ModbusRTUSlaves)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModbusConfig_ModbusDevice_ModbusRTUSlaves::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  clientname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModbusConfig_ModbusDevice_ModbusRTUSlaves::ArenaDtor(void* object) {
  ModbusConfig_ModbusDevice_ModbusRTUSlaves* _this = reinterpret_cast< ModbusConfig_ModbusDevice_ModbusRTUSlaves* >(object);
  (void)_this;
}
void ModbusConfig_ModbusDevice_ModbusRTUSlaves::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModbusConfig_ModbusDevice_ModbusRTUSlaves::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModbusConfig_ModbusDevice_ModbusRTUSlaves::Clear() {
// @@protoc_insertion_point(message_clear_start:ModbusConfig.ModbusDevice.ModbusRTUSlaves)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientname_.ClearToEmpty();
  clientid_.ClearToEmpty();
  ::memset(&baudrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&databit_) -
      reinterpret_cast<char*>(&baudrate_)) + sizeof(databit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModbusConfig_ModbusDevice_ModbusRTUSlaves::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModbusConfig.ModbusDevice.ModbusRTUSlaves.clientName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clientID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModbusConfig.ModbusDevice.ModbusRTUSlaves.clientID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .BaudRate baudRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_baudrate(static_cast<::BaudRate>(val));
        } else
          goto handle_unusual;
        continue;
      // .Parity parity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_parity(static_cast<::Parity>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 startBit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          startbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stopBit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          stopbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dataBit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          databit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModbusConfig_ModbusDevice_ModbusRTUSlaves::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ModbusConfig.ModbusDevice.ModbusRTUSlaves)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientName = 1;
  if (!this->_internal_clientname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientname().data(), static_cast<int>(this->_internal_clientname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModbusConfig.ModbusDevice.ModbusRTUSlaves.clientName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientname(), target);
  }

  // string clientID = 2;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModbusConfig.ModbusDevice.ModbusRTUSlaves.clientID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientid(), target);
  }

  // .BaudRate baudRate = 3;
  if (this->_internal_baudrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_baudrate(), target);
  }

  // .Parity parity = 4;
  if (this->_internal_parity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_parity(), target);
  }

  // int32 startBit = 5;
  if (this->_internal_startbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_startbit(), target);
  }

  // int32 stopBit = 6;
  if (this->_internal_stopbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_stopbit(), target);
  }

  // int32 dataBit = 7;
  if (this->_internal_databit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_databit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ModbusConfig.ModbusDevice.ModbusRTUSlaves)
  return target;
}

size_t ModbusConfig_ModbusDevice_ModbusRTUSlaves::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ModbusConfig.ModbusDevice.ModbusRTUSlaves)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientName = 1;
  if (!this->_internal_clientname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientname());
  }

  // string clientID = 2;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // .BaudRate baudRate = 3;
  if (this->_internal_baudrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_baudrate());
  }

  // .Parity parity = 4;
  if (this->_internal_parity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parity());
  }

  // int32 startBit = 5;
  if (this->_internal_startbit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_startbit());
  }

  // int32 stopBit = 6;
  if (this->_internal_stopbit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_stopbit());
  }

  // int32 dataBit = 7;
  if (this->_internal_databit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_databit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModbusConfig_ModbusDevice_ModbusRTUSlaves::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModbusConfig_ModbusDevice_ModbusRTUSlaves::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModbusConfig_ModbusDevice_ModbusRTUSlaves::GetClassData() const { return &_class_data_; }

void ModbusConfig_ModbusDevice_ModbusRTUSlaves::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModbusConfig_ModbusDevice_ModbusRTUSlaves *>(to)->MergeFrom(
      static_cast<const ModbusConfig_ModbusDevice_ModbusRTUSlaves &>(from));
}


void ModbusConfig_ModbusDevice_ModbusRTUSlaves::MergeFrom(const ModbusConfig_ModbusDevice_ModbusRTUSlaves& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ModbusConfig.ModbusDevice.ModbusRTUSlaves)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientname().empty()) {
    _internal_set_clientname(from._internal_clientname());
  }
  if (!from._internal_clientid().empty()) {
    _internal_set_clientid(from._internal_clientid());
  }
  if (from._internal_baudrate() != 0) {
    _internal_set_baudrate(from._internal_baudrate());
  }
  if (from._internal_parity() != 0) {
    _internal_set_parity(from._internal_parity());
  }
  if (from._internal_startbit() != 0) {
    _internal_set_startbit(from._internal_startbit());
  }
  if (from._internal_stopbit() != 0) {
    _internal_set_stopbit(from._internal_stopbit());
  }
  if (from._internal_databit() != 0) {
    _internal_set_databit(from._internal_databit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModbusConfig_ModbusDevice_ModbusRTUSlaves::CopyFrom(const ModbusConfig_ModbusDevice_ModbusRTUSlaves& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ModbusConfig.ModbusDevice.ModbusRTUSlaves)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModbusConfig_ModbusDevice_ModbusRTUSlaves::IsInitialized() const {
  return true;
}

void ModbusConfig_ModbusDevice_ModbusRTUSlaves::InternalSwap(ModbusConfig_ModbusDevice_ModbusRTUSlaves* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clientname_, lhs_arena,
      &other->clientname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clientid_, lhs_arena,
      &other->clientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModbusConfig_ModbusDevice_ModbusRTUSlaves, databit_)
      + sizeof(ModbusConfig_ModbusDevice_ModbusRTUSlaves::databit_)
      - PROTOBUF_FIELD_OFFSET(ModbusConfig_ModbusDevice_ModbusRTUSlaves, baudrate_)>(
          reinterpret_cast<char*>(&baudrate_),
          reinterpret_cast<char*>(&other->baudrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModbusConfig_ModbusDevice_ModbusRTUSlaves::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modbus_2eproto_getter, &descriptor_table_modbus_2eproto_once,
      file_level_metadata_modbus_2eproto[1]);
}

// ===================================================================

class ModbusConfig_ModbusDevice_ModbusTCPSlaves::_Internal {
 public:
};

ModbusConfig_ModbusDevice_ModbusTCPSlaves::ModbusConfig_ModbusDevice_ModbusTCPSlaves(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ModbusConfig.ModbusDevice.ModbusTCPSlaves)
}
ModbusConfig_ModbusDevice_ModbusTCPSlaves::ModbusConfig_ModbusDevice_ModbusTCPSlaves(const ModbusConfig_ModbusDevice_ModbusTCPSlaves& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    clientname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientname().empty()) {
    clientname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientname(), 
      GetArenaForAllocation());
  }
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientid(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:ModbusConfig.ModbusDevice.ModbusTCPSlaves)
}

inline void ModbusConfig_ModbusDevice_ModbusTCPSlaves::SharedCtor() {
clientname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clientname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
port_ = 0;
}

ModbusConfig_ModbusDevice_ModbusTCPSlaves::~ModbusConfig_ModbusDevice_ModbusTCPSlaves() {
  // @@protoc_insertion_point(destructor:ModbusConfig.ModbusDevice.ModbusTCPSlaves)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModbusConfig_ModbusDevice_ModbusTCPSlaves::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  clientname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModbusConfig_ModbusDevice_ModbusTCPSlaves::ArenaDtor(void* object) {
  ModbusConfig_ModbusDevice_ModbusTCPSlaves* _this = reinterpret_cast< ModbusConfig_ModbusDevice_ModbusTCPSlaves* >(object);
  (void)_this;
}
void ModbusConfig_ModbusDevice_ModbusTCPSlaves::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModbusConfig_ModbusDevice_ModbusTCPSlaves::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModbusConfig_ModbusDevice_ModbusTCPSlaves::Clear() {
// @@protoc_insertion_point(message_clear_start:ModbusConfig.ModbusDevice.ModbusTCPSlaves)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientname_.ClearToEmpty();
  clientid_.ClearToEmpty();
  ip_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModbusConfig_ModbusDevice_ModbusTCPSlaves::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModbusConfig.ModbusDevice.ModbusTCPSlaves.clientName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clientID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModbusConfig.ModbusDevice.ModbusTCPSlaves.clientID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string IP = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModbusConfig.ModbusDevice.ModbusTCPSlaves.IP"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModbusConfig_ModbusDevice_ModbusTCPSlaves::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ModbusConfig.ModbusDevice.ModbusTCPSlaves)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientName = 1;
  if (!this->_internal_clientname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientname().data(), static_cast<int>(this->_internal_clientname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModbusConfig.ModbusDevice.ModbusTCPSlaves.clientName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientname(), target);
  }

  // string clientID = 2;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModbusConfig.ModbusDevice.ModbusTCPSlaves.clientID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientid(), target);
  }

  // string IP = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModbusConfig.ModbusDevice.ModbusTCPSlaves.IP");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ModbusConfig.ModbusDevice.ModbusTCPSlaves)
  return target;
}

size_t ModbusConfig_ModbusDevice_ModbusTCPSlaves::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ModbusConfig.ModbusDevice.ModbusTCPSlaves)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientName = 1;
  if (!this->_internal_clientname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientname());
  }

  // string clientID = 2;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string IP = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModbusConfig_ModbusDevice_ModbusTCPSlaves::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModbusConfig_ModbusDevice_ModbusTCPSlaves::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModbusConfig_ModbusDevice_ModbusTCPSlaves::GetClassData() const { return &_class_data_; }

void ModbusConfig_ModbusDevice_ModbusTCPSlaves::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModbusConfig_ModbusDevice_ModbusTCPSlaves *>(to)->MergeFrom(
      static_cast<const ModbusConfig_ModbusDevice_ModbusTCPSlaves &>(from));
}


void ModbusConfig_ModbusDevice_ModbusTCPSlaves::MergeFrom(const ModbusConfig_ModbusDevice_ModbusTCPSlaves& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ModbusConfig.ModbusDevice.ModbusTCPSlaves)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientname().empty()) {
    _internal_set_clientname(from._internal_clientname());
  }
  if (!from._internal_clientid().empty()) {
    _internal_set_clientid(from._internal_clientid());
  }
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModbusConfig_ModbusDevice_ModbusTCPSlaves::CopyFrom(const ModbusConfig_ModbusDevice_ModbusTCPSlaves& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ModbusConfig.ModbusDevice.ModbusTCPSlaves)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModbusConfig_ModbusDevice_ModbusTCPSlaves::IsInitialized() const {
  return true;
}

void ModbusConfig_ModbusDevice_ModbusTCPSlaves::InternalSwap(ModbusConfig_ModbusDevice_ModbusTCPSlaves* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clientname_, lhs_arena,
      &other->clientname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clientid_, lhs_arena,
      &other->clientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModbusConfig_ModbusDevice_ModbusTCPSlaves::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modbus_2eproto_getter, &descriptor_table_modbus_2eproto_once,
      file_level_metadata_modbus_2eproto[2]);
}

// ===================================================================

class ModbusConfig_ModbusDevice_ModbusTag::_Internal {
 public:
};

ModbusConfig_ModbusDevice_ModbusTag::ModbusConfig_ModbusDevice_ModbusTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ModbusConfig.ModbusDevice.ModbusTag)
}
ModbusConfig_ModbusDevice_ModbusTag::ModbusConfig_ModbusDevice_ModbusTag(const ModbusConfig_ModbusDevice_ModbusTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tagname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tagname().empty()) {
    tagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagname(), 
      GetArenaForAllocation());
  }
  tagid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tagid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tagid().empty()) {
    tagid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagid(), 
      GetArenaForAllocation());
  }
  serverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serverid().empty()) {
    serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serverid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&datatype_, &from.datatype_,
    static_cast<size_t>(reinterpret_cast<char*>(&numberofregisters_) -
    reinterpret_cast<char*>(&datatype_)) + sizeof(numberofregisters_));
  // @@protoc_insertion_point(copy_constructor:ModbusConfig.ModbusDevice.ModbusTag)
}

inline void ModbusConfig_ModbusDevice_ModbusTag::SharedCtor() {
tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tagname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tagid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tagid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&datatype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&numberofregisters_) -
    reinterpret_cast<char*>(&datatype_)) + sizeof(numberofregisters_));
}

ModbusConfig_ModbusDevice_ModbusTag::~ModbusConfig_ModbusDevice_ModbusTag() {
  // @@protoc_insertion_point(destructor:ModbusConfig.ModbusDevice.ModbusTag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModbusConfig_ModbusDevice_ModbusTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tagname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tagid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModbusConfig_ModbusDevice_ModbusTag::ArenaDtor(void* object) {
  ModbusConfig_ModbusDevice_ModbusTag* _this = reinterpret_cast< ModbusConfig_ModbusDevice_ModbusTag* >(object);
  (void)_this;
}
void ModbusConfig_ModbusDevice_ModbusTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModbusConfig_ModbusDevice_ModbusTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModbusConfig_ModbusDevice_ModbusTag::Clear() {
// @@protoc_insertion_point(message_clear_start:ModbusConfig.ModbusDevice.ModbusTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagname_.ClearToEmpty();
  tagid_.ClearToEmpty();
  serverid_.ClearToEmpty();
  ::memset(&datatype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numberofregisters_) -
      reinterpret_cast<char*>(&datatype_)) + sizeof(numberofregisters_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModbusConfig_ModbusDevice_ModbusTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tagName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tagname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModbusConfig.ModbusDevice.ModbusTag.tagName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tagId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tagid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModbusConfig.ModbusDevice.ModbusTag.tagId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serverId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_serverid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModbusConfig.ModbusDevice.ModbusTag.serverId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ModbusDataType dataType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_datatype(static_cast<::ModbusDataType>(val));
        } else
          goto handle_unusual;
        continue;
      // .FunctionCode functionCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_functioncode(static_cast<::FunctionCode>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 intervalTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          intervaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 startingAddress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          startingaddress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 numberOfRegisters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          numberofregisters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModbusConfig_ModbusDevice_ModbusTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ModbusConfig.ModbusDevice.ModbusTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tagName = 1;
  if (!this->_internal_tagname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagname().data(), static_cast<int>(this->_internal_tagname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModbusConfig.ModbusDevice.ModbusTag.tagName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tagname(), target);
  }

  // string tagId = 2;
  if (!this->_internal_tagid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagid().data(), static_cast<int>(this->_internal_tagid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModbusConfig.ModbusDevice.ModbusTag.tagId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tagid(), target);
  }

  // string serverId = 3;
  if (!this->_internal_serverid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverid().data(), static_cast<int>(this->_internal_serverid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModbusConfig.ModbusDevice.ModbusTag.serverId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serverid(), target);
  }

  // .ModbusDataType dataType = 4;
  if (this->_internal_datatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_datatype(), target);
  }

  // .FunctionCode functionCode = 5;
  if (this->_internal_functioncode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_functioncode(), target);
  }

  // int32 intervalTime = 6;
  if (this->_internal_intervaltime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_intervaltime(), target);
  }

  // int32 startingAddress = 7;
  if (this->_internal_startingaddress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_startingaddress(), target);
  }

  // int32 numberOfRegisters = 8;
  if (this->_internal_numberofregisters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_numberofregisters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ModbusConfig.ModbusDevice.ModbusTag)
  return target;
}

size_t ModbusConfig_ModbusDevice_ModbusTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ModbusConfig.ModbusDevice.ModbusTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tagName = 1;
  if (!this->_internal_tagname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagname());
  }

  // string tagId = 2;
  if (!this->_internal_tagid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagid());
  }

  // string serverId = 3;
  if (!this->_internal_serverid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverid());
  }

  // .ModbusDataType dataType = 4;
  if (this->_internal_datatype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_datatype());
  }

  // .FunctionCode functionCode = 5;
  if (this->_internal_functioncode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_functioncode());
  }

  // int32 intervalTime = 6;
  if (this->_internal_intervaltime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_intervaltime());
  }

  // int32 startingAddress = 7;
  if (this->_internal_startingaddress() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_startingaddress());
  }

  // int32 numberOfRegisters = 8;
  if (this->_internal_numberofregisters() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_numberofregisters());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModbusConfig_ModbusDevice_ModbusTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModbusConfig_ModbusDevice_ModbusTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModbusConfig_ModbusDevice_ModbusTag::GetClassData() const { return &_class_data_; }

void ModbusConfig_ModbusDevice_ModbusTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModbusConfig_ModbusDevice_ModbusTag *>(to)->MergeFrom(
      static_cast<const ModbusConfig_ModbusDevice_ModbusTag &>(from));
}


void ModbusConfig_ModbusDevice_ModbusTag::MergeFrom(const ModbusConfig_ModbusDevice_ModbusTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ModbusConfig.ModbusDevice.ModbusTag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tagname().empty()) {
    _internal_set_tagname(from._internal_tagname());
  }
  if (!from._internal_tagid().empty()) {
    _internal_set_tagid(from._internal_tagid());
  }
  if (!from._internal_serverid().empty()) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_datatype() != 0) {
    _internal_set_datatype(from._internal_datatype());
  }
  if (from._internal_functioncode() != 0) {
    _internal_set_functioncode(from._internal_functioncode());
  }
  if (from._internal_intervaltime() != 0) {
    _internal_set_intervaltime(from._internal_intervaltime());
  }
  if (from._internal_startingaddress() != 0) {
    _internal_set_startingaddress(from._internal_startingaddress());
  }
  if (from._internal_numberofregisters() != 0) {
    _internal_set_numberofregisters(from._internal_numberofregisters());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModbusConfig_ModbusDevice_ModbusTag::CopyFrom(const ModbusConfig_ModbusDevice_ModbusTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ModbusConfig.ModbusDevice.ModbusTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModbusConfig_ModbusDevice_ModbusTag::IsInitialized() const {
  return true;
}

void ModbusConfig_ModbusDevice_ModbusTag::InternalSwap(ModbusConfig_ModbusDevice_ModbusTag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagname_, lhs_arena,
      &other->tagname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagid_, lhs_arena,
      &other->tagid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serverid_, lhs_arena,
      &other->serverid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModbusConfig_ModbusDevice_ModbusTag, numberofregisters_)
      + sizeof(ModbusConfig_ModbusDevice_ModbusTag::numberofregisters_)
      - PROTOBUF_FIELD_OFFSET(ModbusConfig_ModbusDevice_ModbusTag, datatype_)>(
          reinterpret_cast<char*>(&datatype_),
          reinterpret_cast<char*>(&other->datatype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModbusConfig_ModbusDevice_ModbusTag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modbus_2eproto_getter, &descriptor_table_modbus_2eproto_once,
      file_level_metadata_modbus_2eproto[3]);
}

// ===================================================================

class ModbusConfig_ModbusDevice::_Internal {
 public:
  static const ::ModbusConfig_ModbusDevice_ModbusRTUSlaves& modbusrtuslaves(const ModbusConfig_ModbusDevice* msg);
  static const ::ModbusConfig_ModbusDevice_ModbusTCPSlaves& modbustcpslaves(const ModbusConfig_ModbusDevice* msg);
};

const ::ModbusConfig_ModbusDevice_ModbusRTUSlaves&
ModbusConfig_ModbusDevice::_Internal::modbusrtuslaves(const ModbusConfig_ModbusDevice* msg) {
  return *msg->modbusrtuslaves_;
}
const ::ModbusConfig_ModbusDevice_ModbusTCPSlaves&
ModbusConfig_ModbusDevice::_Internal::modbustcpslaves(const ModbusConfig_ModbusDevice* msg) {
  return *msg->modbustcpslaves_;
}
ModbusConfig_ModbusDevice::ModbusConfig_ModbusDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  modbustag_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ModbusConfig.ModbusDevice)
}
ModbusConfig_ModbusDevice::ModbusConfig_ModbusDevice(const ModbusConfig_ModbusDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      modbustag_(from.modbustag_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_modbusrtuslaves()) {
    modbusrtuslaves_ = new ::ModbusConfig_ModbusDevice_ModbusRTUSlaves(*from.modbusrtuslaves_);
  } else {
    modbusrtuslaves_ = nullptr;
  }
  if (from._internal_has_modbustcpslaves()) {
    modbustcpslaves_ = new ::ModbusConfig_ModbusDevice_ModbusTCPSlaves(*from.modbustcpslaves_);
  } else {
    modbustcpslaves_ = nullptr;
  }
  rtuortcp_ = from.rtuortcp_;
  // @@protoc_insertion_point(copy_constructor:ModbusConfig.ModbusDevice)
}

inline void ModbusConfig_ModbusDevice::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&modbusrtuslaves_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtuortcp_) -
    reinterpret_cast<char*>(&modbusrtuslaves_)) + sizeof(rtuortcp_));
}

ModbusConfig_ModbusDevice::~ModbusConfig_ModbusDevice() {
  // @@protoc_insertion_point(destructor:ModbusConfig.ModbusDevice)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModbusConfig_ModbusDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete modbusrtuslaves_;
  if (this != internal_default_instance()) delete modbustcpslaves_;
}

void ModbusConfig_ModbusDevice::ArenaDtor(void* object) {
  ModbusConfig_ModbusDevice* _this = reinterpret_cast< ModbusConfig_ModbusDevice* >(object);
  (void)_this;
}
void ModbusConfig_ModbusDevice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModbusConfig_ModbusDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModbusConfig_ModbusDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:ModbusConfig.ModbusDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modbustag_.Clear();
  if (GetArenaForAllocation() == nullptr && modbusrtuslaves_ != nullptr) {
    delete modbusrtuslaves_;
  }
  modbusrtuslaves_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modbustcpslaves_ != nullptr) {
    delete modbustcpslaves_;
  }
  modbustcpslaves_ = nullptr;
  rtuortcp_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModbusConfig_ModbusDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool rtuOrTcp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          rtuortcp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ModbusConfig.ModbusDevice.ModbusRTUSlaves modbusRTUSlaves = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_modbusrtuslaves(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ModbusConfig.ModbusDevice.ModbusTCPSlaves modbusTCPSlaves = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modbustcpslaves(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ModbusConfig.ModbusDevice.ModbusTag modbusTag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modbustag(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModbusConfig_ModbusDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ModbusConfig.ModbusDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool rtuOrTcp = 1;
  if (this->_internal_rtuortcp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_rtuortcp(), target);
  }

  // .ModbusConfig.ModbusDevice.ModbusRTUSlaves modbusRTUSlaves = 2;
  if (this->_internal_has_modbusrtuslaves()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::modbusrtuslaves(this), target, stream);
  }

  // .ModbusConfig.ModbusDevice.ModbusTCPSlaves modbusTCPSlaves = 3;
  if (this->_internal_has_modbustcpslaves()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::modbustcpslaves(this), target, stream);
  }

  // repeated .ModbusConfig.ModbusDevice.ModbusTag modbusTag = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_modbustag_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_modbustag(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ModbusConfig.ModbusDevice)
  return target;
}

size_t ModbusConfig_ModbusDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ModbusConfig.ModbusDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ModbusConfig.ModbusDevice.ModbusTag modbusTag = 4;
  total_size += 1UL * this->_internal_modbustag_size();
  for (const auto& msg : this->modbustag_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ModbusConfig.ModbusDevice.ModbusRTUSlaves modbusRTUSlaves = 2;
  if (this->_internal_has_modbusrtuslaves()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modbusrtuslaves_);
  }

  // .ModbusConfig.ModbusDevice.ModbusTCPSlaves modbusTCPSlaves = 3;
  if (this->_internal_has_modbustcpslaves()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modbustcpslaves_);
  }

  // bool rtuOrTcp = 1;
  if (this->_internal_rtuortcp() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModbusConfig_ModbusDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModbusConfig_ModbusDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModbusConfig_ModbusDevice::GetClassData() const { return &_class_data_; }

void ModbusConfig_ModbusDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModbusConfig_ModbusDevice *>(to)->MergeFrom(
      static_cast<const ModbusConfig_ModbusDevice &>(from));
}


void ModbusConfig_ModbusDevice::MergeFrom(const ModbusConfig_ModbusDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ModbusConfig.ModbusDevice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  modbustag_.MergeFrom(from.modbustag_);
  if (from._internal_has_modbusrtuslaves()) {
    _internal_mutable_modbusrtuslaves()->::ModbusConfig_ModbusDevice_ModbusRTUSlaves::MergeFrom(from._internal_modbusrtuslaves());
  }
  if (from._internal_has_modbustcpslaves()) {
    _internal_mutable_modbustcpslaves()->::ModbusConfig_ModbusDevice_ModbusTCPSlaves::MergeFrom(from._internal_modbustcpslaves());
  }
  if (from._internal_rtuortcp() != 0) {
    _internal_set_rtuortcp(from._internal_rtuortcp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModbusConfig_ModbusDevice::CopyFrom(const ModbusConfig_ModbusDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ModbusConfig.ModbusDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModbusConfig_ModbusDevice::IsInitialized() const {
  return true;
}

void ModbusConfig_ModbusDevice::InternalSwap(ModbusConfig_ModbusDevice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  modbustag_.InternalSwap(&other->modbustag_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModbusConfig_ModbusDevice, rtuortcp_)
      + sizeof(ModbusConfig_ModbusDevice::rtuortcp_)
      - PROTOBUF_FIELD_OFFSET(ModbusConfig_ModbusDevice, modbusrtuslaves_)>(
          reinterpret_cast<char*>(&modbusrtuslaves_),
          reinterpret_cast<char*>(&other->modbusrtuslaves_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModbusConfig_ModbusDevice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modbus_2eproto_getter, &descriptor_table_modbus_2eproto_once,
      file_level_metadata_modbus_2eproto[4]);
}

// ===================================================================

class ModbusConfig::_Internal {
 public:
};

ModbusConfig::ModbusConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  modbusdevice_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ModbusConfig)
}
ModbusConfig::ModbusConfig(const ModbusConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      modbusdevice_(from.modbusdevice_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ModbusConfig)
}

inline void ModbusConfig::SharedCtor() {
}

ModbusConfig::~ModbusConfig() {
  // @@protoc_insertion_point(destructor:ModbusConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModbusConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModbusConfig::ArenaDtor(void* object) {
  ModbusConfig* _this = reinterpret_cast< ModbusConfig* >(object);
  (void)_this;
}
void ModbusConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModbusConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModbusConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ModbusConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modbusdevice_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModbusConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ModbusConfig.ModbusDevice modbusDevice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modbusdevice(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModbusConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ModbusConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ModbusConfig.ModbusDevice modbusDevice = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_modbusdevice_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_modbusdevice(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ModbusConfig)
  return target;
}

size_t ModbusConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ModbusConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ModbusConfig.ModbusDevice modbusDevice = 1;
  total_size += 1UL * this->_internal_modbusdevice_size();
  for (const auto& msg : this->modbusdevice_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModbusConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModbusConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModbusConfig::GetClassData() const { return &_class_data_; }

void ModbusConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModbusConfig *>(to)->MergeFrom(
      static_cast<const ModbusConfig &>(from));
}


void ModbusConfig::MergeFrom(const ModbusConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ModbusConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  modbusdevice_.MergeFrom(from.modbusdevice_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModbusConfig::CopyFrom(const ModbusConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ModbusConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModbusConfig::IsInitialized() const {
  return true;
}

void ModbusConfig::InternalSwap(ModbusConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  modbusdevice_.InternalSwap(&other->modbusdevice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModbusConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modbus_2eproto_getter, &descriptor_table_modbus_2eproto_once,
      file_level_metadata_modbus_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ModbusConfigResponse* Arena::CreateMaybeMessage< ::ModbusConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ModbusConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ModbusConfig_ModbusDevice_ModbusRTUSlaves* Arena::CreateMaybeMessage< ::ModbusConfig_ModbusDevice_ModbusRTUSlaves >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ModbusConfig_ModbusDevice_ModbusRTUSlaves >(arena);
}
template<> PROTOBUF_NOINLINE ::ModbusConfig_ModbusDevice_ModbusTCPSlaves* Arena::CreateMaybeMessage< ::ModbusConfig_ModbusDevice_ModbusTCPSlaves >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ModbusConfig_ModbusDevice_ModbusTCPSlaves >(arena);
}
template<> PROTOBUF_NOINLINE ::ModbusConfig_ModbusDevice_ModbusTag* Arena::CreateMaybeMessage< ::ModbusConfig_ModbusDevice_ModbusTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ModbusConfig_ModbusDevice_ModbusTag >(arena);
}
template<> PROTOBUF_NOINLINE ::ModbusConfig_ModbusDevice* Arena::CreateMaybeMessage< ::ModbusConfig_ModbusDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ModbusConfig_ModbusDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::ModbusConfig* Arena::CreateMaybeMessage< ::ModbusConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ModbusConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
