// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: convert.proto

#include "convert.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr ConvertProtocolConfigResponse::ConvertProtocolConfigResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errordesc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false)
  , errorcode_(0){}
struct ConvertProtocolConfigResponseDefaultTypeInternal {
  constexpr ConvertProtocolConfigResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConvertProtocolConfigResponseDefaultTypeInternal() {}
  union {
    ConvertProtocolConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConvertProtocolConfigResponseDefaultTypeInternal _ConvertProtocolConfigResponse_default_instance_;
constexpr ConfigConvertProtocol_ConvertProtocol::ConfigConvertProtocol_ConvertProtocol(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tagnamesource_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tagnamedist_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timer_(0){}
struct ConfigConvertProtocol_ConvertProtocolDefaultTypeInternal {
  constexpr ConfigConvertProtocol_ConvertProtocolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigConvertProtocol_ConvertProtocolDefaultTypeInternal() {}
  union {
    ConfigConvertProtocol_ConvertProtocol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigConvertProtocol_ConvertProtocolDefaultTypeInternal _ConfigConvertProtocol_ConvertProtocol_default_instance_;
constexpr ConfigConvertProtocol::ConfigConvertProtocol(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : convertprotocol_(){}
struct ConfigConvertProtocolDefaultTypeInternal {
  constexpr ConfigConvertProtocolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigConvertProtocolDefaultTypeInternal() {}
  union {
    ConfigConvertProtocol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigConvertProtocolDefaultTypeInternal _ConfigConvertProtocol_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_convert_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_convert_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_convert_2eproto = nullptr;

const uint32_t TableStruct_convert_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConvertProtocolConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConvertProtocolConfigResponse, success_),
  PROTOBUF_FIELD_OFFSET(::ConvertProtocolConfigResponse, errorcode_),
  PROTOBUF_FIELD_OFFSET(::ConvertProtocolConfigResponse, errordesc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigConvertProtocol_ConvertProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConfigConvertProtocol_ConvertProtocol, tagnamesource_),
  PROTOBUF_FIELD_OFFSET(::ConfigConvertProtocol_ConvertProtocol, tagnamedist_),
  PROTOBUF_FIELD_OFFSET(::ConfigConvertProtocol_ConvertProtocol, timer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigConvertProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConfigConvertProtocol, convertprotocol_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ConvertProtocolConfigResponse)},
  { 9, -1, -1, sizeof(::ConfigConvertProtocol_ConvertProtocol)},
  { 18, -1, -1, sizeof(::ConfigConvertProtocol)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConvertProtocolConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigConvertProtocol_ConvertProtocol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigConvertProtocol_default_instance_),
};

const char descriptor_table_protodef_convert_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rconvert.proto\"V\n\035ConvertProtocolConfig"
  "Response\022\017\n\007Success\030\001 \001(\010\022\021\n\terrorCode\030\002"
  " \001(\005\022\021\n\terrorDesc\030\003 \001(\t\"\246\001\n\025ConfigConver"
  "tProtocol\022\?\n\017convertProtocol\030\001 \003(\0132&.Con"
  "figConvertProtocol.ConvertProtocol\032L\n\017Co"
  "nvertProtocol\022\025\n\rtagNameSource\030\001 \001(\t\022\023\n\013"
  "tagNameDist\030\002 \001(\t\022\r\n\005timer\030\003 \001(\0052x\n\033Syst"
  "emConvertProtocolConfig\022Y\n\037SendSystemCon"
  "vertProtocolConfig\022\026.ConfigConvertProtoc"
  "ol\032\036.ConvertProtocolConfigResponseb\006prot"
  "o3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_convert_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_convert_2eproto = {
  false, false, 402, descriptor_table_protodef_convert_2eproto, "convert.proto", 
  &descriptor_table_convert_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_convert_2eproto::offsets,
  file_level_metadata_convert_2eproto, file_level_enum_descriptors_convert_2eproto, file_level_service_descriptors_convert_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_convert_2eproto_getter() {
  return &descriptor_table_convert_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_convert_2eproto(&descriptor_table_convert_2eproto);

// ===================================================================

class ConvertProtocolConfigResponse::_Internal {
 public:
};

ConvertProtocolConfigResponse::ConvertProtocolConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ConvertProtocolConfigResponse)
}
ConvertProtocolConfigResponse::ConvertProtocolConfigResponse(const ConvertProtocolConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errordesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errordesc().empty()) {
    errordesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errordesc(), 
      GetArenaForAllocation());
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:ConvertProtocolConfigResponse)
}

inline void ConvertProtocolConfigResponse::SharedCtor() {
errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errordesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
}

ConvertProtocolConfigResponse::~ConvertProtocolConfigResponse() {
  // @@protoc_insertion_point(destructor:ConvertProtocolConfigResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConvertProtocolConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errordesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConvertProtocolConfigResponse::ArenaDtor(void* object) {
  ConvertProtocolConfigResponse* _this = reinterpret_cast< ConvertProtocolConfigResponse* >(object);
  (void)_this;
}
void ConvertProtocolConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConvertProtocolConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConvertProtocolConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConvertProtocolConfigResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errordesc_.ClearToEmpty();
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConvertProtocolConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errorDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errordesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConvertProtocolConfigResponse.errorDesc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConvertProtocolConfigResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConvertProtocolConfigResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_errorcode(), target);
  }

  // string errorDesc = 3;
  if (!this->_internal_errordesc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errordesc().data(), static_cast<int>(this->_internal_errordesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConvertProtocolConfigResponse.errorDesc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errordesc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConvertProtocolConfigResponse)
  return target;
}

size_t ConvertProtocolConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConvertProtocolConfigResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorDesc = 3;
  if (!this->_internal_errordesc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errordesc());
  }

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_errorcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConvertProtocolConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConvertProtocolConfigResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConvertProtocolConfigResponse::GetClassData() const { return &_class_data_; }

void ConvertProtocolConfigResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConvertProtocolConfigResponse *>(to)->MergeFrom(
      static_cast<const ConvertProtocolConfigResponse &>(from));
}


void ConvertProtocolConfigResponse::MergeFrom(const ConvertProtocolConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConvertProtocolConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errordesc().empty()) {
    _internal_set_errordesc(from._internal_errordesc());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConvertProtocolConfigResponse::CopyFrom(const ConvertProtocolConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConvertProtocolConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertProtocolConfigResponse::IsInitialized() const {
  return true;
}

void ConvertProtocolConfigResponse::InternalSwap(ConvertProtocolConfigResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errordesc_, lhs_arena,
      &other->errordesc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConvertProtocolConfigResponse, errorcode_)
      + sizeof(ConvertProtocolConfigResponse::errorcode_)
      - PROTOBUF_FIELD_OFFSET(ConvertProtocolConfigResponse, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvertProtocolConfigResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_convert_2eproto_getter, &descriptor_table_convert_2eproto_once,
      file_level_metadata_convert_2eproto[0]);
}

// ===================================================================

class ConfigConvertProtocol_ConvertProtocol::_Internal {
 public:
};

ConfigConvertProtocol_ConvertProtocol::ConfigConvertProtocol_ConvertProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ConfigConvertProtocol.ConvertProtocol)
}
ConfigConvertProtocol_ConvertProtocol::ConfigConvertProtocol_ConvertProtocol(const ConfigConvertProtocol_ConvertProtocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tagnamesource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tagnamesource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tagnamesource().empty()) {
    tagnamesource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagnamesource(), 
      GetArenaForAllocation());
  }
  tagnamedist_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tagnamedist_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tagnamedist().empty()) {
    tagnamedist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagnamedist(), 
      GetArenaForAllocation());
  }
  timer_ = from.timer_;
  // @@protoc_insertion_point(copy_constructor:ConfigConvertProtocol.ConvertProtocol)
}

inline void ConfigConvertProtocol_ConvertProtocol::SharedCtor() {
tagnamesource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tagnamesource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tagnamedist_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tagnamedist_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timer_ = 0;
}

ConfigConvertProtocol_ConvertProtocol::~ConfigConvertProtocol_ConvertProtocol() {
  // @@protoc_insertion_point(destructor:ConfigConvertProtocol.ConvertProtocol)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigConvertProtocol_ConvertProtocol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tagnamesource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tagnamedist_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigConvertProtocol_ConvertProtocol::ArenaDtor(void* object) {
  ConfigConvertProtocol_ConvertProtocol* _this = reinterpret_cast< ConfigConvertProtocol_ConvertProtocol* >(object);
  (void)_this;
}
void ConfigConvertProtocol_ConvertProtocol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigConvertProtocol_ConvertProtocol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigConvertProtocol_ConvertProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigConvertProtocol.ConvertProtocol)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagnamesource_.ClearToEmpty();
  tagnamedist_.ClearToEmpty();
  timer_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigConvertProtocol_ConvertProtocol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tagNameSource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tagnamesource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigConvertProtocol.ConvertProtocol.tagNameSource"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tagNameDist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tagnamedist();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigConvertProtocol.ConvertProtocol.tagNameDist"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigConvertProtocol_ConvertProtocol::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigConvertProtocol.ConvertProtocol)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tagNameSource = 1;
  if (!this->_internal_tagnamesource().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagnamesource().data(), static_cast<int>(this->_internal_tagnamesource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigConvertProtocol.ConvertProtocol.tagNameSource");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tagnamesource(), target);
  }

  // string tagNameDist = 2;
  if (!this->_internal_tagnamedist().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagnamedist().data(), static_cast<int>(this->_internal_tagnamedist().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigConvertProtocol.ConvertProtocol.tagNameDist");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tagnamedist(), target);
  }

  // int32 timer = 3;
  if (this->_internal_timer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_timer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigConvertProtocol.ConvertProtocol)
  return target;
}

size_t ConfigConvertProtocol_ConvertProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigConvertProtocol.ConvertProtocol)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tagNameSource = 1;
  if (!this->_internal_tagnamesource().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagnamesource());
  }

  // string tagNameDist = 2;
  if (!this->_internal_tagnamedist().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagnamedist());
  }

  // int32 timer = 3;
  if (this->_internal_timer() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_timer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigConvertProtocol_ConvertProtocol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigConvertProtocol_ConvertProtocol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigConvertProtocol_ConvertProtocol::GetClassData() const { return &_class_data_; }

void ConfigConvertProtocol_ConvertProtocol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigConvertProtocol_ConvertProtocol *>(to)->MergeFrom(
      static_cast<const ConfigConvertProtocol_ConvertProtocol &>(from));
}


void ConfigConvertProtocol_ConvertProtocol::MergeFrom(const ConfigConvertProtocol_ConvertProtocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigConvertProtocol.ConvertProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tagnamesource().empty()) {
    _internal_set_tagnamesource(from._internal_tagnamesource());
  }
  if (!from._internal_tagnamedist().empty()) {
    _internal_set_tagnamedist(from._internal_tagnamedist());
  }
  if (from._internal_timer() != 0) {
    _internal_set_timer(from._internal_timer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigConvertProtocol_ConvertProtocol::CopyFrom(const ConfigConvertProtocol_ConvertProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigConvertProtocol.ConvertProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigConvertProtocol_ConvertProtocol::IsInitialized() const {
  return true;
}

void ConfigConvertProtocol_ConvertProtocol::InternalSwap(ConfigConvertProtocol_ConvertProtocol* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagnamesource_, lhs_arena,
      &other->tagnamesource_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagnamedist_, lhs_arena,
      &other->tagnamedist_, rhs_arena
  );
  swap(timer_, other->timer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigConvertProtocol_ConvertProtocol::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_convert_2eproto_getter, &descriptor_table_convert_2eproto_once,
      file_level_metadata_convert_2eproto[1]);
}

// ===================================================================

class ConfigConvertProtocol::_Internal {
 public:
};

ConfigConvertProtocol::ConfigConvertProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  convertprotocol_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ConfigConvertProtocol)
}
ConfigConvertProtocol::ConfigConvertProtocol(const ConfigConvertProtocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      convertprotocol_(from.convertprotocol_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConfigConvertProtocol)
}

inline void ConfigConvertProtocol::SharedCtor() {
}

ConfigConvertProtocol::~ConfigConvertProtocol() {
  // @@protoc_insertion_point(destructor:ConfigConvertProtocol)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigConvertProtocol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfigConvertProtocol::ArenaDtor(void* object) {
  ConfigConvertProtocol* _this = reinterpret_cast< ConfigConvertProtocol* >(object);
  (void)_this;
}
void ConfigConvertProtocol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigConvertProtocol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigConvertProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigConvertProtocol)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  convertprotocol_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigConvertProtocol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ConfigConvertProtocol.ConvertProtocol convertProtocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_convertprotocol(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigConvertProtocol::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigConvertProtocol)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ConfigConvertProtocol.ConvertProtocol convertProtocol = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_convertprotocol_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_convertprotocol(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigConvertProtocol)
  return target;
}

size_t ConfigConvertProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigConvertProtocol)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ConfigConvertProtocol.ConvertProtocol convertProtocol = 1;
  total_size += 1UL * this->_internal_convertprotocol_size();
  for (const auto& msg : this->convertprotocol_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigConvertProtocol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigConvertProtocol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigConvertProtocol::GetClassData() const { return &_class_data_; }

void ConfigConvertProtocol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigConvertProtocol *>(to)->MergeFrom(
      static_cast<const ConfigConvertProtocol &>(from));
}


void ConfigConvertProtocol::MergeFrom(const ConfigConvertProtocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigConvertProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  convertprotocol_.MergeFrom(from.convertprotocol_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigConvertProtocol::CopyFrom(const ConfigConvertProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigConvertProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigConvertProtocol::IsInitialized() const {
  return true;
}

void ConfigConvertProtocol::InternalSwap(ConfigConvertProtocol* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  convertprotocol_.InternalSwap(&other->convertprotocol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigConvertProtocol::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_convert_2eproto_getter, &descriptor_table_convert_2eproto_once,
      file_level_metadata_convert_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ConvertProtocolConfigResponse* Arena::CreateMaybeMessage< ::ConvertProtocolConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConvertProtocolConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigConvertProtocol_ConvertProtocol* Arena::CreateMaybeMessage< ::ConfigConvertProtocol_ConvertProtocol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConfigConvertProtocol_ConvertProtocol >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigConvertProtocol* Arena::CreateMaybeMessage< ::ConfigConvertProtocol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConfigConvertProtocol >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
