// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gps.proto

#include "gps.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr GpsConfigResponse::GpsConfigResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errordesc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false)
  , errorcode_(0){}
struct GpsConfigResponseDefaultTypeInternal {
  constexpr GpsConfigResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpsConfigResponseDefaultTypeInternal() {}
  union {
    GpsConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpsConfigResponseDefaultTypeInternal _GpsConfigResponse_default_instance_;
constexpr ConfigGpsProtocol_GpsProtocol::ConfigGpsProtocol_GpsProtocol(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gpsname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gpsid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , interval_(0)
  , gpsdatatype_(0)

  , gpsreciver_(false){}
struct ConfigGpsProtocol_GpsProtocolDefaultTypeInternal {
  constexpr ConfigGpsProtocol_GpsProtocolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigGpsProtocol_GpsProtocolDefaultTypeInternal() {}
  union {
    ConfigGpsProtocol_GpsProtocol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigGpsProtocol_GpsProtocolDefaultTypeInternal _ConfigGpsProtocol_GpsProtocol_default_instance_;
constexpr ConfigGpsProtocol::ConfigGpsProtocol(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gpsprotocol_(){}
struct ConfigGpsProtocolDefaultTypeInternal {
  constexpr ConfigGpsProtocolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigGpsProtocolDefaultTypeInternal() {}
  union {
    ConfigGpsProtocol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigGpsProtocolDefaultTypeInternal _ConfigGpsProtocol_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gps_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gps_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gps_2eproto = nullptr;

const uint32_t TableStruct_gps_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GpsConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GpsConfigResponse, success_),
  PROTOBUF_FIELD_OFFSET(::GpsConfigResponse, errorcode_),
  PROTOBUF_FIELD_OFFSET(::GpsConfigResponse, errordesc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigGpsProtocol_GpsProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConfigGpsProtocol_GpsProtocol, gpsname_),
  PROTOBUF_FIELD_OFFSET(::ConfigGpsProtocol_GpsProtocol, gpsid_),
  PROTOBUF_FIELD_OFFSET(::ConfigGpsProtocol_GpsProtocol, interval_),
  PROTOBUF_FIELD_OFFSET(::ConfigGpsProtocol_GpsProtocol, gpsdatatype_),
  PROTOBUF_FIELD_OFFSET(::ConfigGpsProtocol_GpsProtocol, gpsreciver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigGpsProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConfigGpsProtocol, gpsprotocol_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::GpsConfigResponse)},
  { 9, -1, -1, sizeof(::ConfigGpsProtocol_GpsProtocol)},
  { 20, -1, -1, sizeof(::ConfigGpsProtocol)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GpsConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigGpsProtocol_GpsProtocol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigGpsProtocol_default_instance_),
};

const char descriptor_table_protodef_gps_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tgps.proto\"J\n\021GpsConfigResponse\022\017\n\007Succ"
  "ess\030\001 \001(\010\022\021\n\terrorCode\030\002 \001(\005\022\021\n\terrorDes"
  "c\030\003 \001(\t\"\300\001\n\021ConfigGpsProtocol\0223\n\013gpsProt"
  "ocol\030\001 \003(\0132\036.ConfigGpsProtocol.GpsProtoc"
  "ol\032v\n\013GpsProtocol\022\017\n\007gpsName\030\001 \001(\t\022\r\n\005gp"
  "sId\030\002 \001(\t\022\020\n\010interval\030\003 \001(\005\022!\n\013gpsDataTy"
  "pe\030\004 \001(\0162\014.GpsDataType\022\022\n\ngpsReciver\030\005 \001"
  "(\010*_\n\013GpsDataType\022\r\n\tTimeStamp\020\000\022\014\n\010Lati"
  "tude\020\001\022\r\n\tLongitude\020\002\022\014\n\010Altitude\020\003\022\010\n\004T"
  "ype\020\004\022\014\n\010Location\020\0052`\n\027SystemGpsProtocol"
  "Config\022E\n\033SendSystemGpsProtocolConfig\022\022."
  "ConfigGpsProtocol\032\022.GpsConfigResponseb\006p"
  "roto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gps_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gps_2eproto = {
  false, false, 485, descriptor_table_protodef_gps_2eproto, "gps.proto", 
  &descriptor_table_gps_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_gps_2eproto::offsets,
  file_level_metadata_gps_2eproto, file_level_enum_descriptors_gps_2eproto, file_level_service_descriptors_gps_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_gps_2eproto_getter() {
  return &descriptor_table_gps_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gps_2eproto(&descriptor_table_gps_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpsDataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gps_2eproto);
  return file_level_enum_descriptors_gps_2eproto[0];
}
bool GpsDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GpsConfigResponse::_Internal {
 public:
};

GpsConfigResponse::GpsConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GpsConfigResponse)
}
GpsConfigResponse::GpsConfigResponse(const GpsConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errordesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errordesc().empty()) {
    errordesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errordesc(), 
      GetArenaForAllocation());
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:GpsConfigResponse)
}

inline void GpsConfigResponse::SharedCtor() {
errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errordesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
}

GpsConfigResponse::~GpsConfigResponse() {
  // @@protoc_insertion_point(destructor:GpsConfigResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GpsConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errordesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GpsConfigResponse::ArenaDtor(void* object) {
  GpsConfigResponse* _this = reinterpret_cast< GpsConfigResponse* >(object);
  (void)_this;
}
void GpsConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpsConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpsConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GpsConfigResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errordesc_.ClearToEmpty();
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpsConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errorDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errordesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GpsConfigResponse.errorDesc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GpsConfigResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GpsConfigResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_errorcode(), target);
  }

  // string errorDesc = 3;
  if (!this->_internal_errordesc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errordesc().data(), static_cast<int>(this->_internal_errordesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GpsConfigResponse.errorDesc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errordesc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GpsConfigResponse)
  return target;
}

size_t GpsConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GpsConfigResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorDesc = 3;
  if (!this->_internal_errordesc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errordesc());
  }

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_errorcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpsConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GpsConfigResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpsConfigResponse::GetClassData() const { return &_class_data_; }

void GpsConfigResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GpsConfigResponse *>(to)->MergeFrom(
      static_cast<const GpsConfigResponse &>(from));
}


void GpsConfigResponse::MergeFrom(const GpsConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GpsConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errordesc().empty()) {
    _internal_set_errordesc(from._internal_errordesc());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpsConfigResponse::CopyFrom(const GpsConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GpsConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsConfigResponse::IsInitialized() const {
  return true;
}

void GpsConfigResponse::InternalSwap(GpsConfigResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errordesc_, lhs_arena,
      &other->errordesc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpsConfigResponse, errorcode_)
      + sizeof(GpsConfigResponse::errorcode_)
      - PROTOBUF_FIELD_OFFSET(GpsConfigResponse, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpsConfigResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gps_2eproto_getter, &descriptor_table_gps_2eproto_once,
      file_level_metadata_gps_2eproto[0]);
}

// ===================================================================

class ConfigGpsProtocol_GpsProtocol::_Internal {
 public:
};

ConfigGpsProtocol_GpsProtocol::ConfigGpsProtocol_GpsProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ConfigGpsProtocol.GpsProtocol)
}
ConfigGpsProtocol_GpsProtocol::ConfigGpsProtocol_GpsProtocol(const ConfigGpsProtocol_GpsProtocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gpsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gpsname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gpsname().empty()) {
    gpsname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gpsname(), 
      GetArenaForAllocation());
  }
  gpsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gpsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gpsid().empty()) {
    gpsid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gpsid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&interval_, &from.interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&gpsreciver_) -
    reinterpret_cast<char*>(&interval_)) + sizeof(gpsreciver_));
  // @@protoc_insertion_point(copy_constructor:ConfigGpsProtocol.GpsProtocol)
}

inline void ConfigGpsProtocol_GpsProtocol::SharedCtor() {
gpsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gpsname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gpsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gpsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gpsreciver_) -
    reinterpret_cast<char*>(&interval_)) + sizeof(gpsreciver_));
}

ConfigGpsProtocol_GpsProtocol::~ConfigGpsProtocol_GpsProtocol() {
  // @@protoc_insertion_point(destructor:ConfigGpsProtocol.GpsProtocol)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigGpsProtocol_GpsProtocol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gpsname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gpsid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigGpsProtocol_GpsProtocol::ArenaDtor(void* object) {
  ConfigGpsProtocol_GpsProtocol* _this = reinterpret_cast< ConfigGpsProtocol_GpsProtocol* >(object);
  (void)_this;
}
void ConfigGpsProtocol_GpsProtocol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigGpsProtocol_GpsProtocol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigGpsProtocol_GpsProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigGpsProtocol.GpsProtocol)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gpsname_.ClearToEmpty();
  gpsid_.ClearToEmpty();
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpsreciver_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(gpsreciver_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigGpsProtocol_GpsProtocol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string gpsName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_gpsname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigGpsProtocol.GpsProtocol.gpsName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gpsId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gpsid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigGpsProtocol.GpsProtocol.gpsId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GpsDataType gpsDataType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gpsdatatype(static_cast<::GpsDataType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool gpsReciver = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          gpsreciver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigGpsProtocol_GpsProtocol::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigGpsProtocol.GpsProtocol)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string gpsName = 1;
  if (!this->_internal_gpsname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gpsname().data(), static_cast<int>(this->_internal_gpsname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigGpsProtocol.GpsProtocol.gpsName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gpsname(), target);
  }

  // string gpsId = 2;
  if (!this->_internal_gpsid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gpsid().data(), static_cast<int>(this->_internal_gpsid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigGpsProtocol.GpsProtocol.gpsId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gpsid(), target);
  }

  // int32 interval = 3;
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_interval(), target);
  }

  // .GpsDataType gpsDataType = 4;
  if (this->_internal_gpsdatatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_gpsdatatype(), target);
  }

  // bool gpsReciver = 5;
  if (this->_internal_gpsreciver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_gpsreciver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigGpsProtocol.GpsProtocol)
  return target;
}

size_t ConfigGpsProtocol_GpsProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigGpsProtocol.GpsProtocol)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gpsName = 1;
  if (!this->_internal_gpsname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gpsname());
  }

  // string gpsId = 2;
  if (!this->_internal_gpsid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gpsid());
  }

  // int32 interval = 3;
  if (this->_internal_interval() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_interval());
  }

  // .GpsDataType gpsDataType = 4;
  if (this->_internal_gpsdatatype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gpsdatatype());
  }

  // bool gpsReciver = 5;
  if (this->_internal_gpsreciver() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigGpsProtocol_GpsProtocol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigGpsProtocol_GpsProtocol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigGpsProtocol_GpsProtocol::GetClassData() const { return &_class_data_; }

void ConfigGpsProtocol_GpsProtocol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigGpsProtocol_GpsProtocol *>(to)->MergeFrom(
      static_cast<const ConfigGpsProtocol_GpsProtocol &>(from));
}


void ConfigGpsProtocol_GpsProtocol::MergeFrom(const ConfigGpsProtocol_GpsProtocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigGpsProtocol.GpsProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gpsname().empty()) {
    _internal_set_gpsname(from._internal_gpsname());
  }
  if (!from._internal_gpsid().empty()) {
    _internal_set_gpsid(from._internal_gpsid());
  }
  if (from._internal_interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
  if (from._internal_gpsdatatype() != 0) {
    _internal_set_gpsdatatype(from._internal_gpsdatatype());
  }
  if (from._internal_gpsreciver() != 0) {
    _internal_set_gpsreciver(from._internal_gpsreciver());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigGpsProtocol_GpsProtocol::CopyFrom(const ConfigGpsProtocol_GpsProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigGpsProtocol.GpsProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigGpsProtocol_GpsProtocol::IsInitialized() const {
  return true;
}

void ConfigGpsProtocol_GpsProtocol::InternalSwap(ConfigGpsProtocol_GpsProtocol* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gpsname_, lhs_arena,
      &other->gpsname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gpsid_, lhs_arena,
      &other->gpsid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigGpsProtocol_GpsProtocol, gpsreciver_)
      + sizeof(ConfigGpsProtocol_GpsProtocol::gpsreciver_)
      - PROTOBUF_FIELD_OFFSET(ConfigGpsProtocol_GpsProtocol, interval_)>(
          reinterpret_cast<char*>(&interval_),
          reinterpret_cast<char*>(&other->interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigGpsProtocol_GpsProtocol::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gps_2eproto_getter, &descriptor_table_gps_2eproto_once,
      file_level_metadata_gps_2eproto[1]);
}

// ===================================================================

class ConfigGpsProtocol::_Internal {
 public:
};

ConfigGpsProtocol::ConfigGpsProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gpsprotocol_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ConfigGpsProtocol)
}
ConfigGpsProtocol::ConfigGpsProtocol(const ConfigGpsProtocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gpsprotocol_(from.gpsprotocol_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConfigGpsProtocol)
}

inline void ConfigGpsProtocol::SharedCtor() {
}

ConfigGpsProtocol::~ConfigGpsProtocol() {
  // @@protoc_insertion_point(destructor:ConfigGpsProtocol)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigGpsProtocol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfigGpsProtocol::ArenaDtor(void* object) {
  ConfigGpsProtocol* _this = reinterpret_cast< ConfigGpsProtocol* >(object);
  (void)_this;
}
void ConfigGpsProtocol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigGpsProtocol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigGpsProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigGpsProtocol)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gpsprotocol_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigGpsProtocol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ConfigGpsProtocol.GpsProtocol gpsProtocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gpsprotocol(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigGpsProtocol::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigGpsProtocol)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ConfigGpsProtocol.GpsProtocol gpsProtocol = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gpsprotocol_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gpsprotocol(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigGpsProtocol)
  return target;
}

size_t ConfigGpsProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigGpsProtocol)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ConfigGpsProtocol.GpsProtocol gpsProtocol = 1;
  total_size += 1UL * this->_internal_gpsprotocol_size();
  for (const auto& msg : this->gpsprotocol_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigGpsProtocol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigGpsProtocol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigGpsProtocol::GetClassData() const { return &_class_data_; }

void ConfigGpsProtocol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigGpsProtocol *>(to)->MergeFrom(
      static_cast<const ConfigGpsProtocol &>(from));
}


void ConfigGpsProtocol::MergeFrom(const ConfigGpsProtocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigGpsProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  gpsprotocol_.MergeFrom(from.gpsprotocol_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigGpsProtocol::CopyFrom(const ConfigGpsProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigGpsProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigGpsProtocol::IsInitialized() const {
  return true;
}

void ConfigGpsProtocol::InternalSwap(ConfigGpsProtocol* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  gpsprotocol_.InternalSwap(&other->gpsprotocol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigGpsProtocol::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gps_2eproto_getter, &descriptor_table_gps_2eproto_once,
      file_level_metadata_gps_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GpsConfigResponse* Arena::CreateMaybeMessage< ::GpsConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GpsConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigGpsProtocol_GpsProtocol* Arena::CreateMaybeMessage< ::ConfigGpsProtocol_GpsProtocol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConfigGpsProtocol_GpsProtocol >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigGpsProtocol* Arena::CreateMaybeMessage< ::ConfigGpsProtocol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConfigGpsProtocol >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
