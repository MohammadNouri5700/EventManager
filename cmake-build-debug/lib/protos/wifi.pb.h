// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wifi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wifi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wifi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wifi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_wifi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wifi_2eproto;
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class CommandResponce;
struct CommandResponceDefaultTypeInternal;
extern CommandResponceDefaultTypeInternal _CommandResponce_default_instance_;
class ConfigWifi;
struct ConfigWifiDefaultTypeInternal;
extern ConfigWifiDefaultTypeInternal _ConfigWifi_default_instance_;
class WifiList;
struct WifiListDefaultTypeInternal;
extern WifiListDefaultTypeInternal _WifiList_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Command* Arena::CreateMaybeMessage<::Command>(Arena*);
template<> ::CommandResponce* Arena::CreateMaybeMessage<::CommandResponce>(Arena*);
template<> ::ConfigWifi* Arena::CreateMaybeMessage<::ConfigWifi>(Arena*);
template<> ::WifiList* Arena::CreateMaybeMessage<::WifiList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CommandType : int {
  WIFI_SCAN = 0,
  WIFI_CONNECT = 1,
  WIFI_DISCONNECT = 2,
  WIFI_STATE = 3,
  CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CommandType_IsValid(int value);
constexpr CommandType CommandType_MIN = WIFI_SCAN;
constexpr CommandType CommandType_MAX = WIFI_STATE;
constexpr int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandType_descriptor();
template<typename T>
inline const std::string& CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandType_descriptor(), enum_t_value);
}
inline bool CommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
// ===================================================================

class WifiList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WifiList) */ {
 public:
  inline WifiList() : WifiList(nullptr) {}
  ~WifiList() override;
  explicit constexpr WifiList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WifiList(const WifiList& from);
  WifiList(WifiList&& from) noexcept
    : WifiList() {
    *this = ::std::move(from);
  }

  inline WifiList& operator=(const WifiList& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiList& operator=(WifiList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WifiList& default_instance() {
    return *internal_default_instance();
  }
  static inline const WifiList* internal_default_instance() {
    return reinterpret_cast<const WifiList*>(
               &_WifiList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WifiList& a, WifiList& b) {
    a.Swap(&b);
  }
  inline void Swap(WifiList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WifiList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WifiList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WifiList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WifiList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WifiList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WifiList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WifiList";
  }
  protected:
  explicit WifiList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkNameFieldNumber = 1,
    kNetworksignalFieldNumber = 2,
  };
  // string networkName = 1;
  void clear_networkname();
  const std::string& networkname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_networkname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_networkname();
  PROTOBUF_NODISCARD std::string* release_networkname();
  void set_allocated_networkname(std::string* networkname);
  private:
  const std::string& _internal_networkname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_networkname(const std::string& value);
  std::string* _internal_mutable_networkname();
  public:

  // string networksignal = 2;
  void clear_networksignal();
  const std::string& networksignal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_networksignal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_networksignal();
  PROTOBUF_NODISCARD std::string* release_networksignal();
  void set_allocated_networksignal(std::string* networksignal);
  private:
  const std::string& _internal_networksignal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_networksignal(const std::string& value);
  std::string* _internal_mutable_networksignal();
  public:

  // @@protoc_insertion_point(class_scope:WifiList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr networkname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr networksignal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifi_2eproto;
};
// -------------------------------------------------------------------

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit constexpr Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Command& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kCommandTypeFieldNumber = 1,
    kCommandIDFieldNumber = 2,
  };
  // string data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .CommandType commandType = 1;
  void clear_commandtype();
  ::CommandType commandtype() const;
  void set_commandtype(::CommandType value);
  private:
  ::CommandType _internal_commandtype() const;
  void _internal_set_commandtype(::CommandType value);
  public:

  // int32 commandID = 2;
  void clear_commandid();
  int32_t commandid() const;
  void set_commandid(int32_t value);
  private:
  int32_t _internal_commandid() const;
  void _internal_set_commandid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int commandtype_;
  int32_t commandid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifi_2eproto;
};
// -------------------------------------------------------------------

class CommandResponce final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommandResponce) */ {
 public:
  inline CommandResponce() : CommandResponce(nullptr) {}
  ~CommandResponce() override;
  explicit constexpr CommandResponce(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandResponce(const CommandResponce& from);
  CommandResponce(CommandResponce&& from) noexcept
    : CommandResponce() {
    *this = ::std::move(from);
  }

  inline CommandResponce& operator=(const CommandResponce& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResponce& operator=(CommandResponce&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandResponce& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandResponce* internal_default_instance() {
    return reinterpret_cast<const CommandResponce*>(
               &_CommandResponce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandResponce& a, CommandResponce& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandResponce* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandResponce* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandResponce* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandResponce>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandResponce& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandResponce& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResponce* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommandResponce";
  }
  protected:
  explicit CommandResponce(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWifiListFieldNumber = 4,
    kResponceTypeFieldNumber = 1,
    kResponceDataFieldNumber = 3,
    kNetworkNameFieldNumber = 5,
    kIsOKFieldNumber = 2,
  };
  // repeated .WifiList wifiList = 4;
  int wifilist_size() const;
  private:
  int _internal_wifilist_size() const;
  public:
  void clear_wifilist();
  ::WifiList* mutable_wifilist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WifiList >*
      mutable_wifilist();
  private:
  const ::WifiList& _internal_wifilist(int index) const;
  ::WifiList* _internal_add_wifilist();
  public:
  const ::WifiList& wifilist(int index) const;
  ::WifiList* add_wifilist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WifiList >&
      wifilist() const;

  // string responceType = 1;
  void clear_responcetype();
  const std::string& responcetype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_responcetype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_responcetype();
  PROTOBUF_NODISCARD std::string* release_responcetype();
  void set_allocated_responcetype(std::string* responcetype);
  private:
  const std::string& _internal_responcetype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_responcetype(const std::string& value);
  std::string* _internal_mutable_responcetype();
  public:

  // string responceData = 3;
  void clear_responcedata();
  const std::string& responcedata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_responcedata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_responcedata();
  PROTOBUF_NODISCARD std::string* release_responcedata();
  void set_allocated_responcedata(std::string* responcedata);
  private:
  const std::string& _internal_responcedata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_responcedata(const std::string& value);
  std::string* _internal_mutable_responcedata();
  public:

  // string networkName = 5;
  void clear_networkname();
  const std::string& networkname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_networkname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_networkname();
  PROTOBUF_NODISCARD std::string* release_networkname();
  void set_allocated_networkname(std::string* networkname);
  private:
  const std::string& _internal_networkname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_networkname(const std::string& value);
  std::string* _internal_mutable_networkname();
  public:

  // bool isOK = 2;
  void clear_isok();
  bool isok() const;
  void set_isok(bool value);
  private:
  bool _internal_isok() const;
  void _internal_set_isok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CommandResponce)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WifiList > wifilist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responcetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responcedata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr networkname_;
  bool isok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifi_2eproto;
};
// -------------------------------------------------------------------

class ConfigWifi final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigWifi) */ {
 public:
  inline ConfigWifi() : ConfigWifi(nullptr) {}
  ~ConfigWifi() override;
  explicit constexpr ConfigWifi(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigWifi(const ConfigWifi& from);
  ConfigWifi(ConfigWifi&& from) noexcept
    : ConfigWifi() {
    *this = ::std::move(from);
  }

  inline ConfigWifi& operator=(const ConfigWifi& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigWifi& operator=(ConfigWifi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigWifi& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigWifi* internal_default_instance() {
    return reinterpret_cast<const ConfigWifi*>(
               &_ConfigWifi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConfigWifi& a, ConfigWifi& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigWifi* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigWifi* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigWifi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigWifi>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigWifi& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfigWifi& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigWifi* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigWifi";
  }
  protected:
  explicit ConfigWifi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNemtworkNameFieldNumber = 1,
    kNetworkPasswordFieldNumber = 2,
    kIpFieldNumber = 3,
    kMaskFieldNumber = 4,
    kGatewayFieldNumber = 5,
    kDnsFieldNumber = 6,
    kCommandResponceFieldNumber = 8,
    kDhcpFieldNumber = 7,
  };
  // string nemtworkName = 1;
  void clear_nemtworkname();
  const std::string& nemtworkname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nemtworkname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nemtworkname();
  PROTOBUF_NODISCARD std::string* release_nemtworkname();
  void set_allocated_nemtworkname(std::string* nemtworkname);
  private:
  const std::string& _internal_nemtworkname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nemtworkname(const std::string& value);
  std::string* _internal_mutable_nemtworkname();
  public:

  // string networkPassword = 2;
  void clear_networkpassword();
  const std::string& networkpassword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_networkpassword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_networkpassword();
  PROTOBUF_NODISCARD std::string* release_networkpassword();
  void set_allocated_networkpassword(std::string* networkpassword);
  private:
  const std::string& _internal_networkpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_networkpassword(const std::string& value);
  std::string* _internal_mutable_networkpassword();
  public:

  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string mask = 4;
  void clear_mask();
  const std::string& mask() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mask(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mask();
  PROTOBUF_NODISCARD std::string* release_mask();
  void set_allocated_mask(std::string* mask);
  private:
  const std::string& _internal_mask() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mask(const std::string& value);
  std::string* _internal_mutable_mask();
  public:

  // string gateway = 5;
  void clear_gateway();
  const std::string& gateway() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gateway(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gateway();
  PROTOBUF_NODISCARD std::string* release_gateway();
  void set_allocated_gateway(std::string* gateway);
  private:
  const std::string& _internal_gateway() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gateway(const std::string& value);
  std::string* _internal_mutable_gateway();
  public:

  // string dns = 6;
  void clear_dns();
  const std::string& dns() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dns(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dns();
  PROTOBUF_NODISCARD std::string* release_dns();
  void set_allocated_dns(std::string* dns);
  private:
  const std::string& _internal_dns() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dns(const std::string& value);
  std::string* _internal_mutable_dns();
  public:

  // .CommandResponce commandResponce = 8;
  bool has_commandresponce() const;
  private:
  bool _internal_has_commandresponce() const;
  public:
  void clear_commandresponce();
  const ::CommandResponce& commandresponce() const;
  PROTOBUF_NODISCARD ::CommandResponce* release_commandresponce();
  ::CommandResponce* mutable_commandresponce();
  void set_allocated_commandresponce(::CommandResponce* commandresponce);
  private:
  const ::CommandResponce& _internal_commandresponce() const;
  ::CommandResponce* _internal_mutable_commandresponce();
  public:
  void unsafe_arena_set_allocated_commandresponce(
      ::CommandResponce* commandresponce);
  ::CommandResponce* unsafe_arena_release_commandresponce();

  // bool dhcp = 7;
  void clear_dhcp();
  bool dhcp() const;
  void set_dhcp(bool value);
  private:
  bool _internal_dhcp() const;
  void _internal_set_dhcp(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ConfigWifi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nemtworkname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr networkpassword_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mask_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gateway_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dns_;
  ::CommandResponce* commandresponce_;
  bool dhcp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WifiList

// string networkName = 1;
inline void WifiList::clear_networkname() {
  networkname_.ClearToEmpty();
}
inline const std::string& WifiList::networkname() const {
  // @@protoc_insertion_point(field_get:WifiList.networkName)
  return _internal_networkname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WifiList::set_networkname(ArgT0&& arg0, ArgT... args) {
 
 networkname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WifiList.networkName)
}
inline std::string* WifiList::mutable_networkname() {
  std::string* _s = _internal_mutable_networkname();
  // @@protoc_insertion_point(field_mutable:WifiList.networkName)
  return _s;
}
inline const std::string& WifiList::_internal_networkname() const {
  return networkname_.Get();
}
inline void WifiList::_internal_set_networkname(const std::string& value) {
  
  networkname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WifiList::_internal_mutable_networkname() {
  
  return networkname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WifiList::release_networkname() {
  // @@protoc_insertion_point(field_release:WifiList.networkName)
  return networkname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WifiList::set_allocated_networkname(std::string* networkname) {
  if (networkname != nullptr) {
    
  } else {
    
  }
  networkname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), networkname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (networkname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    networkname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WifiList.networkName)
}

// string networksignal = 2;
inline void WifiList::clear_networksignal() {
  networksignal_.ClearToEmpty();
}
inline const std::string& WifiList::networksignal() const {
  // @@protoc_insertion_point(field_get:WifiList.networksignal)
  return _internal_networksignal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WifiList::set_networksignal(ArgT0&& arg0, ArgT... args) {
 
 networksignal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WifiList.networksignal)
}
inline std::string* WifiList::mutable_networksignal() {
  std::string* _s = _internal_mutable_networksignal();
  // @@protoc_insertion_point(field_mutable:WifiList.networksignal)
  return _s;
}
inline const std::string& WifiList::_internal_networksignal() const {
  return networksignal_.Get();
}
inline void WifiList::_internal_set_networksignal(const std::string& value) {
  
  networksignal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WifiList::_internal_mutable_networksignal() {
  
  return networksignal_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WifiList::release_networksignal() {
  // @@protoc_insertion_point(field_release:WifiList.networksignal)
  return networksignal_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WifiList::set_allocated_networksignal(std::string* networksignal) {
  if (networksignal != nullptr) {
    
  } else {
    
  }
  networksignal_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), networksignal,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (networksignal_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    networksignal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WifiList.networksignal)
}

// -------------------------------------------------------------------

// Command

// .CommandType commandType = 1;
inline void Command::clear_commandtype() {
  commandtype_ = 0;
}
inline ::CommandType Command::_internal_commandtype() const {
  return static_cast< ::CommandType >(commandtype_);
}
inline ::CommandType Command::commandtype() const {
  // @@protoc_insertion_point(field_get:Command.commandType)
  return _internal_commandtype();
}
inline void Command::_internal_set_commandtype(::CommandType value) {
  
  commandtype_ = value;
}
inline void Command::set_commandtype(::CommandType value) {
  _internal_set_commandtype(value);
  // @@protoc_insertion_point(field_set:Command.commandType)
}

// int32 commandID = 2;
inline void Command::clear_commandid() {
  commandid_ = 0;
}
inline int32_t Command::_internal_commandid() const {
  return commandid_;
}
inline int32_t Command::commandid() const {
  // @@protoc_insertion_point(field_get:Command.commandID)
  return _internal_commandid();
}
inline void Command::_internal_set_commandid(int32_t value) {
  
  commandid_ = value;
}
inline void Command::set_commandid(int32_t value) {
  _internal_set_commandid(value);
  // @@protoc_insertion_point(field_set:Command.commandID)
}

// string data = 3;
inline void Command::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Command::data() const {
  // @@protoc_insertion_point(field_get:Command.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.data)
}
inline std::string* Command::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Command.data)
  return _s;
}
inline const std::string& Command::_internal_data() const {
  return data_.Get();
}
inline void Command::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Command::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Command::release_data() {
  // @@protoc_insertion_point(field_release:Command.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Command::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.data)
}

// -------------------------------------------------------------------

// CommandResponce

// string responceType = 1;
inline void CommandResponce::clear_responcetype() {
  responcetype_.ClearToEmpty();
}
inline const std::string& CommandResponce::responcetype() const {
  // @@protoc_insertion_point(field_get:CommandResponce.responceType)
  return _internal_responcetype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandResponce::set_responcetype(ArgT0&& arg0, ArgT... args) {
 
 responcetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommandResponce.responceType)
}
inline std::string* CommandResponce::mutable_responcetype() {
  std::string* _s = _internal_mutable_responcetype();
  // @@protoc_insertion_point(field_mutable:CommandResponce.responceType)
  return _s;
}
inline const std::string& CommandResponce::_internal_responcetype() const {
  return responcetype_.Get();
}
inline void CommandResponce::_internal_set_responcetype(const std::string& value) {
  
  responcetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandResponce::_internal_mutable_responcetype() {
  
  return responcetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandResponce::release_responcetype() {
  // @@protoc_insertion_point(field_release:CommandResponce.responceType)
  return responcetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandResponce::set_allocated_responcetype(std::string* responcetype) {
  if (responcetype != nullptr) {
    
  } else {
    
  }
  responcetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), responcetype,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (responcetype_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    responcetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommandResponce.responceType)
}

// bool isOK = 2;
inline void CommandResponce::clear_isok() {
  isok_ = false;
}
inline bool CommandResponce::_internal_isok() const {
  return isok_;
}
inline bool CommandResponce::isok() const {
  // @@protoc_insertion_point(field_get:CommandResponce.isOK)
  return _internal_isok();
}
inline void CommandResponce::_internal_set_isok(bool value) {
  
  isok_ = value;
}
inline void CommandResponce::set_isok(bool value) {
  _internal_set_isok(value);
  // @@protoc_insertion_point(field_set:CommandResponce.isOK)
}

// string responceData = 3;
inline void CommandResponce::clear_responcedata() {
  responcedata_.ClearToEmpty();
}
inline const std::string& CommandResponce::responcedata() const {
  // @@protoc_insertion_point(field_get:CommandResponce.responceData)
  return _internal_responcedata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandResponce::set_responcedata(ArgT0&& arg0, ArgT... args) {
 
 responcedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommandResponce.responceData)
}
inline std::string* CommandResponce::mutable_responcedata() {
  std::string* _s = _internal_mutable_responcedata();
  // @@protoc_insertion_point(field_mutable:CommandResponce.responceData)
  return _s;
}
inline const std::string& CommandResponce::_internal_responcedata() const {
  return responcedata_.Get();
}
inline void CommandResponce::_internal_set_responcedata(const std::string& value) {
  
  responcedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandResponce::_internal_mutable_responcedata() {
  
  return responcedata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandResponce::release_responcedata() {
  // @@protoc_insertion_point(field_release:CommandResponce.responceData)
  return responcedata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandResponce::set_allocated_responcedata(std::string* responcedata) {
  if (responcedata != nullptr) {
    
  } else {
    
  }
  responcedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), responcedata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (responcedata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    responcedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommandResponce.responceData)
}

// repeated .WifiList wifiList = 4;
inline int CommandResponce::_internal_wifilist_size() const {
  return wifilist_.size();
}
inline int CommandResponce::wifilist_size() const {
  return _internal_wifilist_size();
}
inline void CommandResponce::clear_wifilist() {
  wifilist_.Clear();
}
inline ::WifiList* CommandResponce::mutable_wifilist(int index) {
  // @@protoc_insertion_point(field_mutable:CommandResponce.wifiList)
  return wifilist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WifiList >*
CommandResponce::mutable_wifilist() {
  // @@protoc_insertion_point(field_mutable_list:CommandResponce.wifiList)
  return &wifilist_;
}
inline const ::WifiList& CommandResponce::_internal_wifilist(int index) const {
  return wifilist_.Get(index);
}
inline const ::WifiList& CommandResponce::wifilist(int index) const {
  // @@protoc_insertion_point(field_get:CommandResponce.wifiList)
  return _internal_wifilist(index);
}
inline ::WifiList* CommandResponce::_internal_add_wifilist() {
  return wifilist_.Add();
}
inline ::WifiList* CommandResponce::add_wifilist() {
  ::WifiList* _add = _internal_add_wifilist();
  // @@protoc_insertion_point(field_add:CommandResponce.wifiList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WifiList >&
CommandResponce::wifilist() const {
  // @@protoc_insertion_point(field_list:CommandResponce.wifiList)
  return wifilist_;
}

// string networkName = 5;
inline void CommandResponce::clear_networkname() {
  networkname_.ClearToEmpty();
}
inline const std::string& CommandResponce::networkname() const {
  // @@protoc_insertion_point(field_get:CommandResponce.networkName)
  return _internal_networkname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandResponce::set_networkname(ArgT0&& arg0, ArgT... args) {
 
 networkname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommandResponce.networkName)
}
inline std::string* CommandResponce::mutable_networkname() {
  std::string* _s = _internal_mutable_networkname();
  // @@protoc_insertion_point(field_mutable:CommandResponce.networkName)
  return _s;
}
inline const std::string& CommandResponce::_internal_networkname() const {
  return networkname_.Get();
}
inline void CommandResponce::_internal_set_networkname(const std::string& value) {
  
  networkname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandResponce::_internal_mutable_networkname() {
  
  return networkname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandResponce::release_networkname() {
  // @@protoc_insertion_point(field_release:CommandResponce.networkName)
  return networkname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandResponce::set_allocated_networkname(std::string* networkname) {
  if (networkname != nullptr) {
    
  } else {
    
  }
  networkname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), networkname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (networkname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    networkname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommandResponce.networkName)
}

// -------------------------------------------------------------------

// ConfigWifi

// string nemtworkName = 1;
inline void ConfigWifi::clear_nemtworkname() {
  nemtworkname_.ClearToEmpty();
}
inline const std::string& ConfigWifi::nemtworkname() const {
  // @@protoc_insertion_point(field_get:ConfigWifi.nemtworkName)
  return _internal_nemtworkname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigWifi::set_nemtworkname(ArgT0&& arg0, ArgT... args) {
 
 nemtworkname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConfigWifi.nemtworkName)
}
inline std::string* ConfigWifi::mutable_nemtworkname() {
  std::string* _s = _internal_mutable_nemtworkname();
  // @@protoc_insertion_point(field_mutable:ConfigWifi.nemtworkName)
  return _s;
}
inline const std::string& ConfigWifi::_internal_nemtworkname() const {
  return nemtworkname_.Get();
}
inline void ConfigWifi::_internal_set_nemtworkname(const std::string& value) {
  
  nemtworkname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigWifi::_internal_mutable_nemtworkname() {
  
  return nemtworkname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigWifi::release_nemtworkname() {
  // @@protoc_insertion_point(field_release:ConfigWifi.nemtworkName)
  return nemtworkname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigWifi::set_allocated_nemtworkname(std::string* nemtworkname) {
  if (nemtworkname != nullptr) {
    
  } else {
    
  }
  nemtworkname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nemtworkname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nemtworkname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nemtworkname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConfigWifi.nemtworkName)
}

// string networkPassword = 2;
inline void ConfigWifi::clear_networkpassword() {
  networkpassword_.ClearToEmpty();
}
inline const std::string& ConfigWifi::networkpassword() const {
  // @@protoc_insertion_point(field_get:ConfigWifi.networkPassword)
  return _internal_networkpassword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigWifi::set_networkpassword(ArgT0&& arg0, ArgT... args) {
 
 networkpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConfigWifi.networkPassword)
}
inline std::string* ConfigWifi::mutable_networkpassword() {
  std::string* _s = _internal_mutable_networkpassword();
  // @@protoc_insertion_point(field_mutable:ConfigWifi.networkPassword)
  return _s;
}
inline const std::string& ConfigWifi::_internal_networkpassword() const {
  return networkpassword_.Get();
}
inline void ConfigWifi::_internal_set_networkpassword(const std::string& value) {
  
  networkpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigWifi::_internal_mutable_networkpassword() {
  
  return networkpassword_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigWifi::release_networkpassword() {
  // @@protoc_insertion_point(field_release:ConfigWifi.networkPassword)
  return networkpassword_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigWifi::set_allocated_networkpassword(std::string* networkpassword) {
  if (networkpassword != nullptr) {
    
  } else {
    
  }
  networkpassword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), networkpassword,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (networkpassword_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    networkpassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConfigWifi.networkPassword)
}

// string ip = 3;
inline void ConfigWifi::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& ConfigWifi::ip() const {
  // @@protoc_insertion_point(field_get:ConfigWifi.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigWifi::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConfigWifi.ip)
}
inline std::string* ConfigWifi::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:ConfigWifi.ip)
  return _s;
}
inline const std::string& ConfigWifi::_internal_ip() const {
  return ip_.Get();
}
inline void ConfigWifi::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigWifi::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigWifi::release_ip() {
  // @@protoc_insertion_point(field_release:ConfigWifi.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigWifi::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConfigWifi.ip)
}

// string mask = 4;
inline void ConfigWifi::clear_mask() {
  mask_.ClearToEmpty();
}
inline const std::string& ConfigWifi::mask() const {
  // @@protoc_insertion_point(field_get:ConfigWifi.mask)
  return _internal_mask();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigWifi::set_mask(ArgT0&& arg0, ArgT... args) {
 
 mask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConfigWifi.mask)
}
inline std::string* ConfigWifi::mutable_mask() {
  std::string* _s = _internal_mutable_mask();
  // @@protoc_insertion_point(field_mutable:ConfigWifi.mask)
  return _s;
}
inline const std::string& ConfigWifi::_internal_mask() const {
  return mask_.Get();
}
inline void ConfigWifi::_internal_set_mask(const std::string& value) {
  
  mask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigWifi::_internal_mutable_mask() {
  
  return mask_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigWifi::release_mask() {
  // @@protoc_insertion_point(field_release:ConfigWifi.mask)
  return mask_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigWifi::set_allocated_mask(std::string* mask) {
  if (mask != nullptr) {
    
  } else {
    
  }
  mask_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mask,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mask_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConfigWifi.mask)
}

// string gateway = 5;
inline void ConfigWifi::clear_gateway() {
  gateway_.ClearToEmpty();
}
inline const std::string& ConfigWifi::gateway() const {
  // @@protoc_insertion_point(field_get:ConfigWifi.gateway)
  return _internal_gateway();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigWifi::set_gateway(ArgT0&& arg0, ArgT... args) {
 
 gateway_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConfigWifi.gateway)
}
inline std::string* ConfigWifi::mutable_gateway() {
  std::string* _s = _internal_mutable_gateway();
  // @@protoc_insertion_point(field_mutable:ConfigWifi.gateway)
  return _s;
}
inline const std::string& ConfigWifi::_internal_gateway() const {
  return gateway_.Get();
}
inline void ConfigWifi::_internal_set_gateway(const std::string& value) {
  
  gateway_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigWifi::_internal_mutable_gateway() {
  
  return gateway_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigWifi::release_gateway() {
  // @@protoc_insertion_point(field_release:ConfigWifi.gateway)
  return gateway_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigWifi::set_allocated_gateway(std::string* gateway) {
  if (gateway != nullptr) {
    
  } else {
    
  }
  gateway_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gateway,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gateway_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gateway_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConfigWifi.gateway)
}

// string dns = 6;
inline void ConfigWifi::clear_dns() {
  dns_.ClearToEmpty();
}
inline const std::string& ConfigWifi::dns() const {
  // @@protoc_insertion_point(field_get:ConfigWifi.dns)
  return _internal_dns();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigWifi::set_dns(ArgT0&& arg0, ArgT... args) {
 
 dns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConfigWifi.dns)
}
inline std::string* ConfigWifi::mutable_dns() {
  std::string* _s = _internal_mutable_dns();
  // @@protoc_insertion_point(field_mutable:ConfigWifi.dns)
  return _s;
}
inline const std::string& ConfigWifi::_internal_dns() const {
  return dns_.Get();
}
inline void ConfigWifi::_internal_set_dns(const std::string& value) {
  
  dns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigWifi::_internal_mutable_dns() {
  
  return dns_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigWifi::release_dns() {
  // @@protoc_insertion_point(field_release:ConfigWifi.dns)
  return dns_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigWifi::set_allocated_dns(std::string* dns) {
  if (dns != nullptr) {
    
  } else {
    
  }
  dns_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dns,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dns_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConfigWifi.dns)
}

// bool dhcp = 7;
inline void ConfigWifi::clear_dhcp() {
  dhcp_ = false;
}
inline bool ConfigWifi::_internal_dhcp() const {
  return dhcp_;
}
inline bool ConfigWifi::dhcp() const {
  // @@protoc_insertion_point(field_get:ConfigWifi.dhcp)
  return _internal_dhcp();
}
inline void ConfigWifi::_internal_set_dhcp(bool value) {
  
  dhcp_ = value;
}
inline void ConfigWifi::set_dhcp(bool value) {
  _internal_set_dhcp(value);
  // @@protoc_insertion_point(field_set:ConfigWifi.dhcp)
}

// .CommandResponce commandResponce = 8;
inline bool ConfigWifi::_internal_has_commandresponce() const {
  return this != internal_default_instance() && commandresponce_ != nullptr;
}
inline bool ConfigWifi::has_commandresponce() const {
  return _internal_has_commandresponce();
}
inline void ConfigWifi::clear_commandresponce() {
  if (GetArenaForAllocation() == nullptr && commandresponce_ != nullptr) {
    delete commandresponce_;
  }
  commandresponce_ = nullptr;
}
inline const ::CommandResponce& ConfigWifi::_internal_commandresponce() const {
  const ::CommandResponce* p = commandresponce_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommandResponce&>(
      ::_CommandResponce_default_instance_);
}
inline const ::CommandResponce& ConfigWifi::commandresponce() const {
  // @@protoc_insertion_point(field_get:ConfigWifi.commandResponce)
  return _internal_commandresponce();
}
inline void ConfigWifi::unsafe_arena_set_allocated_commandresponce(
    ::CommandResponce* commandresponce) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commandresponce_);
  }
  commandresponce_ = commandresponce;
  if (commandresponce) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConfigWifi.commandResponce)
}
inline ::CommandResponce* ConfigWifi::release_commandresponce() {
  
  ::CommandResponce* temp = commandresponce_;
  commandresponce_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CommandResponce* ConfigWifi::unsafe_arena_release_commandresponce() {
  // @@protoc_insertion_point(field_release:ConfigWifi.commandResponce)
  
  ::CommandResponce* temp = commandresponce_;
  commandresponce_ = nullptr;
  return temp;
}
inline ::CommandResponce* ConfigWifi::_internal_mutable_commandresponce() {
  
  if (commandresponce_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommandResponce>(GetArenaForAllocation());
    commandresponce_ = p;
  }
  return commandresponce_;
}
inline ::CommandResponce* ConfigWifi::mutable_commandresponce() {
  ::CommandResponce* _msg = _internal_mutable_commandresponce();
  // @@protoc_insertion_point(field_mutable:ConfigWifi.commandResponce)
  return _msg;
}
inline void ConfigWifi::set_allocated_commandresponce(::CommandResponce* commandresponce) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete commandresponce_;
  }
  if (commandresponce) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CommandResponce>::GetOwningArena(commandresponce);
    if (message_arena != submessage_arena) {
      commandresponce = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commandresponce, submessage_arena);
    }
    
  } else {
    
  }
  commandresponce_ = commandresponce;
  // @@protoc_insertion_point(field_set_allocated:ConfigWifi.commandResponce)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommandType>() {
  return ::CommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wifi_2eproto
