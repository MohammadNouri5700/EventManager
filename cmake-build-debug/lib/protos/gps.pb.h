// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gps_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gps_2eproto;
class CommandEx;
struct CommandExDefaultTypeInternal;
extern CommandExDefaultTypeInternal _CommandEx_default_instance_;
class ConfigGpsProtocol;
struct ConfigGpsProtocolDefaultTypeInternal;
extern ConfigGpsProtocolDefaultTypeInternal _ConfigGpsProtocol_default_instance_;
class ConfigGpsProtocol_GpsProtocol;
struct ConfigGpsProtocol_GpsProtocolDefaultTypeInternal;
extern ConfigGpsProtocol_GpsProtocolDefaultTypeInternal _ConfigGpsProtocol_GpsProtocol_default_instance_;
class GpsConfigResponse;
struct GpsConfigResponseDefaultTypeInternal;
extern GpsConfigResponseDefaultTypeInternal _GpsConfigResponse_default_instance_;
class GpsData;
struct GpsDataDefaultTypeInternal;
extern GpsDataDefaultTypeInternal _GpsData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CommandEx* Arena::CreateMaybeMessage<::CommandEx>(Arena*);
template<> ::ConfigGpsProtocol* Arena::CreateMaybeMessage<::ConfigGpsProtocol>(Arena*);
template<> ::ConfigGpsProtocol_GpsProtocol* Arena::CreateMaybeMessage<::ConfigGpsProtocol_GpsProtocol>(Arena*);
template<> ::GpsConfigResponse* Arena::CreateMaybeMessage<::GpsConfigResponse>(Arena*);
template<> ::GpsData* Arena::CreateMaybeMessage<::GpsData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum GpsDataType : int {
  TimeStamp = 0,
  Latitude = 1,
  Longitude = 2,
  Altitude = 3,
  Type = 4,
  Location = 5,
  GpsDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GpsDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GpsDataType_IsValid(int value);
constexpr GpsDataType GpsDataType_MIN = TimeStamp;
constexpr GpsDataType GpsDataType_MAX = Location;
constexpr int GpsDataType_ARRAYSIZE = GpsDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpsDataType_descriptor();
template<typename T>
inline const std::string& GpsDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GpsDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GpsDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GpsDataType_descriptor(), enum_t_value);
}
inline bool GpsDataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GpsDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GpsDataType>(
    GpsDataType_descriptor(), name, value);
}
// ===================================================================

class GpsData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GpsData) */ {
 public:
  inline GpsData() : GpsData(nullptr) {}
  ~GpsData() override;
  explicit constexpr GpsData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpsData(const GpsData& from);
  GpsData(GpsData&& from) noexcept
    : GpsData() {
    *this = ::std::move(from);
  }

  inline GpsData& operator=(const GpsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpsData& operator=(GpsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpsData* internal_default_instance() {
    return reinterpret_cast<const GpsData*>(
               &_GpsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GpsData& a, GpsData& b) {
    a.Swap(&b);
  }
  inline void Swap(GpsData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpsData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpsData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GpsData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpsData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GpsData";
  }
  protected:
  explicit GpsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicedataFieldNumber = 1,
  };
  // string devicedata = 1;
  void clear_devicedata();
  const std::string& devicedata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicedata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicedata();
  PROTOBUF_NODISCARD std::string* release_devicedata();
  void set_allocated_devicedata(std::string* devicedata);
  private:
  const std::string& _internal_devicedata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicedata(const std::string& value);
  std::string* _internal_mutable_devicedata();
  public:

  // @@protoc_insertion_point(class_scope:GpsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicedata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gps_2eproto;
};
// -------------------------------------------------------------------

class GpsConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GpsConfigResponse) */ {
 public:
  inline GpsConfigResponse() : GpsConfigResponse(nullptr) {}
  ~GpsConfigResponse() override;
  explicit constexpr GpsConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpsConfigResponse(const GpsConfigResponse& from);
  GpsConfigResponse(GpsConfigResponse&& from) noexcept
    : GpsConfigResponse() {
    *this = ::std::move(from);
  }

  inline GpsConfigResponse& operator=(const GpsConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpsConfigResponse& operator=(GpsConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpsConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpsConfigResponse* internal_default_instance() {
    return reinterpret_cast<const GpsConfigResponse*>(
               &_GpsConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GpsConfigResponse& a, GpsConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GpsConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpsConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpsConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpsConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpsConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GpsConfigResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpsConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GpsConfigResponse";
  }
  protected:
  explicit GpsConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorDescFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // string errorDesc = 3;
  void clear_errordesc();
  const std::string& errordesc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errordesc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errordesc();
  PROTOBUF_NODISCARD std::string* release_errordesc();
  void set_allocated_errordesc(std::string* errordesc);
  private:
  const std::string& _internal_errordesc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errordesc(const std::string& value);
  std::string* _internal_mutable_errordesc();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 errorCode = 2;
  void clear_errorcode();
  int32_t errorcode() const;
  void set_errorcode(int32_t value);
  private:
  int32_t _internal_errorcode() const;
  void _internal_set_errorcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GpsConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errordesc_;
  bool success_;
  int32_t errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gps_2eproto;
};
// -------------------------------------------------------------------

class CommandEx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommandEx) */ {
 public:
  inline CommandEx() : CommandEx(nullptr) {}
  ~CommandEx() override;
  explicit constexpr CommandEx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandEx(const CommandEx& from);
  CommandEx(CommandEx&& from) noexcept
    : CommandEx() {
    *this = ::std::move(from);
  }

  inline CommandEx& operator=(const CommandEx& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandEx& operator=(CommandEx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandEx& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandEx* internal_default_instance() {
    return reinterpret_cast<const CommandEx*>(
               &_CommandEx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandEx& a, CommandEx& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandEx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandEx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandEx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandEx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandEx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandEx& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandEx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommandEx";
  }
  protected:
  explicit CommandEx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComFieldNumber = 1,
  };
  // string com = 1;
  void clear_com();
  const std::string& com() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_com(ArgT0&& arg0, ArgT... args);
  std::string* mutable_com();
  PROTOBUF_NODISCARD std::string* release_com();
  void set_allocated_com(std::string* com);
  private:
  const std::string& _internal_com() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_com(const std::string& value);
  std::string* _internal_mutable_com();
  public:

  // @@protoc_insertion_point(class_scope:CommandEx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr com_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gps_2eproto;
};
// -------------------------------------------------------------------

class ConfigGpsProtocol_GpsProtocol final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigGpsProtocol.GpsProtocol) */ {
 public:
  inline ConfigGpsProtocol_GpsProtocol() : ConfigGpsProtocol_GpsProtocol(nullptr) {}
  ~ConfigGpsProtocol_GpsProtocol() override;
  explicit constexpr ConfigGpsProtocol_GpsProtocol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigGpsProtocol_GpsProtocol(const ConfigGpsProtocol_GpsProtocol& from);
  ConfigGpsProtocol_GpsProtocol(ConfigGpsProtocol_GpsProtocol&& from) noexcept
    : ConfigGpsProtocol_GpsProtocol() {
    *this = ::std::move(from);
  }

  inline ConfigGpsProtocol_GpsProtocol& operator=(const ConfigGpsProtocol_GpsProtocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigGpsProtocol_GpsProtocol& operator=(ConfigGpsProtocol_GpsProtocol&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigGpsProtocol_GpsProtocol& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigGpsProtocol_GpsProtocol* internal_default_instance() {
    return reinterpret_cast<const ConfigGpsProtocol_GpsProtocol*>(
               &_ConfigGpsProtocol_GpsProtocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConfigGpsProtocol_GpsProtocol& a, ConfigGpsProtocol_GpsProtocol& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigGpsProtocol_GpsProtocol* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigGpsProtocol_GpsProtocol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigGpsProtocol_GpsProtocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigGpsProtocol_GpsProtocol>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigGpsProtocol_GpsProtocol& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfigGpsProtocol_GpsProtocol& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigGpsProtocol_GpsProtocol* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigGpsProtocol.GpsProtocol";
  }
  protected:
  explicit ConfigGpsProtocol_GpsProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpsNameFieldNumber = 1,
    kGpsIdFieldNumber = 2,
    kIntervalFieldNumber = 3,
    kGpsDataTypeFieldNumber = 4,
    kGpsReciverFieldNumber = 5,
  };
  // string gpsName = 1;
  void clear_gpsname();
  const std::string& gpsname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gpsname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gpsname();
  PROTOBUF_NODISCARD std::string* release_gpsname();
  void set_allocated_gpsname(std::string* gpsname);
  private:
  const std::string& _internal_gpsname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gpsname(const std::string& value);
  std::string* _internal_mutable_gpsname();
  public:

  // string gpsId = 2;
  void clear_gpsid();
  const std::string& gpsid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gpsid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gpsid();
  PROTOBUF_NODISCARD std::string* release_gpsid();
  void set_allocated_gpsid(std::string* gpsid);
  private:
  const std::string& _internal_gpsid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gpsid(const std::string& value);
  std::string* _internal_mutable_gpsid();
  public:

  // int32 interval = 3;
  void clear_interval();
  int32_t interval() const;
  void set_interval(int32_t value);
  private:
  int32_t _internal_interval() const;
  void _internal_set_interval(int32_t value);
  public:

  // .GpsDataType gpsDataType = 4;
  void clear_gpsdatatype();
  ::GpsDataType gpsdatatype() const;
  void set_gpsdatatype(::GpsDataType value);
  private:
  ::GpsDataType _internal_gpsdatatype() const;
  void _internal_set_gpsdatatype(::GpsDataType value);
  public:

  // bool gpsReciver = 5;
  void clear_gpsreciver();
  bool gpsreciver() const;
  void set_gpsreciver(bool value);
  private:
  bool _internal_gpsreciver() const;
  void _internal_set_gpsreciver(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ConfigGpsProtocol.GpsProtocol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gpsname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gpsid_;
  int32_t interval_;
  int gpsdatatype_;
  bool gpsreciver_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gps_2eproto;
};
// -------------------------------------------------------------------

class ConfigGpsProtocol final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigGpsProtocol) */ {
 public:
  inline ConfigGpsProtocol() : ConfigGpsProtocol(nullptr) {}
  ~ConfigGpsProtocol() override;
  explicit constexpr ConfigGpsProtocol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigGpsProtocol(const ConfigGpsProtocol& from);
  ConfigGpsProtocol(ConfigGpsProtocol&& from) noexcept
    : ConfigGpsProtocol() {
    *this = ::std::move(from);
  }

  inline ConfigGpsProtocol& operator=(const ConfigGpsProtocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigGpsProtocol& operator=(ConfigGpsProtocol&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigGpsProtocol& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigGpsProtocol* internal_default_instance() {
    return reinterpret_cast<const ConfigGpsProtocol*>(
               &_ConfigGpsProtocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConfigGpsProtocol& a, ConfigGpsProtocol& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigGpsProtocol* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigGpsProtocol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigGpsProtocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigGpsProtocol>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigGpsProtocol& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfigGpsProtocol& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigGpsProtocol* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigGpsProtocol";
  }
  protected:
  explicit ConfigGpsProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConfigGpsProtocol_GpsProtocol GpsProtocol;

  // accessors -------------------------------------------------------

  enum : int {
    kGpsProtocolFieldNumber = 1,
  };
  // repeated .ConfigGpsProtocol.GpsProtocol gpsProtocol = 1;
  int gpsprotocol_size() const;
  private:
  int _internal_gpsprotocol_size() const;
  public:
  void clear_gpsprotocol();
  ::ConfigGpsProtocol_GpsProtocol* mutable_gpsprotocol(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigGpsProtocol_GpsProtocol >*
      mutable_gpsprotocol();
  private:
  const ::ConfigGpsProtocol_GpsProtocol& _internal_gpsprotocol(int index) const;
  ::ConfigGpsProtocol_GpsProtocol* _internal_add_gpsprotocol();
  public:
  const ::ConfigGpsProtocol_GpsProtocol& gpsprotocol(int index) const;
  ::ConfigGpsProtocol_GpsProtocol* add_gpsprotocol();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigGpsProtocol_GpsProtocol >&
      gpsprotocol() const;

  // @@protoc_insertion_point(class_scope:ConfigGpsProtocol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigGpsProtocol_GpsProtocol > gpsprotocol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GpsData

// string devicedata = 1;
inline void GpsData::clear_devicedata() {
  devicedata_.ClearToEmpty();
}
inline const std::string& GpsData::devicedata() const {
  // @@protoc_insertion_point(field_get:GpsData.devicedata)
  return _internal_devicedata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GpsData::set_devicedata(ArgT0&& arg0, ArgT... args) {
 
 devicedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GpsData.devicedata)
}
inline std::string* GpsData::mutable_devicedata() {
  std::string* _s = _internal_mutable_devicedata();
  // @@protoc_insertion_point(field_mutable:GpsData.devicedata)
  return _s;
}
inline const std::string& GpsData::_internal_devicedata() const {
  return devicedata_.Get();
}
inline void GpsData::_internal_set_devicedata(const std::string& value) {
  
  devicedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GpsData::_internal_mutable_devicedata() {
  
  return devicedata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GpsData::release_devicedata() {
  // @@protoc_insertion_point(field_release:GpsData.devicedata)
  return devicedata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GpsData::set_allocated_devicedata(std::string* devicedata) {
  if (devicedata != nullptr) {
    
  } else {
    
  }
  devicedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicedata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (devicedata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    devicedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GpsData.devicedata)
}

// -------------------------------------------------------------------

// GpsConfigResponse

// bool Success = 1;
inline void GpsConfigResponse::clear_success() {
  success_ = false;
}
inline bool GpsConfigResponse::_internal_success() const {
  return success_;
}
inline bool GpsConfigResponse::success() const {
  // @@protoc_insertion_point(field_get:GpsConfigResponse.Success)
  return _internal_success();
}
inline void GpsConfigResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GpsConfigResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:GpsConfigResponse.Success)
}

// int32 errorCode = 2;
inline void GpsConfigResponse::clear_errorcode() {
  errorcode_ = 0;
}
inline int32_t GpsConfigResponse::_internal_errorcode() const {
  return errorcode_;
}
inline int32_t GpsConfigResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:GpsConfigResponse.errorCode)
  return _internal_errorcode();
}
inline void GpsConfigResponse::_internal_set_errorcode(int32_t value) {
  
  errorcode_ = value;
}
inline void GpsConfigResponse::set_errorcode(int32_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:GpsConfigResponse.errorCode)
}

// string errorDesc = 3;
inline void GpsConfigResponse::clear_errordesc() {
  errordesc_.ClearToEmpty();
}
inline const std::string& GpsConfigResponse::errordesc() const {
  // @@protoc_insertion_point(field_get:GpsConfigResponse.errorDesc)
  return _internal_errordesc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GpsConfigResponse::set_errordesc(ArgT0&& arg0, ArgT... args) {
 
 errordesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GpsConfigResponse.errorDesc)
}
inline std::string* GpsConfigResponse::mutable_errordesc() {
  std::string* _s = _internal_mutable_errordesc();
  // @@protoc_insertion_point(field_mutable:GpsConfigResponse.errorDesc)
  return _s;
}
inline const std::string& GpsConfigResponse::_internal_errordesc() const {
  return errordesc_.Get();
}
inline void GpsConfigResponse::_internal_set_errordesc(const std::string& value) {
  
  errordesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GpsConfigResponse::_internal_mutable_errordesc() {
  
  return errordesc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GpsConfigResponse::release_errordesc() {
  // @@protoc_insertion_point(field_release:GpsConfigResponse.errorDesc)
  return errordesc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GpsConfigResponse::set_allocated_errordesc(std::string* errordesc) {
  if (errordesc != nullptr) {
    
  } else {
    
  }
  errordesc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errordesc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errordesc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    errordesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GpsConfigResponse.errorDesc)
}

// -------------------------------------------------------------------

// CommandEx

// string com = 1;
inline void CommandEx::clear_com() {
  com_.ClearToEmpty();
}
inline const std::string& CommandEx::com() const {
  // @@protoc_insertion_point(field_get:CommandEx.com)
  return _internal_com();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandEx::set_com(ArgT0&& arg0, ArgT... args) {
 
 com_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommandEx.com)
}
inline std::string* CommandEx::mutable_com() {
  std::string* _s = _internal_mutable_com();
  // @@protoc_insertion_point(field_mutable:CommandEx.com)
  return _s;
}
inline const std::string& CommandEx::_internal_com() const {
  return com_.Get();
}
inline void CommandEx::_internal_set_com(const std::string& value) {
  
  com_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandEx::_internal_mutable_com() {
  
  return com_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandEx::release_com() {
  // @@protoc_insertion_point(field_release:CommandEx.com)
  return com_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandEx::set_allocated_com(std::string* com) {
  if (com != nullptr) {
    
  } else {
    
  }
  com_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), com,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (com_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    com_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommandEx.com)
}

// -------------------------------------------------------------------

// ConfigGpsProtocol_GpsProtocol

// string gpsName = 1;
inline void ConfigGpsProtocol_GpsProtocol::clear_gpsname() {
  gpsname_.ClearToEmpty();
}
inline const std::string& ConfigGpsProtocol_GpsProtocol::gpsname() const {
  // @@protoc_insertion_point(field_get:ConfigGpsProtocol.GpsProtocol.gpsName)
  return _internal_gpsname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigGpsProtocol_GpsProtocol::set_gpsname(ArgT0&& arg0, ArgT... args) {
 
 gpsname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConfigGpsProtocol.GpsProtocol.gpsName)
}
inline std::string* ConfigGpsProtocol_GpsProtocol::mutable_gpsname() {
  std::string* _s = _internal_mutable_gpsname();
  // @@protoc_insertion_point(field_mutable:ConfigGpsProtocol.GpsProtocol.gpsName)
  return _s;
}
inline const std::string& ConfigGpsProtocol_GpsProtocol::_internal_gpsname() const {
  return gpsname_.Get();
}
inline void ConfigGpsProtocol_GpsProtocol::_internal_set_gpsname(const std::string& value) {
  
  gpsname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigGpsProtocol_GpsProtocol::_internal_mutable_gpsname() {
  
  return gpsname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigGpsProtocol_GpsProtocol::release_gpsname() {
  // @@protoc_insertion_point(field_release:ConfigGpsProtocol.GpsProtocol.gpsName)
  return gpsname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigGpsProtocol_GpsProtocol::set_allocated_gpsname(std::string* gpsname) {
  if (gpsname != nullptr) {
    
  } else {
    
  }
  gpsname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gpsname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gpsname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gpsname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConfigGpsProtocol.GpsProtocol.gpsName)
}

// string gpsId = 2;
inline void ConfigGpsProtocol_GpsProtocol::clear_gpsid() {
  gpsid_.ClearToEmpty();
}
inline const std::string& ConfigGpsProtocol_GpsProtocol::gpsid() const {
  // @@protoc_insertion_point(field_get:ConfigGpsProtocol.GpsProtocol.gpsId)
  return _internal_gpsid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigGpsProtocol_GpsProtocol::set_gpsid(ArgT0&& arg0, ArgT... args) {
 
 gpsid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConfigGpsProtocol.GpsProtocol.gpsId)
}
inline std::string* ConfigGpsProtocol_GpsProtocol::mutable_gpsid() {
  std::string* _s = _internal_mutable_gpsid();
  // @@protoc_insertion_point(field_mutable:ConfigGpsProtocol.GpsProtocol.gpsId)
  return _s;
}
inline const std::string& ConfigGpsProtocol_GpsProtocol::_internal_gpsid() const {
  return gpsid_.Get();
}
inline void ConfigGpsProtocol_GpsProtocol::_internal_set_gpsid(const std::string& value) {
  
  gpsid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigGpsProtocol_GpsProtocol::_internal_mutable_gpsid() {
  
  return gpsid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigGpsProtocol_GpsProtocol::release_gpsid() {
  // @@protoc_insertion_point(field_release:ConfigGpsProtocol.GpsProtocol.gpsId)
  return gpsid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigGpsProtocol_GpsProtocol::set_allocated_gpsid(std::string* gpsid) {
  if (gpsid != nullptr) {
    
  } else {
    
  }
  gpsid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gpsid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gpsid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gpsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConfigGpsProtocol.GpsProtocol.gpsId)
}

// int32 interval = 3;
inline void ConfigGpsProtocol_GpsProtocol::clear_interval() {
  interval_ = 0;
}
inline int32_t ConfigGpsProtocol_GpsProtocol::_internal_interval() const {
  return interval_;
}
inline int32_t ConfigGpsProtocol_GpsProtocol::interval() const {
  // @@protoc_insertion_point(field_get:ConfigGpsProtocol.GpsProtocol.interval)
  return _internal_interval();
}
inline void ConfigGpsProtocol_GpsProtocol::_internal_set_interval(int32_t value) {
  
  interval_ = value;
}
inline void ConfigGpsProtocol_GpsProtocol::set_interval(int32_t value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:ConfigGpsProtocol.GpsProtocol.interval)
}

// .GpsDataType gpsDataType = 4;
inline void ConfigGpsProtocol_GpsProtocol::clear_gpsdatatype() {
  gpsdatatype_ = 0;
}
inline ::GpsDataType ConfigGpsProtocol_GpsProtocol::_internal_gpsdatatype() const {
  return static_cast< ::GpsDataType >(gpsdatatype_);
}
inline ::GpsDataType ConfigGpsProtocol_GpsProtocol::gpsdatatype() const {
  // @@protoc_insertion_point(field_get:ConfigGpsProtocol.GpsProtocol.gpsDataType)
  return _internal_gpsdatatype();
}
inline void ConfigGpsProtocol_GpsProtocol::_internal_set_gpsdatatype(::GpsDataType value) {
  
  gpsdatatype_ = value;
}
inline void ConfigGpsProtocol_GpsProtocol::set_gpsdatatype(::GpsDataType value) {
  _internal_set_gpsdatatype(value);
  // @@protoc_insertion_point(field_set:ConfigGpsProtocol.GpsProtocol.gpsDataType)
}

// bool gpsReciver = 5;
inline void ConfigGpsProtocol_GpsProtocol::clear_gpsreciver() {
  gpsreciver_ = false;
}
inline bool ConfigGpsProtocol_GpsProtocol::_internal_gpsreciver() const {
  return gpsreciver_;
}
inline bool ConfigGpsProtocol_GpsProtocol::gpsreciver() const {
  // @@protoc_insertion_point(field_get:ConfigGpsProtocol.GpsProtocol.gpsReciver)
  return _internal_gpsreciver();
}
inline void ConfigGpsProtocol_GpsProtocol::_internal_set_gpsreciver(bool value) {
  
  gpsreciver_ = value;
}
inline void ConfigGpsProtocol_GpsProtocol::set_gpsreciver(bool value) {
  _internal_set_gpsreciver(value);
  // @@protoc_insertion_point(field_set:ConfigGpsProtocol.GpsProtocol.gpsReciver)
}

// -------------------------------------------------------------------

// ConfigGpsProtocol

// repeated .ConfigGpsProtocol.GpsProtocol gpsProtocol = 1;
inline int ConfigGpsProtocol::_internal_gpsprotocol_size() const {
  return gpsprotocol_.size();
}
inline int ConfigGpsProtocol::gpsprotocol_size() const {
  return _internal_gpsprotocol_size();
}
inline void ConfigGpsProtocol::clear_gpsprotocol() {
  gpsprotocol_.Clear();
}
inline ::ConfigGpsProtocol_GpsProtocol* ConfigGpsProtocol::mutable_gpsprotocol(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigGpsProtocol.gpsProtocol)
  return gpsprotocol_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigGpsProtocol_GpsProtocol >*
ConfigGpsProtocol::mutable_gpsprotocol() {
  // @@protoc_insertion_point(field_mutable_list:ConfigGpsProtocol.gpsProtocol)
  return &gpsprotocol_;
}
inline const ::ConfigGpsProtocol_GpsProtocol& ConfigGpsProtocol::_internal_gpsprotocol(int index) const {
  return gpsprotocol_.Get(index);
}
inline const ::ConfigGpsProtocol_GpsProtocol& ConfigGpsProtocol::gpsprotocol(int index) const {
  // @@protoc_insertion_point(field_get:ConfigGpsProtocol.gpsProtocol)
  return _internal_gpsprotocol(index);
}
inline ::ConfigGpsProtocol_GpsProtocol* ConfigGpsProtocol::_internal_add_gpsprotocol() {
  return gpsprotocol_.Add();
}
inline ::ConfigGpsProtocol_GpsProtocol* ConfigGpsProtocol::add_gpsprotocol() {
  ::ConfigGpsProtocol_GpsProtocol* _add = _internal_add_gpsprotocol();
  // @@protoc_insertion_point(field_add:ConfigGpsProtocol.gpsProtocol)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ConfigGpsProtocol_GpsProtocol >&
ConfigGpsProtocol::gpsprotocol() const {
  // @@protoc_insertion_point(field_list:ConfigGpsProtocol.gpsProtocol)
  return gpsprotocol_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GpsDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GpsDataType>() {
  return ::GpsDataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gps_2eproto
