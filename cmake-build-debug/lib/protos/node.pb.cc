// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#include "node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr NodeConfigResponse::NodeConfigResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errordesc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false)
  , errorcode_(0){}
struct NodeConfigResponseDefaultTypeInternal {
  constexpr NodeConfigResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeConfigResponseDefaultTypeInternal() {}
  union {
    NodeConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeConfigResponseDefaultTypeInternal _NodeConfigResponse_default_instance_;
constexpr ConfigNodeS_NodeData_TagListConfig::ConfigNodeS_NodeData_TagListConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tagname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alternative_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attrib_(0){}
struct ConfigNodeS_NodeData_TagListConfigDefaultTypeInternal {
  constexpr ConfigNodeS_NodeData_TagListConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigNodeS_NodeData_TagListConfigDefaultTypeInternal() {}
  union {
    ConfigNodeS_NodeData_TagListConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigNodeS_NodeData_TagListConfigDefaultTypeInternal _ConfigNodeS_NodeData_TagListConfig_default_instance_;
constexpr ConfigNodeS_NodeData::ConfigNodeS_NodeData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : taglistconfig_()
  , nodename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nodeid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , connectionname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , topic_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timer_(0){}
struct ConfigNodeS_NodeDataDefaultTypeInternal {
  constexpr ConfigNodeS_NodeDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigNodeS_NodeDataDefaultTypeInternal() {}
  union {
    ConfigNodeS_NodeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigNodeS_NodeDataDefaultTypeInternal _ConfigNodeS_NodeData_default_instance_;
constexpr ConfigNodeS::ConfigNodeS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodedata_(){}
struct ConfigNodeSDefaultTypeInternal {
  constexpr ConfigNodeSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigNodeSDefaultTypeInternal() {}
  union {
    ConfigNodeS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigNodeSDefaultTypeInternal _ConfigNodeS_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_node_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2eproto = nullptr;

const uint32_t TableStruct_node_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NodeConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NodeConfigResponse, success_),
  PROTOBUF_FIELD_OFFSET(::NodeConfigResponse, errorcode_),
  PROTOBUF_FIELD_OFFSET(::NodeConfigResponse, errordesc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData_TagListConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData_TagListConfig, attrib_),
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData_TagListConfig, tagname_),
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData_TagListConfig, alternative_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData, nodename_),
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData, nodeid_),
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData, connectionname_),
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData, timer_),
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData, taglistconfig_),
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS_NodeData, topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConfigNodeS, nodedata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::NodeConfigResponse)},
  { 9, -1, -1, sizeof(::ConfigNodeS_NodeData_TagListConfig)},
  { 18, -1, -1, sizeof(::ConfigNodeS_NodeData)},
  { 30, -1, -1, sizeof(::ConfigNodeS)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NodeConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigNodeS_NodeData_TagListConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigNodeS_NodeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigNodeS_default_instance_),
};

const char descriptor_table_protodef_node_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nnode.proto\"K\n\022NodeConfigResponse\022\017\n\007Su"
  "ccess\030\001 \001(\010\022\021\n\terrorCode\030\002 \001(\005\022\021\n\terrorD"
  "esc\030\003 \001(\t\"\236\002\n\013ConfigNodeS\022\'\n\010nodeData\030\001 "
  "\003(\0132\025.ConfigNodeS.NodeData\032\345\001\n\010NodeData\022"
  "\020\n\010nodeName\030\001 \001(\t\022\016\n\006nodeID\030\002 \001(\t\022\026\n\016con"
  "nectionName\030\003 \001(\t\022\r\n\005timer\030\004 \001(\005\022:\n\rtagL"
  "istConfig\030\005 \003(\0132#.ConfigNodeS.NodeData.T"
  "agListConfig\022\r\n\005topic\030\006 \001(\t\032E\n\rTagListCo"
  "nfig\022\016\n\006Attrib\030\001 \001(\005\022\017\n\007TagName\030\002 \001(\t\022\023\n"
  "\013Alternative\030\003 \001(\t2M\n\020SystemNodeConfig\0229"
  "\n\024SendSystemNodeConfig\022\014.ConfigNodeS\032\023.N"
  "odeConfigResponseb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2eproto = {
  false, false, 465, descriptor_table_protodef_node_2eproto, "node.proto", 
  &descriptor_table_node_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_node_2eproto::offsets,
  file_level_metadata_node_2eproto, file_level_enum_descriptors_node_2eproto, file_level_service_descriptors_node_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_node_2eproto_getter() {
  return &descriptor_table_node_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2eproto(&descriptor_table_node_2eproto);

// ===================================================================

class NodeConfigResponse::_Internal {
 public:
};

NodeConfigResponse::NodeConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:NodeConfigResponse)
}
NodeConfigResponse::NodeConfigResponse(const NodeConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errordesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errordesc().empty()) {
    errordesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errordesc(), 
      GetArenaForAllocation());
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:NodeConfigResponse)
}

inline void NodeConfigResponse::SharedCtor() {
errordesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errordesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
}

NodeConfigResponse::~NodeConfigResponse() {
  // @@protoc_insertion_point(destructor:NodeConfigResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errordesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeConfigResponse::ArenaDtor(void* object) {
  NodeConfigResponse* _this = reinterpret_cast< NodeConfigResponse* >(object);
  (void)_this;
}
void NodeConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:NodeConfigResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errordesc_.ClearToEmpty();
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errorcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errorDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errordesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NodeConfigResponse.errorDesc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeConfigResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeConfigResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_errorcode(), target);
  }

  // string errorDesc = 3;
  if (!this->_internal_errordesc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errordesc().data(), static_cast<int>(this->_internal_errordesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NodeConfigResponse.errorDesc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errordesc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeConfigResponse)
  return target;
}

size_t NodeConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NodeConfigResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorDesc = 3;
  if (!this->_internal_errordesc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errordesc());
  }

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_errorcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeConfigResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeConfigResponse::GetClassData() const { return &_class_data_; }

void NodeConfigResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NodeConfigResponse *>(to)->MergeFrom(
      static_cast<const NodeConfigResponse &>(from));
}


void NodeConfigResponse::MergeFrom(const NodeConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NodeConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errordesc().empty()) {
    _internal_set_errordesc(from._internal_errordesc());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeConfigResponse::CopyFrom(const NodeConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NodeConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeConfigResponse::IsInitialized() const {
  return true;
}

void NodeConfigResponse::InternalSwap(NodeConfigResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errordesc_, lhs_arena,
      &other->errordesc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeConfigResponse, errorcode_)
      + sizeof(NodeConfigResponse::errorcode_)
      - PROTOBUF_FIELD_OFFSET(NodeConfigResponse, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeConfigResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[0]);
}

// ===================================================================

class ConfigNodeS_NodeData_TagListConfig::_Internal {
 public:
};

ConfigNodeS_NodeData_TagListConfig::ConfigNodeS_NodeData_TagListConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ConfigNodeS.NodeData.TagListConfig)
}
ConfigNodeS_NodeData_TagListConfig::ConfigNodeS_NodeData_TagListConfig(const ConfigNodeS_NodeData_TagListConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tagname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tagname().empty()) {
    tagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagname(), 
      GetArenaForAllocation());
  }
  alternative_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    alternative_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alternative().empty()) {
    alternative_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alternative(), 
      GetArenaForAllocation());
  }
  attrib_ = from.attrib_;
  // @@protoc_insertion_point(copy_constructor:ConfigNodeS.NodeData.TagListConfig)
}

inline void ConfigNodeS_NodeData_TagListConfig::SharedCtor() {
tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tagname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
alternative_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  alternative_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attrib_ = 0;
}

ConfigNodeS_NodeData_TagListConfig::~ConfigNodeS_NodeData_TagListConfig() {
  // @@protoc_insertion_point(destructor:ConfigNodeS.NodeData.TagListConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigNodeS_NodeData_TagListConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tagname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alternative_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigNodeS_NodeData_TagListConfig::ArenaDtor(void* object) {
  ConfigNodeS_NodeData_TagListConfig* _this = reinterpret_cast< ConfigNodeS_NodeData_TagListConfig* >(object);
  (void)_this;
}
void ConfigNodeS_NodeData_TagListConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigNodeS_NodeData_TagListConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigNodeS_NodeData_TagListConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigNodeS.NodeData.TagListConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagname_.ClearToEmpty();
  alternative_.ClearToEmpty();
  attrib_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigNodeS_NodeData_TagListConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Attrib = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          attrib_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TagName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tagname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigNodeS.NodeData.TagListConfig.TagName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Alternative = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_alternative();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigNodeS.NodeData.TagListConfig.Alternative"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigNodeS_NodeData_TagListConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigNodeS.NodeData.TagListConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Attrib = 1;
  if (this->_internal_attrib() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_attrib(), target);
  }

  // string TagName = 2;
  if (!this->_internal_tagname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tagname().data(), static_cast<int>(this->_internal_tagname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigNodeS.NodeData.TagListConfig.TagName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tagname(), target);
  }

  // string Alternative = 3;
  if (!this->_internal_alternative().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alternative().data(), static_cast<int>(this->_internal_alternative().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigNodeS.NodeData.TagListConfig.Alternative");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alternative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigNodeS.NodeData.TagListConfig)
  return target;
}

size_t ConfigNodeS_NodeData_TagListConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigNodeS.NodeData.TagListConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string TagName = 2;
  if (!this->_internal_tagname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tagname());
  }

  // string Alternative = 3;
  if (!this->_internal_alternative().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alternative());
  }

  // int32 Attrib = 1;
  if (this->_internal_attrib() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_attrib());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigNodeS_NodeData_TagListConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigNodeS_NodeData_TagListConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigNodeS_NodeData_TagListConfig::GetClassData() const { return &_class_data_; }

void ConfigNodeS_NodeData_TagListConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigNodeS_NodeData_TagListConfig *>(to)->MergeFrom(
      static_cast<const ConfigNodeS_NodeData_TagListConfig &>(from));
}


void ConfigNodeS_NodeData_TagListConfig::MergeFrom(const ConfigNodeS_NodeData_TagListConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigNodeS.NodeData.TagListConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tagname().empty()) {
    _internal_set_tagname(from._internal_tagname());
  }
  if (!from._internal_alternative().empty()) {
    _internal_set_alternative(from._internal_alternative());
  }
  if (from._internal_attrib() != 0) {
    _internal_set_attrib(from._internal_attrib());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigNodeS_NodeData_TagListConfig::CopyFrom(const ConfigNodeS_NodeData_TagListConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigNodeS.NodeData.TagListConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigNodeS_NodeData_TagListConfig::IsInitialized() const {
  return true;
}

void ConfigNodeS_NodeData_TagListConfig::InternalSwap(ConfigNodeS_NodeData_TagListConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagname_, lhs_arena,
      &other->tagname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alternative_, lhs_arena,
      &other->alternative_, rhs_arena
  );
  swap(attrib_, other->attrib_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigNodeS_NodeData_TagListConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[1]);
}

// ===================================================================

class ConfigNodeS_NodeData::_Internal {
 public:
};

ConfigNodeS_NodeData::ConfigNodeS_NodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  taglistconfig_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ConfigNodeS.NodeData)
}
ConfigNodeS_NodeData::ConfigNodeS_NodeData(const ConfigNodeS_NodeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      taglistconfig_(from.taglistconfig_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodename().empty()) {
    nodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nodename(), 
      GetArenaForAllocation());
  }
  nodeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodeid().empty()) {
    nodeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nodeid(), 
      GetArenaForAllocation());
  }
  connectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    connectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connectionname().empty()) {
    connectionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connectionname(), 
      GetArenaForAllocation());
  }
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic().empty()) {
    topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_topic(), 
      GetArenaForAllocation());
  }
  timer_ = from.timer_;
  // @@protoc_insertion_point(copy_constructor:ConfigNodeS.NodeData)
}

inline void ConfigNodeS_NodeData::SharedCtor() {
nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
nodeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
connectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  connectionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timer_ = 0;
}

ConfigNodeS_NodeData::~ConfigNodeS_NodeData() {
  // @@protoc_insertion_point(destructor:ConfigNodeS.NodeData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigNodeS_NodeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nodename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connectionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigNodeS_NodeData::ArenaDtor(void* object) {
  ConfigNodeS_NodeData* _this = reinterpret_cast< ConfigNodeS_NodeData* >(object);
  (void)_this;
}
void ConfigNodeS_NodeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigNodeS_NodeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigNodeS_NodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigNodeS.NodeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taglistconfig_.Clear();
  nodename_.ClearToEmpty();
  nodeid_.ClearToEmpty();
  connectionname_.ClearToEmpty();
  topic_.ClearToEmpty();
  timer_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigNodeS_NodeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nodeName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nodename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigNodeS.NodeData.nodeName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nodeID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nodeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigNodeS.NodeData.nodeID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string connectionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_connectionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigNodeS.NodeData.connectionName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ConfigNodeS.NodeData.TagListConfig tagListConfig = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_taglistconfig(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string topic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigNodeS.NodeData.topic"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigNodeS_NodeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigNodeS.NodeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodename().data(), static_cast<int>(this->_internal_nodename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigNodeS.NodeData.nodeName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nodename(), target);
  }

  // string nodeID = 2;
  if (!this->_internal_nodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodeid().data(), static_cast<int>(this->_internal_nodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigNodeS.NodeData.nodeID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nodeid(), target);
  }

  // string connectionName = 3;
  if (!this->_internal_connectionname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connectionname().data(), static_cast<int>(this->_internal_connectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigNodeS.NodeData.connectionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_connectionname(), target);
  }

  // int32 timer = 4;
  if (this->_internal_timer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_timer(), target);
  }

  // repeated .ConfigNodeS.NodeData.TagListConfig tagListConfig = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_taglistconfig_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_taglistconfig(i), target, stream);
  }

  // string topic = 6;
  if (!this->_internal_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfigNodeS.NodeData.topic");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_topic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigNodeS.NodeData)
  return target;
}

size_t ConfigNodeS_NodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigNodeS.NodeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ConfigNodeS.NodeData.TagListConfig tagListConfig = 5;
  total_size += 1UL * this->_internal_taglistconfig_size();
  for (const auto& msg : this->taglistconfig_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodename());
  }

  // string nodeID = 2;
  if (!this->_internal_nodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodeid());
  }

  // string connectionName = 3;
  if (!this->_internal_connectionname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connectionname());
  }

  // string topic = 6;
  if (!this->_internal_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // int32 timer = 4;
  if (this->_internal_timer() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_timer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigNodeS_NodeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigNodeS_NodeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigNodeS_NodeData::GetClassData() const { return &_class_data_; }

void ConfigNodeS_NodeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigNodeS_NodeData *>(to)->MergeFrom(
      static_cast<const ConfigNodeS_NodeData &>(from));
}


void ConfigNodeS_NodeData::MergeFrom(const ConfigNodeS_NodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigNodeS.NodeData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  taglistconfig_.MergeFrom(from.taglistconfig_);
  if (!from._internal_nodename().empty()) {
    _internal_set_nodename(from._internal_nodename());
  }
  if (!from._internal_nodeid().empty()) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (!from._internal_connectionname().empty()) {
    _internal_set_connectionname(from._internal_connectionname());
  }
  if (!from._internal_topic().empty()) {
    _internal_set_topic(from._internal_topic());
  }
  if (from._internal_timer() != 0) {
    _internal_set_timer(from._internal_timer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigNodeS_NodeData::CopyFrom(const ConfigNodeS_NodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigNodeS.NodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigNodeS_NodeData::IsInitialized() const {
  return true;
}

void ConfigNodeS_NodeData::InternalSwap(ConfigNodeS_NodeData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  taglistconfig_.InternalSwap(&other->taglistconfig_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nodename_, lhs_arena,
      &other->nodename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nodeid_, lhs_arena,
      &other->nodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &connectionname_, lhs_arena,
      &other->connectionname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &topic_, lhs_arena,
      &other->topic_, rhs_arena
  );
  swap(timer_, other->timer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigNodeS_NodeData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[2]);
}

// ===================================================================

class ConfigNodeS::_Internal {
 public:
};

ConfigNodeS::ConfigNodeS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodedata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ConfigNodeS)
}
ConfigNodeS::ConfigNodeS(const ConfigNodeS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodedata_(from.nodedata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConfigNodeS)
}

inline void ConfigNodeS::SharedCtor() {
}

ConfigNodeS::~ConfigNodeS() {
  // @@protoc_insertion_point(destructor:ConfigNodeS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigNodeS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfigNodeS::ArenaDtor(void* object) {
  ConfigNodeS* _this = reinterpret_cast< ConfigNodeS* >(object);
  (void)_this;
}
void ConfigNodeS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigNodeS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigNodeS::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigNodeS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodedata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigNodeS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ConfigNodeS.NodeData nodeData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodedata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigNodeS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigNodeS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ConfigNodeS.NodeData nodeData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodedata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodedata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigNodeS)
  return target;
}

size_t ConfigNodeS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigNodeS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ConfigNodeS.NodeData nodeData = 1;
  total_size += 1UL * this->_internal_nodedata_size();
  for (const auto& msg : this->nodedata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigNodeS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigNodeS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigNodeS::GetClassData() const { return &_class_data_; }

void ConfigNodeS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigNodeS *>(to)->MergeFrom(
      static_cast<const ConfigNodeS &>(from));
}


void ConfigNodeS::MergeFrom(const ConfigNodeS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigNodeS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodedata_.MergeFrom(from.nodedata_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigNodeS::CopyFrom(const ConfigNodeS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigNodeS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigNodeS::IsInitialized() const {
  return true;
}

void ConfigNodeS::InternalSwap(ConfigNodeS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodedata_.InternalSwap(&other->nodedata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigNodeS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NodeConfigResponse* Arena::CreateMaybeMessage< ::NodeConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NodeConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigNodeS_NodeData_TagListConfig* Arena::CreateMaybeMessage< ::ConfigNodeS_NodeData_TagListConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConfigNodeS_NodeData_TagListConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigNodeS_NodeData* Arena::CreateMaybeMessage< ::ConfigNodeS_NodeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConfigNodeS_NodeData >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigNodeS* Arena::CreateMaybeMessage< ::ConfigNodeS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConfigNodeS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
