// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialconfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_serialconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_serialconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_serialconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_serialconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_serialconfig_2eproto;
class SerialConfig;
struct SerialConfigDefaultTypeInternal;
extern SerialConfigDefaultTypeInternal _SerialConfig_default_instance_;
class SerialConfig_Rs232Config;
struct SerialConfig_Rs232ConfigDefaultTypeInternal;
extern SerialConfig_Rs232ConfigDefaultTypeInternal _SerialConfig_Rs232Config_default_instance_;
class SerialConfig_Rs485Config;
struct SerialConfig_Rs485ConfigDefaultTypeInternal;
extern SerialConfig_Rs485ConfigDefaultTypeInternal _SerialConfig_Rs485Config_default_instance_;
class SerialResponse;
struct SerialResponseDefaultTypeInternal;
extern SerialResponseDefaultTypeInternal _SerialResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SerialConfig* Arena::CreateMaybeMessage<::SerialConfig>(Arena*);
template<> ::SerialConfig_Rs232Config* Arena::CreateMaybeMessage<::SerialConfig_Rs232Config>(Arena*);
template<> ::SerialConfig_Rs485Config* Arena::CreateMaybeMessage<::SerialConfig_Rs485Config>(Arena*);
template<> ::SerialResponse* Arena::CreateMaybeMessage<::SerialResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SerialParity : int {
  SerialNone = 0,
  SerialEven = 1,
  SerialODD = 2,
  SerialParity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SerialParity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SerialParity_IsValid(int value);
constexpr SerialParity SerialParity_MIN = SerialNone;
constexpr SerialParity SerialParity_MAX = SerialODD;
constexpr int SerialParity_ARRAYSIZE = SerialParity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SerialParity_descriptor();
template<typename T>
inline const std::string& SerialParity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SerialParity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SerialParity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SerialParity_descriptor(), enum_t_value);
}
inline bool SerialParity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SerialParity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SerialParity>(
    SerialParity_descriptor(), name, value);
}
enum SerialBaudRate : int {
  BS300 = 0,
  BS600 = 1,
  BS1200 = 2,
  BS2400 = 3,
  BS4800 = 4,
  BS9600 = 5,
  BS14400 = 6,
  BS19200 = 7,
  BS38400 = 8,
  BS57600 = 9,
  BS115200 = 10,
  BS230400 = 11,
  BS460800 = 12,
  BS921600 = 13,
  BS1843000 = 14,
  SerialBaudRate_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SerialBaudRate_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SerialBaudRate_IsValid(int value);
constexpr SerialBaudRate SerialBaudRate_MIN = BS300;
constexpr SerialBaudRate SerialBaudRate_MAX = BS1843000;
constexpr int SerialBaudRate_ARRAYSIZE = SerialBaudRate_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SerialBaudRate_descriptor();
template<typename T>
inline const std::string& SerialBaudRate_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SerialBaudRate>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SerialBaudRate_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SerialBaudRate_descriptor(), enum_t_value);
}
inline bool SerialBaudRate_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SerialBaudRate* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SerialBaudRate>(
    SerialBaudRate_descriptor(), name, value);
}
// ===================================================================

class SerialResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerialResponse) */ {
 public:
  inline SerialResponse() : SerialResponse(nullptr) {}
  ~SerialResponse() override;
  explicit constexpr SerialResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerialResponse(const SerialResponse& from);
  SerialResponse(SerialResponse&& from) noexcept
    : SerialResponse() {
    *this = ::std::move(from);
  }

  inline SerialResponse& operator=(const SerialResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerialResponse& operator=(SerialResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerialResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerialResponse* internal_default_instance() {
    return reinterpret_cast<const SerialResponse*>(
               &_SerialResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SerialResponse& a, SerialResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SerialResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerialResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerialResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerialResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerialResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerialResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerialResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerialResponse";
  }
  protected:
  explicit SerialResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorDescFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // string errorDesc = 3;
  void clear_errordesc();
  const std::string& errordesc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errordesc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errordesc();
  PROTOBUF_NODISCARD std::string* release_errordesc();
  void set_allocated_errordesc(std::string* errordesc);
  private:
  const std::string& _internal_errordesc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errordesc(const std::string& value);
  std::string* _internal_mutable_errordesc();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 errorCode = 2;
  void clear_errorcode();
  int32_t errorcode() const;
  void set_errorcode(int32_t value);
  private:
  int32_t _internal_errorcode() const;
  void _internal_set_errorcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SerialResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errordesc_;
  bool success_;
  int32_t errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialconfig_2eproto;
};
// -------------------------------------------------------------------

class SerialConfig_Rs232Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerialConfig.Rs232Config) */ {
 public:
  inline SerialConfig_Rs232Config() : SerialConfig_Rs232Config(nullptr) {}
  ~SerialConfig_Rs232Config() override;
  explicit constexpr SerialConfig_Rs232Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerialConfig_Rs232Config(const SerialConfig_Rs232Config& from);
  SerialConfig_Rs232Config(SerialConfig_Rs232Config&& from) noexcept
    : SerialConfig_Rs232Config() {
    *this = ::std::move(from);
  }

  inline SerialConfig_Rs232Config& operator=(const SerialConfig_Rs232Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerialConfig_Rs232Config& operator=(SerialConfig_Rs232Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerialConfig_Rs232Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerialConfig_Rs232Config* internal_default_instance() {
    return reinterpret_cast<const SerialConfig_Rs232Config*>(
               &_SerialConfig_Rs232Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SerialConfig_Rs232Config& a, SerialConfig_Rs232Config& b) {
    a.Swap(&b);
  }
  inline void Swap(SerialConfig_Rs232Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerialConfig_Rs232Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerialConfig_Rs232Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerialConfig_Rs232Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerialConfig_Rs232Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerialConfig_Rs232Config& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerialConfig_Rs232Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerialConfig.Rs232Config";
  }
  protected:
  explicit SerialConfig_Rs232Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kSerialBaudRateFieldNumber = 2,
    kEndBitFieldNumber = 3,
    kSerialParityFieldNumber = 4,
    kDataBitFieldNumber = 5,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // .SerialBaudRate serialBaudRate = 2;
  void clear_serialbaudrate();
  ::SerialBaudRate serialbaudrate() const;
  void set_serialbaudrate(::SerialBaudRate value);
  private:
  ::SerialBaudRate _internal_serialbaudrate() const;
  void _internal_set_serialbaudrate(::SerialBaudRate value);
  public:

  // int32 endBit = 3;
  void clear_endbit();
  int32_t endbit() const;
  void set_endbit(int32_t value);
  private:
  int32_t _internal_endbit() const;
  void _internal_set_endbit(int32_t value);
  public:

  // .SerialParity serialParity = 4;
  void clear_serialparity();
  ::SerialParity serialparity() const;
  void set_serialparity(::SerialParity value);
  private:
  ::SerialParity _internal_serialparity() const;
  void _internal_set_serialparity(::SerialParity value);
  public:

  // int32 dataBit = 5;
  void clear_databit();
  int32_t databit() const;
  void set_databit(int32_t value);
  private:
  int32_t _internal_databit() const;
  void _internal_set_databit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SerialConfig.Rs232Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enabled_;
  int serialbaudrate_;
  int32_t endbit_;
  int serialparity_;
  int32_t databit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialconfig_2eproto;
};
// -------------------------------------------------------------------

class SerialConfig_Rs485Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerialConfig.Rs485Config) */ {
 public:
  inline SerialConfig_Rs485Config() : SerialConfig_Rs485Config(nullptr) {}
  ~SerialConfig_Rs485Config() override;
  explicit constexpr SerialConfig_Rs485Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerialConfig_Rs485Config(const SerialConfig_Rs485Config& from);
  SerialConfig_Rs485Config(SerialConfig_Rs485Config&& from) noexcept
    : SerialConfig_Rs485Config() {
    *this = ::std::move(from);
  }

  inline SerialConfig_Rs485Config& operator=(const SerialConfig_Rs485Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerialConfig_Rs485Config& operator=(SerialConfig_Rs485Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerialConfig_Rs485Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerialConfig_Rs485Config* internal_default_instance() {
    return reinterpret_cast<const SerialConfig_Rs485Config*>(
               &_SerialConfig_Rs485Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SerialConfig_Rs485Config& a, SerialConfig_Rs485Config& b) {
    a.Swap(&b);
  }
  inline void Swap(SerialConfig_Rs485Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerialConfig_Rs485Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerialConfig_Rs485Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerialConfig_Rs485Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerialConfig_Rs485Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerialConfig_Rs485Config& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerialConfig_Rs485Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerialConfig.Rs485Config";
  }
  protected:
  explicit SerialConfig_Rs485Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kSerialBaudRateFieldNumber = 2,
    kEndBitFieldNumber = 3,
    kSerialParityFieldNumber = 4,
    kDataBitFieldNumber = 5,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // .SerialBaudRate serialBaudRate = 2;
  void clear_serialbaudrate();
  ::SerialBaudRate serialbaudrate() const;
  void set_serialbaudrate(::SerialBaudRate value);
  private:
  ::SerialBaudRate _internal_serialbaudrate() const;
  void _internal_set_serialbaudrate(::SerialBaudRate value);
  public:

  // int32 endBit = 3;
  void clear_endbit();
  int32_t endbit() const;
  void set_endbit(int32_t value);
  private:
  int32_t _internal_endbit() const;
  void _internal_set_endbit(int32_t value);
  public:

  // .SerialParity serialParity = 4;
  void clear_serialparity();
  ::SerialParity serialparity() const;
  void set_serialparity(::SerialParity value);
  private:
  ::SerialParity _internal_serialparity() const;
  void _internal_set_serialparity(::SerialParity value);
  public:

  // int32 dataBit = 5;
  void clear_databit();
  int32_t databit() const;
  void set_databit(int32_t value);
  private:
  int32_t _internal_databit() const;
  void _internal_set_databit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SerialConfig.Rs485Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enabled_;
  int serialbaudrate_;
  int32_t endbit_;
  int serialparity_;
  int32_t databit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialconfig_2eproto;
};
// -------------------------------------------------------------------

class SerialConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerialConfig) */ {
 public:
  inline SerialConfig() : SerialConfig(nullptr) {}
  ~SerialConfig() override;
  explicit constexpr SerialConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerialConfig(const SerialConfig& from);
  SerialConfig(SerialConfig&& from) noexcept
    : SerialConfig() {
    *this = ::std::move(from);
  }

  inline SerialConfig& operator=(const SerialConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerialConfig& operator=(SerialConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerialConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerialConfig* internal_default_instance() {
    return reinterpret_cast<const SerialConfig*>(
               &_SerialConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SerialConfig& a, SerialConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SerialConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerialConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerialConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerialConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerialConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerialConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerialConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerialConfig";
  }
  protected:
  explicit SerialConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SerialConfig_Rs232Config Rs232Config;
  typedef SerialConfig_Rs485Config Rs485Config;

  // accessors -------------------------------------------------------

  enum : int {
    kRs232ConfigFieldNumber = 1,
    kRs485ConfigFieldNumber = 2,
  };
  // .SerialConfig.Rs232Config rs232Config = 1;
  bool has_rs232config() const;
  private:
  bool _internal_has_rs232config() const;
  public:
  void clear_rs232config();
  const ::SerialConfig_Rs232Config& rs232config() const;
  PROTOBUF_NODISCARD ::SerialConfig_Rs232Config* release_rs232config();
  ::SerialConfig_Rs232Config* mutable_rs232config();
  void set_allocated_rs232config(::SerialConfig_Rs232Config* rs232config);
  private:
  const ::SerialConfig_Rs232Config& _internal_rs232config() const;
  ::SerialConfig_Rs232Config* _internal_mutable_rs232config();
  public:
  void unsafe_arena_set_allocated_rs232config(
      ::SerialConfig_Rs232Config* rs232config);
  ::SerialConfig_Rs232Config* unsafe_arena_release_rs232config();

  // .SerialConfig.Rs485Config rs485Config = 2;
  bool has_rs485config() const;
  private:
  bool _internal_has_rs485config() const;
  public:
  void clear_rs485config();
  const ::SerialConfig_Rs485Config& rs485config() const;
  PROTOBUF_NODISCARD ::SerialConfig_Rs485Config* release_rs485config();
  ::SerialConfig_Rs485Config* mutable_rs485config();
  void set_allocated_rs485config(::SerialConfig_Rs485Config* rs485config);
  private:
  const ::SerialConfig_Rs485Config& _internal_rs485config() const;
  ::SerialConfig_Rs485Config* _internal_mutable_rs485config();
  public:
  void unsafe_arena_set_allocated_rs485config(
      ::SerialConfig_Rs485Config* rs485config);
  ::SerialConfig_Rs485Config* unsafe_arena_release_rs485config();

  // @@protoc_insertion_point(class_scope:SerialConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::SerialConfig_Rs232Config* rs232config_;
  ::SerialConfig_Rs485Config* rs485config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SerialResponse

// bool Success = 1;
inline void SerialResponse::clear_success() {
  success_ = false;
}
inline bool SerialResponse::_internal_success() const {
  return success_;
}
inline bool SerialResponse::success() const {
  // @@protoc_insertion_point(field_get:SerialResponse.Success)
  return _internal_success();
}
inline void SerialResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SerialResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:SerialResponse.Success)
}

// int32 errorCode = 2;
inline void SerialResponse::clear_errorcode() {
  errorcode_ = 0;
}
inline int32_t SerialResponse::_internal_errorcode() const {
  return errorcode_;
}
inline int32_t SerialResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:SerialResponse.errorCode)
  return _internal_errorcode();
}
inline void SerialResponse::_internal_set_errorcode(int32_t value) {
  
  errorcode_ = value;
}
inline void SerialResponse::set_errorcode(int32_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:SerialResponse.errorCode)
}

// string errorDesc = 3;
inline void SerialResponse::clear_errordesc() {
  errordesc_.ClearToEmpty();
}
inline const std::string& SerialResponse::errordesc() const {
  // @@protoc_insertion_point(field_get:SerialResponse.errorDesc)
  return _internal_errordesc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SerialResponse::set_errordesc(ArgT0&& arg0, ArgT... args) {
 
 errordesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SerialResponse.errorDesc)
}
inline std::string* SerialResponse::mutable_errordesc() {
  std::string* _s = _internal_mutable_errordesc();
  // @@protoc_insertion_point(field_mutable:SerialResponse.errorDesc)
  return _s;
}
inline const std::string& SerialResponse::_internal_errordesc() const {
  return errordesc_.Get();
}
inline void SerialResponse::_internal_set_errordesc(const std::string& value) {
  
  errordesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SerialResponse::_internal_mutable_errordesc() {
  
  return errordesc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SerialResponse::release_errordesc() {
  // @@protoc_insertion_point(field_release:SerialResponse.errorDesc)
  return errordesc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SerialResponse::set_allocated_errordesc(std::string* errordesc) {
  if (errordesc != nullptr) {
    
  } else {
    
  }
  errordesc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errordesc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errordesc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    errordesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SerialResponse.errorDesc)
}

// -------------------------------------------------------------------

// SerialConfig_Rs232Config

// bool enabled = 1;
inline void SerialConfig_Rs232Config::clear_enabled() {
  enabled_ = false;
}
inline bool SerialConfig_Rs232Config::_internal_enabled() const {
  return enabled_;
}
inline bool SerialConfig_Rs232Config::enabled() const {
  // @@protoc_insertion_point(field_get:SerialConfig.Rs232Config.enabled)
  return _internal_enabled();
}
inline void SerialConfig_Rs232Config::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void SerialConfig_Rs232Config::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:SerialConfig.Rs232Config.enabled)
}

// .SerialBaudRate serialBaudRate = 2;
inline void SerialConfig_Rs232Config::clear_serialbaudrate() {
  serialbaudrate_ = 0;
}
inline ::SerialBaudRate SerialConfig_Rs232Config::_internal_serialbaudrate() const {
  return static_cast< ::SerialBaudRate >(serialbaudrate_);
}
inline ::SerialBaudRate SerialConfig_Rs232Config::serialbaudrate() const {
  // @@protoc_insertion_point(field_get:SerialConfig.Rs232Config.serialBaudRate)
  return _internal_serialbaudrate();
}
inline void SerialConfig_Rs232Config::_internal_set_serialbaudrate(::SerialBaudRate value) {
  
  serialbaudrate_ = value;
}
inline void SerialConfig_Rs232Config::set_serialbaudrate(::SerialBaudRate value) {
  _internal_set_serialbaudrate(value);
  // @@protoc_insertion_point(field_set:SerialConfig.Rs232Config.serialBaudRate)
}

// int32 endBit = 3;
inline void SerialConfig_Rs232Config::clear_endbit() {
  endbit_ = 0;
}
inline int32_t SerialConfig_Rs232Config::_internal_endbit() const {
  return endbit_;
}
inline int32_t SerialConfig_Rs232Config::endbit() const {
  // @@protoc_insertion_point(field_get:SerialConfig.Rs232Config.endBit)
  return _internal_endbit();
}
inline void SerialConfig_Rs232Config::_internal_set_endbit(int32_t value) {
  
  endbit_ = value;
}
inline void SerialConfig_Rs232Config::set_endbit(int32_t value) {
  _internal_set_endbit(value);
  // @@protoc_insertion_point(field_set:SerialConfig.Rs232Config.endBit)
}

// .SerialParity serialParity = 4;
inline void SerialConfig_Rs232Config::clear_serialparity() {
  serialparity_ = 0;
}
inline ::SerialParity SerialConfig_Rs232Config::_internal_serialparity() const {
  return static_cast< ::SerialParity >(serialparity_);
}
inline ::SerialParity SerialConfig_Rs232Config::serialparity() const {
  // @@protoc_insertion_point(field_get:SerialConfig.Rs232Config.serialParity)
  return _internal_serialparity();
}
inline void SerialConfig_Rs232Config::_internal_set_serialparity(::SerialParity value) {
  
  serialparity_ = value;
}
inline void SerialConfig_Rs232Config::set_serialparity(::SerialParity value) {
  _internal_set_serialparity(value);
  // @@protoc_insertion_point(field_set:SerialConfig.Rs232Config.serialParity)
}

// int32 dataBit = 5;
inline void SerialConfig_Rs232Config::clear_databit() {
  databit_ = 0;
}
inline int32_t SerialConfig_Rs232Config::_internal_databit() const {
  return databit_;
}
inline int32_t SerialConfig_Rs232Config::databit() const {
  // @@protoc_insertion_point(field_get:SerialConfig.Rs232Config.dataBit)
  return _internal_databit();
}
inline void SerialConfig_Rs232Config::_internal_set_databit(int32_t value) {
  
  databit_ = value;
}
inline void SerialConfig_Rs232Config::set_databit(int32_t value) {
  _internal_set_databit(value);
  // @@protoc_insertion_point(field_set:SerialConfig.Rs232Config.dataBit)
}

// -------------------------------------------------------------------

// SerialConfig_Rs485Config

// bool enabled = 1;
inline void SerialConfig_Rs485Config::clear_enabled() {
  enabled_ = false;
}
inline bool SerialConfig_Rs485Config::_internal_enabled() const {
  return enabled_;
}
inline bool SerialConfig_Rs485Config::enabled() const {
  // @@protoc_insertion_point(field_get:SerialConfig.Rs485Config.enabled)
  return _internal_enabled();
}
inline void SerialConfig_Rs485Config::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void SerialConfig_Rs485Config::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:SerialConfig.Rs485Config.enabled)
}

// .SerialBaudRate serialBaudRate = 2;
inline void SerialConfig_Rs485Config::clear_serialbaudrate() {
  serialbaudrate_ = 0;
}
inline ::SerialBaudRate SerialConfig_Rs485Config::_internal_serialbaudrate() const {
  return static_cast< ::SerialBaudRate >(serialbaudrate_);
}
inline ::SerialBaudRate SerialConfig_Rs485Config::serialbaudrate() const {
  // @@protoc_insertion_point(field_get:SerialConfig.Rs485Config.serialBaudRate)
  return _internal_serialbaudrate();
}
inline void SerialConfig_Rs485Config::_internal_set_serialbaudrate(::SerialBaudRate value) {
  
  serialbaudrate_ = value;
}
inline void SerialConfig_Rs485Config::set_serialbaudrate(::SerialBaudRate value) {
  _internal_set_serialbaudrate(value);
  // @@protoc_insertion_point(field_set:SerialConfig.Rs485Config.serialBaudRate)
}

// int32 endBit = 3;
inline void SerialConfig_Rs485Config::clear_endbit() {
  endbit_ = 0;
}
inline int32_t SerialConfig_Rs485Config::_internal_endbit() const {
  return endbit_;
}
inline int32_t SerialConfig_Rs485Config::endbit() const {
  // @@protoc_insertion_point(field_get:SerialConfig.Rs485Config.endBit)
  return _internal_endbit();
}
inline void SerialConfig_Rs485Config::_internal_set_endbit(int32_t value) {
  
  endbit_ = value;
}
inline void SerialConfig_Rs485Config::set_endbit(int32_t value) {
  _internal_set_endbit(value);
  // @@protoc_insertion_point(field_set:SerialConfig.Rs485Config.endBit)
}

// .SerialParity serialParity = 4;
inline void SerialConfig_Rs485Config::clear_serialparity() {
  serialparity_ = 0;
}
inline ::SerialParity SerialConfig_Rs485Config::_internal_serialparity() const {
  return static_cast< ::SerialParity >(serialparity_);
}
inline ::SerialParity SerialConfig_Rs485Config::serialparity() const {
  // @@protoc_insertion_point(field_get:SerialConfig.Rs485Config.serialParity)
  return _internal_serialparity();
}
inline void SerialConfig_Rs485Config::_internal_set_serialparity(::SerialParity value) {
  
  serialparity_ = value;
}
inline void SerialConfig_Rs485Config::set_serialparity(::SerialParity value) {
  _internal_set_serialparity(value);
  // @@protoc_insertion_point(field_set:SerialConfig.Rs485Config.serialParity)
}

// int32 dataBit = 5;
inline void SerialConfig_Rs485Config::clear_databit() {
  databit_ = 0;
}
inline int32_t SerialConfig_Rs485Config::_internal_databit() const {
  return databit_;
}
inline int32_t SerialConfig_Rs485Config::databit() const {
  // @@protoc_insertion_point(field_get:SerialConfig.Rs485Config.dataBit)
  return _internal_databit();
}
inline void SerialConfig_Rs485Config::_internal_set_databit(int32_t value) {
  
  databit_ = value;
}
inline void SerialConfig_Rs485Config::set_databit(int32_t value) {
  _internal_set_databit(value);
  // @@protoc_insertion_point(field_set:SerialConfig.Rs485Config.dataBit)
}

// -------------------------------------------------------------------

// SerialConfig

// .SerialConfig.Rs232Config rs232Config = 1;
inline bool SerialConfig::_internal_has_rs232config() const {
  return this != internal_default_instance() && rs232config_ != nullptr;
}
inline bool SerialConfig::has_rs232config() const {
  return _internal_has_rs232config();
}
inline void SerialConfig::clear_rs232config() {
  if (GetArenaForAllocation() == nullptr && rs232config_ != nullptr) {
    delete rs232config_;
  }
  rs232config_ = nullptr;
}
inline const ::SerialConfig_Rs232Config& SerialConfig::_internal_rs232config() const {
  const ::SerialConfig_Rs232Config* p = rs232config_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerialConfig_Rs232Config&>(
      ::_SerialConfig_Rs232Config_default_instance_);
}
inline const ::SerialConfig_Rs232Config& SerialConfig::rs232config() const {
  // @@protoc_insertion_point(field_get:SerialConfig.rs232Config)
  return _internal_rs232config();
}
inline void SerialConfig::unsafe_arena_set_allocated_rs232config(
    ::SerialConfig_Rs232Config* rs232config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rs232config_);
  }
  rs232config_ = rs232config;
  if (rs232config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerialConfig.rs232Config)
}
inline ::SerialConfig_Rs232Config* SerialConfig::release_rs232config() {
  
  ::SerialConfig_Rs232Config* temp = rs232config_;
  rs232config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerialConfig_Rs232Config* SerialConfig::unsafe_arena_release_rs232config() {
  // @@protoc_insertion_point(field_release:SerialConfig.rs232Config)
  
  ::SerialConfig_Rs232Config* temp = rs232config_;
  rs232config_ = nullptr;
  return temp;
}
inline ::SerialConfig_Rs232Config* SerialConfig::_internal_mutable_rs232config() {
  
  if (rs232config_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerialConfig_Rs232Config>(GetArenaForAllocation());
    rs232config_ = p;
  }
  return rs232config_;
}
inline ::SerialConfig_Rs232Config* SerialConfig::mutable_rs232config() {
  ::SerialConfig_Rs232Config* _msg = _internal_mutable_rs232config();
  // @@protoc_insertion_point(field_mutable:SerialConfig.rs232Config)
  return _msg;
}
inline void SerialConfig::set_allocated_rs232config(::SerialConfig_Rs232Config* rs232config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rs232config_;
  }
  if (rs232config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SerialConfig_Rs232Config>::GetOwningArena(rs232config);
    if (message_arena != submessage_arena) {
      rs232config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rs232config, submessage_arena);
    }
    
  } else {
    
  }
  rs232config_ = rs232config;
  // @@protoc_insertion_point(field_set_allocated:SerialConfig.rs232Config)
}

// .SerialConfig.Rs485Config rs485Config = 2;
inline bool SerialConfig::_internal_has_rs485config() const {
  return this != internal_default_instance() && rs485config_ != nullptr;
}
inline bool SerialConfig::has_rs485config() const {
  return _internal_has_rs485config();
}
inline void SerialConfig::clear_rs485config() {
  if (GetArenaForAllocation() == nullptr && rs485config_ != nullptr) {
    delete rs485config_;
  }
  rs485config_ = nullptr;
}
inline const ::SerialConfig_Rs485Config& SerialConfig::_internal_rs485config() const {
  const ::SerialConfig_Rs485Config* p = rs485config_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerialConfig_Rs485Config&>(
      ::_SerialConfig_Rs485Config_default_instance_);
}
inline const ::SerialConfig_Rs485Config& SerialConfig::rs485config() const {
  // @@protoc_insertion_point(field_get:SerialConfig.rs485Config)
  return _internal_rs485config();
}
inline void SerialConfig::unsafe_arena_set_allocated_rs485config(
    ::SerialConfig_Rs485Config* rs485config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rs485config_);
  }
  rs485config_ = rs485config;
  if (rs485config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerialConfig.rs485Config)
}
inline ::SerialConfig_Rs485Config* SerialConfig::release_rs485config() {
  
  ::SerialConfig_Rs485Config* temp = rs485config_;
  rs485config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerialConfig_Rs485Config* SerialConfig::unsafe_arena_release_rs485config() {
  // @@protoc_insertion_point(field_release:SerialConfig.rs485Config)
  
  ::SerialConfig_Rs485Config* temp = rs485config_;
  rs485config_ = nullptr;
  return temp;
}
inline ::SerialConfig_Rs485Config* SerialConfig::_internal_mutable_rs485config() {
  
  if (rs485config_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerialConfig_Rs485Config>(GetArenaForAllocation());
    rs485config_ = p;
  }
  return rs485config_;
}
inline ::SerialConfig_Rs485Config* SerialConfig::mutable_rs485config() {
  ::SerialConfig_Rs485Config* _msg = _internal_mutable_rs485config();
  // @@protoc_insertion_point(field_mutable:SerialConfig.rs485Config)
  return _msg;
}
inline void SerialConfig::set_allocated_rs485config(::SerialConfig_Rs485Config* rs485config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rs485config_;
  }
  if (rs485config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SerialConfig_Rs485Config>::GetOwningArena(rs485config);
    if (message_arena != submessage_arena) {
      rs485config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rs485config, submessage_arena);
    }
    
  } else {
    
  }
  rs485config_ = rs485config;
  // @@protoc_insertion_point(field_set_allocated:SerialConfig.rs485Config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SerialParity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SerialParity>() {
  return ::SerialParity_descriptor();
}
template <> struct is_proto_enum< ::SerialBaudRate> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SerialBaudRate>() {
  return ::SerialBaudRate_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_serialconfig_2eproto
