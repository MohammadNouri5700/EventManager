// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_network_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_2eproto;
class GatewayNetworksConfig;
struct GatewayNetworksConfigDefaultTypeInternal;
extern GatewayNetworksConfigDefaultTypeInternal _GatewayNetworksConfig_default_instance_;
class GatewayNetworksConfig_NetworkDNSConfig;
struct GatewayNetworksConfig_NetworkDNSConfigDefaultTypeInternal;
extern GatewayNetworksConfig_NetworkDNSConfigDefaultTypeInternal _GatewayNetworksConfig_NetworkDNSConfig_default_instance_;
class GatewayNetworksConfig_NetworkIPConfig;
struct GatewayNetworksConfig_NetworkIPConfigDefaultTypeInternal;
extern GatewayNetworksConfig_NetworkIPConfigDefaultTypeInternal _GatewayNetworksConfig_NetworkIPConfig_default_instance_;
class GatewayNetworksConfig_NetworksConfig;
struct GatewayNetworksConfig_NetworksConfigDefaultTypeInternal;
extern GatewayNetworksConfig_NetworksConfigDefaultTypeInternal _GatewayNetworksConfig_NetworksConfig_default_instance_;
class NetworkResponse;
struct NetworkResponseDefaultTypeInternal;
extern NetworkResponseDefaultTypeInternal _NetworkResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GatewayNetworksConfig* Arena::CreateMaybeMessage<::GatewayNetworksConfig>(Arena*);
template<> ::GatewayNetworksConfig_NetworkDNSConfig* Arena::CreateMaybeMessage<::GatewayNetworksConfig_NetworkDNSConfig>(Arena*);
template<> ::GatewayNetworksConfig_NetworkIPConfig* Arena::CreateMaybeMessage<::GatewayNetworksConfig_NetworkIPConfig>(Arena*);
template<> ::GatewayNetworksConfig_NetworksConfig* Arena::CreateMaybeMessage<::GatewayNetworksConfig_NetworksConfig>(Arena*);
template<> ::NetworkResponse* Arena::CreateMaybeMessage<::NetworkResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class NetworkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkResponse) */ {
 public:
  inline NetworkResponse() : NetworkResponse(nullptr) {}
  ~NetworkResponse() override;
  explicit constexpr NetworkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkResponse(const NetworkResponse& from);
  NetworkResponse(NetworkResponse&& from) noexcept
    : NetworkResponse() {
    *this = ::std::move(from);
  }

  inline NetworkResponse& operator=(const NetworkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkResponse& operator=(NetworkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkResponse* internal_default_instance() {
    return reinterpret_cast<const NetworkResponse*>(
               &_NetworkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkResponse& a, NetworkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetworkResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkResponse";
  }
  protected:
  explicit NetworkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorDescFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // string errorDesc = 3;
  void clear_errordesc();
  const std::string& errordesc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errordesc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errordesc();
  PROTOBUF_NODISCARD std::string* release_errordesc();
  void set_allocated_errordesc(std::string* errordesc);
  private:
  const std::string& _internal_errordesc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errordesc(const std::string& value);
  std::string* _internal_mutable_errordesc();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 errorCode = 2;
  void clear_errorcode();
  int32_t errorcode() const;
  void set_errorcode(int32_t value);
  private:
  int32_t _internal_errorcode() const;
  void _internal_set_errorcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NetworkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errordesc_;
  bool success_;
  int32_t errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GatewayNetworksConfig_NetworksConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayNetworksConfig.NetworksConfig) */ {
 public:
  inline GatewayNetworksConfig_NetworksConfig() : GatewayNetworksConfig_NetworksConfig(nullptr) {}
  ~GatewayNetworksConfig_NetworksConfig() override;
  explicit constexpr GatewayNetworksConfig_NetworksConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GatewayNetworksConfig_NetworksConfig(const GatewayNetworksConfig_NetworksConfig& from);
  GatewayNetworksConfig_NetworksConfig(GatewayNetworksConfig_NetworksConfig&& from) noexcept
    : GatewayNetworksConfig_NetworksConfig() {
    *this = ::std::move(from);
  }

  inline GatewayNetworksConfig_NetworksConfig& operator=(const GatewayNetworksConfig_NetworksConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GatewayNetworksConfig_NetworksConfig& operator=(GatewayNetworksConfig_NetworksConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GatewayNetworksConfig_NetworksConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const GatewayNetworksConfig_NetworksConfig* internal_default_instance() {
    return reinterpret_cast<const GatewayNetworksConfig_NetworksConfig*>(
               &_GatewayNetworksConfig_NetworksConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GatewayNetworksConfig_NetworksConfig& a, GatewayNetworksConfig_NetworksConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GatewayNetworksConfig_NetworksConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GatewayNetworksConfig_NetworksConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GatewayNetworksConfig_NetworksConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GatewayNetworksConfig_NetworksConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GatewayNetworksConfig_NetworksConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GatewayNetworksConfig_NetworksConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GatewayNetworksConfig_NetworksConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayNetworksConfig.NetworksConfig";
  }
  protected:
  explicit GatewayNetworksConfig_NetworksConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDhcpEnabledFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // bool dhcpEnabled = 1;
  void clear_dhcpenabled();
  bool dhcpenabled() const;
  void set_dhcpenabled(bool value);
  private:
  bool _internal_dhcpenabled() const;
  void _internal_set_dhcpenabled(bool value);
  public:

  // bool Status = 2;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GatewayNetworksConfig.NetworksConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool dhcpenabled_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GatewayNetworksConfig_NetworkIPConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayNetworksConfig.NetworkIPConfig) */ {
 public:
  inline GatewayNetworksConfig_NetworkIPConfig() : GatewayNetworksConfig_NetworkIPConfig(nullptr) {}
  ~GatewayNetworksConfig_NetworkIPConfig() override;
  explicit constexpr GatewayNetworksConfig_NetworkIPConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GatewayNetworksConfig_NetworkIPConfig(const GatewayNetworksConfig_NetworkIPConfig& from);
  GatewayNetworksConfig_NetworkIPConfig(GatewayNetworksConfig_NetworkIPConfig&& from) noexcept
    : GatewayNetworksConfig_NetworkIPConfig() {
    *this = ::std::move(from);
  }

  inline GatewayNetworksConfig_NetworkIPConfig& operator=(const GatewayNetworksConfig_NetworkIPConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GatewayNetworksConfig_NetworkIPConfig& operator=(GatewayNetworksConfig_NetworkIPConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GatewayNetworksConfig_NetworkIPConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const GatewayNetworksConfig_NetworkIPConfig* internal_default_instance() {
    return reinterpret_cast<const GatewayNetworksConfig_NetworkIPConfig*>(
               &_GatewayNetworksConfig_NetworkIPConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GatewayNetworksConfig_NetworkIPConfig& a, GatewayNetworksConfig_NetworkIPConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GatewayNetworksConfig_NetworkIPConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GatewayNetworksConfig_NetworkIPConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GatewayNetworksConfig_NetworkIPConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GatewayNetworksConfig_NetworkIPConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GatewayNetworksConfig_NetworkIPConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GatewayNetworksConfig_NetworkIPConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GatewayNetworksConfig_NetworkIPConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayNetworksConfig.NetworkIPConfig";
  }
  protected:
  explicit GatewayNetworksConfig_NetworkIPConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetIPFieldNumber = 1,
    kNetMaskFieldNumber = 2,
    kDefaultGateFieldNumber = 3,
  };
  // string netIP = 1;
  void clear_netip();
  const std::string& netip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_netip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_netip();
  PROTOBUF_NODISCARD std::string* release_netip();
  void set_allocated_netip(std::string* netip);
  private:
  const std::string& _internal_netip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_netip(const std::string& value);
  std::string* _internal_mutable_netip();
  public:

  // string netMask = 2;
  void clear_netmask();
  const std::string& netmask() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_netmask(ArgT0&& arg0, ArgT... args);
  std::string* mutable_netmask();
  PROTOBUF_NODISCARD std::string* release_netmask();
  void set_allocated_netmask(std::string* netmask);
  private:
  const std::string& _internal_netmask() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_netmask(const std::string& value);
  std::string* _internal_mutable_netmask();
  public:

  // string defaultGate = 3;
  void clear_defaultgate();
  const std::string& defaultgate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_defaultgate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_defaultgate();
  PROTOBUF_NODISCARD std::string* release_defaultgate();
  void set_allocated_defaultgate(std::string* defaultgate);
  private:
  const std::string& _internal_defaultgate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_defaultgate(const std::string& value);
  std::string* _internal_mutable_defaultgate();
  public:

  // @@protoc_insertion_point(class_scope:GatewayNetworksConfig.NetworkIPConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr netip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr netmask_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr defaultgate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GatewayNetworksConfig_NetworkDNSConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayNetworksConfig.NetworkDNSConfig) */ {
 public:
  inline GatewayNetworksConfig_NetworkDNSConfig() : GatewayNetworksConfig_NetworkDNSConfig(nullptr) {}
  ~GatewayNetworksConfig_NetworkDNSConfig() override;
  explicit constexpr GatewayNetworksConfig_NetworkDNSConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GatewayNetworksConfig_NetworkDNSConfig(const GatewayNetworksConfig_NetworkDNSConfig& from);
  GatewayNetworksConfig_NetworkDNSConfig(GatewayNetworksConfig_NetworkDNSConfig&& from) noexcept
    : GatewayNetworksConfig_NetworkDNSConfig() {
    *this = ::std::move(from);
  }

  inline GatewayNetworksConfig_NetworkDNSConfig& operator=(const GatewayNetworksConfig_NetworkDNSConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GatewayNetworksConfig_NetworkDNSConfig& operator=(GatewayNetworksConfig_NetworkDNSConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GatewayNetworksConfig_NetworkDNSConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const GatewayNetworksConfig_NetworkDNSConfig* internal_default_instance() {
    return reinterpret_cast<const GatewayNetworksConfig_NetworkDNSConfig*>(
               &_GatewayNetworksConfig_NetworkDNSConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GatewayNetworksConfig_NetworkDNSConfig& a, GatewayNetworksConfig_NetworkDNSConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GatewayNetworksConfig_NetworkDNSConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GatewayNetworksConfig_NetworkDNSConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GatewayNetworksConfig_NetworkDNSConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GatewayNetworksConfig_NetworkDNSConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GatewayNetworksConfig_NetworkDNSConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GatewayNetworksConfig_NetworkDNSConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GatewayNetworksConfig_NetworkDNSConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayNetworksConfig.NetworkDNSConfig";
  }
  protected:
  explicit GatewayNetworksConfig_NetworkDNSConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDNSConfigFieldNumber = 1,
  };
  // string DNSConfig = 1;
  void clear_dnsconfig();
  const std::string& dnsconfig() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dnsconfig(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dnsconfig();
  PROTOBUF_NODISCARD std::string* release_dnsconfig();
  void set_allocated_dnsconfig(std::string* dnsconfig);
  private:
  const std::string& _internal_dnsconfig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dnsconfig(const std::string& value);
  std::string* _internal_mutable_dnsconfig();
  public:

  // @@protoc_insertion_point(class_scope:GatewayNetworksConfig.NetworkDNSConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dnsconfig_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GatewayNetworksConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayNetworksConfig) */ {
 public:
  inline GatewayNetworksConfig() : GatewayNetworksConfig(nullptr) {}
  ~GatewayNetworksConfig() override;
  explicit constexpr GatewayNetworksConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GatewayNetworksConfig(const GatewayNetworksConfig& from);
  GatewayNetworksConfig(GatewayNetworksConfig&& from) noexcept
    : GatewayNetworksConfig() {
    *this = ::std::move(from);
  }

  inline GatewayNetworksConfig& operator=(const GatewayNetworksConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GatewayNetworksConfig& operator=(GatewayNetworksConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GatewayNetworksConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const GatewayNetworksConfig* internal_default_instance() {
    return reinterpret_cast<const GatewayNetworksConfig*>(
               &_GatewayNetworksConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GatewayNetworksConfig& a, GatewayNetworksConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GatewayNetworksConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GatewayNetworksConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GatewayNetworksConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GatewayNetworksConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GatewayNetworksConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GatewayNetworksConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GatewayNetworksConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayNetworksConfig";
  }
  protected:
  explicit GatewayNetworksConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GatewayNetworksConfig_NetworksConfig NetworksConfig;
  typedef GatewayNetworksConfig_NetworkIPConfig NetworkIPConfig;
  typedef GatewayNetworksConfig_NetworkDNSConfig NetworkDNSConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkIPConfigFieldNumber = 1,
    kNetworkDNSConfigFieldNumber = 2,
    kOTNetworkConfigFieldNumber = 3,
  };
  // repeated .GatewayNetworksConfig.NetworkIPConfig networkIPConfig = 1;
  int networkipconfig_size() const;
  private:
  int _internal_networkipconfig_size() const;
  public:
  void clear_networkipconfig();
  ::GatewayNetworksConfig_NetworkIPConfig* mutable_networkipconfig(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GatewayNetworksConfig_NetworkIPConfig >*
      mutable_networkipconfig();
  private:
  const ::GatewayNetworksConfig_NetworkIPConfig& _internal_networkipconfig(int index) const;
  ::GatewayNetworksConfig_NetworkIPConfig* _internal_add_networkipconfig();
  public:
  const ::GatewayNetworksConfig_NetworkIPConfig& networkipconfig(int index) const;
  ::GatewayNetworksConfig_NetworkIPConfig* add_networkipconfig();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GatewayNetworksConfig_NetworkIPConfig >&
      networkipconfig() const;

  // repeated .GatewayNetworksConfig.NetworkDNSConfig networkDNSConfig = 2;
  int networkdnsconfig_size() const;
  private:
  int _internal_networkdnsconfig_size() const;
  public:
  void clear_networkdnsconfig();
  ::GatewayNetworksConfig_NetworkDNSConfig* mutable_networkdnsconfig(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GatewayNetworksConfig_NetworkDNSConfig >*
      mutable_networkdnsconfig();
  private:
  const ::GatewayNetworksConfig_NetworkDNSConfig& _internal_networkdnsconfig(int index) const;
  ::GatewayNetworksConfig_NetworkDNSConfig* _internal_add_networkdnsconfig();
  public:
  const ::GatewayNetworksConfig_NetworkDNSConfig& networkdnsconfig(int index) const;
  ::GatewayNetworksConfig_NetworkDNSConfig* add_networkdnsconfig();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GatewayNetworksConfig_NetworkDNSConfig >&
      networkdnsconfig() const;

  // .GatewayNetworksConfig.NetworksConfig OTNetworkConfig = 3;
  bool has_otnetworkconfig() const;
  private:
  bool _internal_has_otnetworkconfig() const;
  public:
  void clear_otnetworkconfig();
  const ::GatewayNetworksConfig_NetworksConfig& otnetworkconfig() const;
  PROTOBUF_NODISCARD ::GatewayNetworksConfig_NetworksConfig* release_otnetworkconfig();
  ::GatewayNetworksConfig_NetworksConfig* mutable_otnetworkconfig();
  void set_allocated_otnetworkconfig(::GatewayNetworksConfig_NetworksConfig* otnetworkconfig);
  private:
  const ::GatewayNetworksConfig_NetworksConfig& _internal_otnetworkconfig() const;
  ::GatewayNetworksConfig_NetworksConfig* _internal_mutable_otnetworkconfig();
  public:
  void unsafe_arena_set_allocated_otnetworkconfig(
      ::GatewayNetworksConfig_NetworksConfig* otnetworkconfig);
  ::GatewayNetworksConfig_NetworksConfig* unsafe_arena_release_otnetworkconfig();

  // @@protoc_insertion_point(class_scope:GatewayNetworksConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GatewayNetworksConfig_NetworkIPConfig > networkipconfig_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GatewayNetworksConfig_NetworkDNSConfig > networkdnsconfig_;
  ::GatewayNetworksConfig_NetworksConfig* otnetworkconfig_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkResponse

// bool Success = 1;
inline void NetworkResponse::clear_success() {
  success_ = false;
}
inline bool NetworkResponse::_internal_success() const {
  return success_;
}
inline bool NetworkResponse::success() const {
  // @@protoc_insertion_point(field_get:NetworkResponse.Success)
  return _internal_success();
}
inline void NetworkResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void NetworkResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:NetworkResponse.Success)
}

// int32 errorCode = 2;
inline void NetworkResponse::clear_errorcode() {
  errorcode_ = 0;
}
inline int32_t NetworkResponse::_internal_errorcode() const {
  return errorcode_;
}
inline int32_t NetworkResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:NetworkResponse.errorCode)
  return _internal_errorcode();
}
inline void NetworkResponse::_internal_set_errorcode(int32_t value) {
  
  errorcode_ = value;
}
inline void NetworkResponse::set_errorcode(int32_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:NetworkResponse.errorCode)
}

// string errorDesc = 3;
inline void NetworkResponse::clear_errordesc() {
  errordesc_.ClearToEmpty();
}
inline const std::string& NetworkResponse::errordesc() const {
  // @@protoc_insertion_point(field_get:NetworkResponse.errorDesc)
  return _internal_errordesc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkResponse::set_errordesc(ArgT0&& arg0, ArgT... args) {
 
 errordesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetworkResponse.errorDesc)
}
inline std::string* NetworkResponse::mutable_errordesc() {
  std::string* _s = _internal_mutable_errordesc();
  // @@protoc_insertion_point(field_mutable:NetworkResponse.errorDesc)
  return _s;
}
inline const std::string& NetworkResponse::_internal_errordesc() const {
  return errordesc_.Get();
}
inline void NetworkResponse::_internal_set_errordesc(const std::string& value) {
  
  errordesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NetworkResponse::_internal_mutable_errordesc() {
  
  return errordesc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NetworkResponse::release_errordesc() {
  // @@protoc_insertion_point(field_release:NetworkResponse.errorDesc)
  return errordesc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NetworkResponse::set_allocated_errordesc(std::string* errordesc) {
  if (errordesc != nullptr) {
    
  } else {
    
  }
  errordesc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errordesc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errordesc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    errordesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetworkResponse.errorDesc)
}

// -------------------------------------------------------------------

// GatewayNetworksConfig_NetworksConfig

// bool dhcpEnabled = 1;
inline void GatewayNetworksConfig_NetworksConfig::clear_dhcpenabled() {
  dhcpenabled_ = false;
}
inline bool GatewayNetworksConfig_NetworksConfig::_internal_dhcpenabled() const {
  return dhcpenabled_;
}
inline bool GatewayNetworksConfig_NetworksConfig::dhcpenabled() const {
  // @@protoc_insertion_point(field_get:GatewayNetworksConfig.NetworksConfig.dhcpEnabled)
  return _internal_dhcpenabled();
}
inline void GatewayNetworksConfig_NetworksConfig::_internal_set_dhcpenabled(bool value) {
  
  dhcpenabled_ = value;
}
inline void GatewayNetworksConfig_NetworksConfig::set_dhcpenabled(bool value) {
  _internal_set_dhcpenabled(value);
  // @@protoc_insertion_point(field_set:GatewayNetworksConfig.NetworksConfig.dhcpEnabled)
}

// bool Status = 2;
inline void GatewayNetworksConfig_NetworksConfig::clear_status() {
  status_ = false;
}
inline bool GatewayNetworksConfig_NetworksConfig::_internal_status() const {
  return status_;
}
inline bool GatewayNetworksConfig_NetworksConfig::status() const {
  // @@protoc_insertion_point(field_get:GatewayNetworksConfig.NetworksConfig.Status)
  return _internal_status();
}
inline void GatewayNetworksConfig_NetworksConfig::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void GatewayNetworksConfig_NetworksConfig::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GatewayNetworksConfig.NetworksConfig.Status)
}

// -------------------------------------------------------------------

// GatewayNetworksConfig_NetworkIPConfig

// string netIP = 1;
inline void GatewayNetworksConfig_NetworkIPConfig::clear_netip() {
  netip_.ClearToEmpty();
}
inline const std::string& GatewayNetworksConfig_NetworkIPConfig::netip() const {
  // @@protoc_insertion_point(field_get:GatewayNetworksConfig.NetworkIPConfig.netIP)
  return _internal_netip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GatewayNetworksConfig_NetworkIPConfig::set_netip(ArgT0&& arg0, ArgT... args) {
 
 netip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GatewayNetworksConfig.NetworkIPConfig.netIP)
}
inline std::string* GatewayNetworksConfig_NetworkIPConfig::mutable_netip() {
  std::string* _s = _internal_mutable_netip();
  // @@protoc_insertion_point(field_mutable:GatewayNetworksConfig.NetworkIPConfig.netIP)
  return _s;
}
inline const std::string& GatewayNetworksConfig_NetworkIPConfig::_internal_netip() const {
  return netip_.Get();
}
inline void GatewayNetworksConfig_NetworkIPConfig::_internal_set_netip(const std::string& value) {
  
  netip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GatewayNetworksConfig_NetworkIPConfig::_internal_mutable_netip() {
  
  return netip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GatewayNetworksConfig_NetworkIPConfig::release_netip() {
  // @@protoc_insertion_point(field_release:GatewayNetworksConfig.NetworkIPConfig.netIP)
  return netip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GatewayNetworksConfig_NetworkIPConfig::set_allocated_netip(std::string* netip) {
  if (netip != nullptr) {
    
  } else {
    
  }
  netip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), netip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (netip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    netip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GatewayNetworksConfig.NetworkIPConfig.netIP)
}

// string netMask = 2;
inline void GatewayNetworksConfig_NetworkIPConfig::clear_netmask() {
  netmask_.ClearToEmpty();
}
inline const std::string& GatewayNetworksConfig_NetworkIPConfig::netmask() const {
  // @@protoc_insertion_point(field_get:GatewayNetworksConfig.NetworkIPConfig.netMask)
  return _internal_netmask();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GatewayNetworksConfig_NetworkIPConfig::set_netmask(ArgT0&& arg0, ArgT... args) {
 
 netmask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GatewayNetworksConfig.NetworkIPConfig.netMask)
}
inline std::string* GatewayNetworksConfig_NetworkIPConfig::mutable_netmask() {
  std::string* _s = _internal_mutable_netmask();
  // @@protoc_insertion_point(field_mutable:GatewayNetworksConfig.NetworkIPConfig.netMask)
  return _s;
}
inline const std::string& GatewayNetworksConfig_NetworkIPConfig::_internal_netmask() const {
  return netmask_.Get();
}
inline void GatewayNetworksConfig_NetworkIPConfig::_internal_set_netmask(const std::string& value) {
  
  netmask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GatewayNetworksConfig_NetworkIPConfig::_internal_mutable_netmask() {
  
  return netmask_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GatewayNetworksConfig_NetworkIPConfig::release_netmask() {
  // @@protoc_insertion_point(field_release:GatewayNetworksConfig.NetworkIPConfig.netMask)
  return netmask_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GatewayNetworksConfig_NetworkIPConfig::set_allocated_netmask(std::string* netmask) {
  if (netmask != nullptr) {
    
  } else {
    
  }
  netmask_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), netmask,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (netmask_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    netmask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GatewayNetworksConfig.NetworkIPConfig.netMask)
}

// string defaultGate = 3;
inline void GatewayNetworksConfig_NetworkIPConfig::clear_defaultgate() {
  defaultgate_.ClearToEmpty();
}
inline const std::string& GatewayNetworksConfig_NetworkIPConfig::defaultgate() const {
  // @@protoc_insertion_point(field_get:GatewayNetworksConfig.NetworkIPConfig.defaultGate)
  return _internal_defaultgate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GatewayNetworksConfig_NetworkIPConfig::set_defaultgate(ArgT0&& arg0, ArgT... args) {
 
 defaultgate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GatewayNetworksConfig.NetworkIPConfig.defaultGate)
}
inline std::string* GatewayNetworksConfig_NetworkIPConfig::mutable_defaultgate() {
  std::string* _s = _internal_mutable_defaultgate();
  // @@protoc_insertion_point(field_mutable:GatewayNetworksConfig.NetworkIPConfig.defaultGate)
  return _s;
}
inline const std::string& GatewayNetworksConfig_NetworkIPConfig::_internal_defaultgate() const {
  return defaultgate_.Get();
}
inline void GatewayNetworksConfig_NetworkIPConfig::_internal_set_defaultgate(const std::string& value) {
  
  defaultgate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GatewayNetworksConfig_NetworkIPConfig::_internal_mutable_defaultgate() {
  
  return defaultgate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GatewayNetworksConfig_NetworkIPConfig::release_defaultgate() {
  // @@protoc_insertion_point(field_release:GatewayNetworksConfig.NetworkIPConfig.defaultGate)
  return defaultgate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GatewayNetworksConfig_NetworkIPConfig::set_allocated_defaultgate(std::string* defaultgate) {
  if (defaultgate != nullptr) {
    
  } else {
    
  }
  defaultgate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), defaultgate,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (defaultgate_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    defaultgate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GatewayNetworksConfig.NetworkIPConfig.defaultGate)
}

// -------------------------------------------------------------------

// GatewayNetworksConfig_NetworkDNSConfig

// string DNSConfig = 1;
inline void GatewayNetworksConfig_NetworkDNSConfig::clear_dnsconfig() {
  dnsconfig_.ClearToEmpty();
}
inline const std::string& GatewayNetworksConfig_NetworkDNSConfig::dnsconfig() const {
  // @@protoc_insertion_point(field_get:GatewayNetworksConfig.NetworkDNSConfig.DNSConfig)
  return _internal_dnsconfig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GatewayNetworksConfig_NetworkDNSConfig::set_dnsconfig(ArgT0&& arg0, ArgT... args) {
 
 dnsconfig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GatewayNetworksConfig.NetworkDNSConfig.DNSConfig)
}
inline std::string* GatewayNetworksConfig_NetworkDNSConfig::mutable_dnsconfig() {
  std::string* _s = _internal_mutable_dnsconfig();
  // @@protoc_insertion_point(field_mutable:GatewayNetworksConfig.NetworkDNSConfig.DNSConfig)
  return _s;
}
inline const std::string& GatewayNetworksConfig_NetworkDNSConfig::_internal_dnsconfig() const {
  return dnsconfig_.Get();
}
inline void GatewayNetworksConfig_NetworkDNSConfig::_internal_set_dnsconfig(const std::string& value) {
  
  dnsconfig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GatewayNetworksConfig_NetworkDNSConfig::_internal_mutable_dnsconfig() {
  
  return dnsconfig_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GatewayNetworksConfig_NetworkDNSConfig::release_dnsconfig() {
  // @@protoc_insertion_point(field_release:GatewayNetworksConfig.NetworkDNSConfig.DNSConfig)
  return dnsconfig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GatewayNetworksConfig_NetworkDNSConfig::set_allocated_dnsconfig(std::string* dnsconfig) {
  if (dnsconfig != nullptr) {
    
  } else {
    
  }
  dnsconfig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dnsconfig,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dnsconfig_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dnsconfig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GatewayNetworksConfig.NetworkDNSConfig.DNSConfig)
}

// -------------------------------------------------------------------

// GatewayNetworksConfig

// repeated .GatewayNetworksConfig.NetworkIPConfig networkIPConfig = 1;
inline int GatewayNetworksConfig::_internal_networkipconfig_size() const {
  return networkipconfig_.size();
}
inline int GatewayNetworksConfig::networkipconfig_size() const {
  return _internal_networkipconfig_size();
}
inline void GatewayNetworksConfig::clear_networkipconfig() {
  networkipconfig_.Clear();
}
inline ::GatewayNetworksConfig_NetworkIPConfig* GatewayNetworksConfig::mutable_networkipconfig(int index) {
  // @@protoc_insertion_point(field_mutable:GatewayNetworksConfig.networkIPConfig)
  return networkipconfig_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GatewayNetworksConfig_NetworkIPConfig >*
GatewayNetworksConfig::mutable_networkipconfig() {
  // @@protoc_insertion_point(field_mutable_list:GatewayNetworksConfig.networkIPConfig)
  return &networkipconfig_;
}
inline const ::GatewayNetworksConfig_NetworkIPConfig& GatewayNetworksConfig::_internal_networkipconfig(int index) const {
  return networkipconfig_.Get(index);
}
inline const ::GatewayNetworksConfig_NetworkIPConfig& GatewayNetworksConfig::networkipconfig(int index) const {
  // @@protoc_insertion_point(field_get:GatewayNetworksConfig.networkIPConfig)
  return _internal_networkipconfig(index);
}
inline ::GatewayNetworksConfig_NetworkIPConfig* GatewayNetworksConfig::_internal_add_networkipconfig() {
  return networkipconfig_.Add();
}
inline ::GatewayNetworksConfig_NetworkIPConfig* GatewayNetworksConfig::add_networkipconfig() {
  ::GatewayNetworksConfig_NetworkIPConfig* _add = _internal_add_networkipconfig();
  // @@protoc_insertion_point(field_add:GatewayNetworksConfig.networkIPConfig)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GatewayNetworksConfig_NetworkIPConfig >&
GatewayNetworksConfig::networkipconfig() const {
  // @@protoc_insertion_point(field_list:GatewayNetworksConfig.networkIPConfig)
  return networkipconfig_;
}

// repeated .GatewayNetworksConfig.NetworkDNSConfig networkDNSConfig = 2;
inline int GatewayNetworksConfig::_internal_networkdnsconfig_size() const {
  return networkdnsconfig_.size();
}
inline int GatewayNetworksConfig::networkdnsconfig_size() const {
  return _internal_networkdnsconfig_size();
}
inline void GatewayNetworksConfig::clear_networkdnsconfig() {
  networkdnsconfig_.Clear();
}
inline ::GatewayNetworksConfig_NetworkDNSConfig* GatewayNetworksConfig::mutable_networkdnsconfig(int index) {
  // @@protoc_insertion_point(field_mutable:GatewayNetworksConfig.networkDNSConfig)
  return networkdnsconfig_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GatewayNetworksConfig_NetworkDNSConfig >*
GatewayNetworksConfig::mutable_networkdnsconfig() {
  // @@protoc_insertion_point(field_mutable_list:GatewayNetworksConfig.networkDNSConfig)
  return &networkdnsconfig_;
}
inline const ::GatewayNetworksConfig_NetworkDNSConfig& GatewayNetworksConfig::_internal_networkdnsconfig(int index) const {
  return networkdnsconfig_.Get(index);
}
inline const ::GatewayNetworksConfig_NetworkDNSConfig& GatewayNetworksConfig::networkdnsconfig(int index) const {
  // @@protoc_insertion_point(field_get:GatewayNetworksConfig.networkDNSConfig)
  return _internal_networkdnsconfig(index);
}
inline ::GatewayNetworksConfig_NetworkDNSConfig* GatewayNetworksConfig::_internal_add_networkdnsconfig() {
  return networkdnsconfig_.Add();
}
inline ::GatewayNetworksConfig_NetworkDNSConfig* GatewayNetworksConfig::add_networkdnsconfig() {
  ::GatewayNetworksConfig_NetworkDNSConfig* _add = _internal_add_networkdnsconfig();
  // @@protoc_insertion_point(field_add:GatewayNetworksConfig.networkDNSConfig)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GatewayNetworksConfig_NetworkDNSConfig >&
GatewayNetworksConfig::networkdnsconfig() const {
  // @@protoc_insertion_point(field_list:GatewayNetworksConfig.networkDNSConfig)
  return networkdnsconfig_;
}

// .GatewayNetworksConfig.NetworksConfig OTNetworkConfig = 3;
inline bool GatewayNetworksConfig::_internal_has_otnetworkconfig() const {
  return this != internal_default_instance() && otnetworkconfig_ != nullptr;
}
inline bool GatewayNetworksConfig::has_otnetworkconfig() const {
  return _internal_has_otnetworkconfig();
}
inline void GatewayNetworksConfig::clear_otnetworkconfig() {
  if (GetArenaForAllocation() == nullptr && otnetworkconfig_ != nullptr) {
    delete otnetworkconfig_;
  }
  otnetworkconfig_ = nullptr;
}
inline const ::GatewayNetworksConfig_NetworksConfig& GatewayNetworksConfig::_internal_otnetworkconfig() const {
  const ::GatewayNetworksConfig_NetworksConfig* p = otnetworkconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::GatewayNetworksConfig_NetworksConfig&>(
      ::_GatewayNetworksConfig_NetworksConfig_default_instance_);
}
inline const ::GatewayNetworksConfig_NetworksConfig& GatewayNetworksConfig::otnetworkconfig() const {
  // @@protoc_insertion_point(field_get:GatewayNetworksConfig.OTNetworkConfig)
  return _internal_otnetworkconfig();
}
inline void GatewayNetworksConfig::unsafe_arena_set_allocated_otnetworkconfig(
    ::GatewayNetworksConfig_NetworksConfig* otnetworkconfig) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(otnetworkconfig_);
  }
  otnetworkconfig_ = otnetworkconfig;
  if (otnetworkconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayNetworksConfig.OTNetworkConfig)
}
inline ::GatewayNetworksConfig_NetworksConfig* GatewayNetworksConfig::release_otnetworkconfig() {
  
  ::GatewayNetworksConfig_NetworksConfig* temp = otnetworkconfig_;
  otnetworkconfig_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GatewayNetworksConfig_NetworksConfig* GatewayNetworksConfig::unsafe_arena_release_otnetworkconfig() {
  // @@protoc_insertion_point(field_release:GatewayNetworksConfig.OTNetworkConfig)
  
  ::GatewayNetworksConfig_NetworksConfig* temp = otnetworkconfig_;
  otnetworkconfig_ = nullptr;
  return temp;
}
inline ::GatewayNetworksConfig_NetworksConfig* GatewayNetworksConfig::_internal_mutable_otnetworkconfig() {
  
  if (otnetworkconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayNetworksConfig_NetworksConfig>(GetArenaForAllocation());
    otnetworkconfig_ = p;
  }
  return otnetworkconfig_;
}
inline ::GatewayNetworksConfig_NetworksConfig* GatewayNetworksConfig::mutable_otnetworkconfig() {
  ::GatewayNetworksConfig_NetworksConfig* _msg = _internal_mutable_otnetworkconfig();
  // @@protoc_insertion_point(field_mutable:GatewayNetworksConfig.OTNetworkConfig)
  return _msg;
}
inline void GatewayNetworksConfig::set_allocated_otnetworkconfig(::GatewayNetworksConfig_NetworksConfig* otnetworkconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete otnetworkconfig_;
  }
  if (otnetworkconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::GatewayNetworksConfig_NetworksConfig>::GetOwningArena(otnetworkconfig);
    if (message_arena != submessage_arena) {
      otnetworkconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, otnetworkconfig, submessage_arena);
    }
    
  } else {
    
  }
  otnetworkconfig_ = otnetworkconfig;
  // @@protoc_insertion_point(field_set_allocated:GatewayNetworksConfig.OTNetworkConfig)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_2eproto
