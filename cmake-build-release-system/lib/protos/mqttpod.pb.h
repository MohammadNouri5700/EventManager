// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mqttpod.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mqttpod_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mqttpod_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mqttpod_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mqttpod_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mqttpod_2eproto;
class MqttPodNode;
struct MqttPodNodeDefaultTypeInternal;
extern MqttPodNodeDefaultTypeInternal _MqttPodNode_default_instance_;
class MqttPodNode_Attributes;
struct MqttPodNode_AttributesDefaultTypeInternal;
extern MqttPodNode_AttributesDefaultTypeInternal _MqttPodNode_Attributes_default_instance_;
class MqttPodNode_Tags;
struct MqttPodNode_TagsDefaultTypeInternal;
extern MqttPodNode_TagsDefaultTypeInternal _MqttPodNode_Tags_default_instance_;
class PodResponse;
struct PodResponseDefaultTypeInternal;
extern PodResponseDefaultTypeInternal _PodResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MqttPodNode* Arena::CreateMaybeMessage<::MqttPodNode>(Arena*);
template<> ::MqttPodNode_Attributes* Arena::CreateMaybeMessage<::MqttPodNode_Attributes>(Arena*);
template<> ::MqttPodNode_Tags* Arena::CreateMaybeMessage<::MqttPodNode_Tags>(Arena*);
template<> ::PodResponse* Arena::CreateMaybeMessage<::PodResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PodResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PodResponse) */ {
 public:
  inline PodResponse() : PodResponse(nullptr) {}
  ~PodResponse() override;
  explicit constexpr PodResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PodResponse(const PodResponse& from);
  PodResponse(PodResponse&& from) noexcept
    : PodResponse() {
    *this = ::std::move(from);
  }

  inline PodResponse& operator=(const PodResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PodResponse& operator=(PodResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PodResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PodResponse* internal_default_instance() {
    return reinterpret_cast<const PodResponse*>(
               &_PodResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PodResponse& a, PodResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PodResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PodResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PodResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PodResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PodResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PodResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PodResponse";
  }
  protected:
  explicit PodResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorDescFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // string errorDesc = 3;
  void clear_errordesc();
  const std::string& errordesc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errordesc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errordesc();
  PROTOBUF_NODISCARD std::string* release_errordesc();
  void set_allocated_errordesc(std::string* errordesc);
  private:
  const std::string& _internal_errordesc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errordesc(const std::string& value);
  std::string* _internal_mutable_errordesc();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 errorCode = 2;
  void clear_errorcode();
  int32_t errorcode() const;
  void set_errorcode(int32_t value);
  private:
  int32_t _internal_errorcode() const;
  void _internal_set_errorcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PodResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errordesc_;
  bool success_;
  int32_t errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mqttpod_2eproto;
};
// -------------------------------------------------------------------

class MqttPodNode_Attributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MqttPodNode.Attributes) */ {
 public:
  inline MqttPodNode_Attributes() : MqttPodNode_Attributes(nullptr) {}
  ~MqttPodNode_Attributes() override;
  explicit constexpr MqttPodNode_Attributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MqttPodNode_Attributes(const MqttPodNode_Attributes& from);
  MqttPodNode_Attributes(MqttPodNode_Attributes&& from) noexcept
    : MqttPodNode_Attributes() {
    *this = ::std::move(from);
  }

  inline MqttPodNode_Attributes& operator=(const MqttPodNode_Attributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MqttPodNode_Attributes& operator=(MqttPodNode_Attributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MqttPodNode_Attributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const MqttPodNode_Attributes* internal_default_instance() {
    return reinterpret_cast<const MqttPodNode_Attributes*>(
               &_MqttPodNode_Attributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MqttPodNode_Attributes& a, MqttPodNode_Attributes& b) {
    a.Swap(&b);
  }
  inline void Swap(MqttPodNode_Attributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MqttPodNode_Attributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MqttPodNode_Attributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MqttPodNode_Attributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MqttPodNode_Attributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MqttPodNode_Attributes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MqttPodNode_Attributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MqttPodNode.Attributes";
  }
  protected:
  explicit MqttPodNode_Attributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribNameFieldNumber = 1,
    kAttribValueFieldNumber = 2,
  };
  // string AttribName = 1;
  void clear_attribname();
  const std::string& attribname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attribname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attribname();
  PROTOBUF_NODISCARD std::string* release_attribname();
  void set_allocated_attribname(std::string* attribname);
  private:
  const std::string& _internal_attribname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attribname(const std::string& value);
  std::string* _internal_mutable_attribname();
  public:

  // string AttribValue = 2;
  void clear_attribvalue();
  const std::string& attribvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attribvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attribvalue();
  PROTOBUF_NODISCARD std::string* release_attribvalue();
  void set_allocated_attribvalue(std::string* attribvalue);
  private:
  const std::string& _internal_attribvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attribvalue(const std::string& value);
  std::string* _internal_mutable_attribvalue();
  public:

  // @@protoc_insertion_point(class_scope:MqttPodNode.Attributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attribname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attribvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mqttpod_2eproto;
};
// -------------------------------------------------------------------

class MqttPodNode_Tags final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MqttPodNode.Tags) */ {
 public:
  inline MqttPodNode_Tags() : MqttPodNode_Tags(nullptr) {}
  ~MqttPodNode_Tags() override;
  explicit constexpr MqttPodNode_Tags(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MqttPodNode_Tags(const MqttPodNode_Tags& from);
  MqttPodNode_Tags(MqttPodNode_Tags&& from) noexcept
    : MqttPodNode_Tags() {
    *this = ::std::move(from);
  }

  inline MqttPodNode_Tags& operator=(const MqttPodNode_Tags& from) {
    CopyFrom(from);
    return *this;
  }
  inline MqttPodNode_Tags& operator=(MqttPodNode_Tags&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MqttPodNode_Tags& default_instance() {
    return *internal_default_instance();
  }
  static inline const MqttPodNode_Tags* internal_default_instance() {
    return reinterpret_cast<const MqttPodNode_Tags*>(
               &_MqttPodNode_Tags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MqttPodNode_Tags& a, MqttPodNode_Tags& b) {
    a.Swap(&b);
  }
  inline void Swap(MqttPodNode_Tags* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MqttPodNode_Tags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MqttPodNode_Tags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MqttPodNode_Tags>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MqttPodNode_Tags& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MqttPodNode_Tags& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MqttPodNode_Tags* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MqttPodNode.Tags";
  }
  protected:
  explicit MqttPodNode_Tags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kLocationFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string location = 2;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // @@protoc_insertion_point(class_scope:MqttPodNode.Tags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mqttpod_2eproto;
};
// -------------------------------------------------------------------

class MqttPodNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MqttPodNode) */ {
 public:
  inline MqttPodNode() : MqttPodNode(nullptr) {}
  ~MqttPodNode() override;
  explicit constexpr MqttPodNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MqttPodNode(const MqttPodNode& from);
  MqttPodNode(MqttPodNode&& from) noexcept
    : MqttPodNode() {
    *this = ::std::move(from);
  }

  inline MqttPodNode& operator=(const MqttPodNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MqttPodNode& operator=(MqttPodNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MqttPodNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const MqttPodNode* internal_default_instance() {
    return reinterpret_cast<const MqttPodNode*>(
               &_MqttPodNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MqttPodNode& a, MqttPodNode& b) {
    a.Swap(&b);
  }
  inline void Swap(MqttPodNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MqttPodNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MqttPodNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MqttPodNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MqttPodNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MqttPodNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MqttPodNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MqttPodNode";
  }
  protected:
  explicit MqttPodNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MqttPodNode_Attributes Attributes;
  typedef MqttPodNode_Tags Tags;

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 7,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kClientIdFieldNumber = 3,
    kAlternativeClientIdFieldNumber = 4,
    kDeviceTypeIdFieldNumber = 5,
    kDeviceTypeNameFieldNumber = 6,
    kOwnerFieldNumber = 9,
    kTagsFieldNumber = 8,
  };
  // repeated .MqttPodNode.Attributes attributes = 7;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::MqttPodNode_Attributes* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttPodNode_Attributes >*
      mutable_attributes();
  private:
  const ::MqttPodNode_Attributes& _internal_attributes(int index) const;
  ::MqttPodNode_Attributes* _internal_add_attributes();
  public:
  const ::MqttPodNode_Attributes& attributes(int index) const;
  ::MqttPodNode_Attributes* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttPodNode_Attributes >&
      attributes() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string clientId = 3;
  void clear_clientid();
  const std::string& clientid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientid();
  PROTOBUF_NODISCARD std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // string alternativeClientId = 4;
  void clear_alternativeclientid();
  const std::string& alternativeclientid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alternativeclientid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alternativeclientid();
  PROTOBUF_NODISCARD std::string* release_alternativeclientid();
  void set_allocated_alternativeclientid(std::string* alternativeclientid);
  private:
  const std::string& _internal_alternativeclientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alternativeclientid(const std::string& value);
  std::string* _internal_mutable_alternativeclientid();
  public:

  // string deviceTypeId = 5;
  void clear_devicetypeid();
  const std::string& devicetypeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicetypeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicetypeid();
  PROTOBUF_NODISCARD std::string* release_devicetypeid();
  void set_allocated_devicetypeid(std::string* devicetypeid);
  private:
  const std::string& _internal_devicetypeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicetypeid(const std::string& value);
  std::string* _internal_mutable_devicetypeid();
  public:

  // string deviceTypeName = 6;
  void clear_devicetypename();
  const std::string& devicetypename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicetypename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicetypename();
  PROTOBUF_NODISCARD std::string* release_devicetypename();
  void set_allocated_devicetypename(std::string* devicetypename);
  private:
  const std::string& _internal_devicetypename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicetypename(const std::string& value);
  std::string* _internal_mutable_devicetypename();
  public:

  // string owner = 9;
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // .MqttPodNode.Tags tags = 8;
  bool has_tags() const;
  private:
  bool _internal_has_tags() const;
  public:
  void clear_tags();
  const ::MqttPodNode_Tags& tags() const;
  PROTOBUF_NODISCARD ::MqttPodNode_Tags* release_tags();
  ::MqttPodNode_Tags* mutable_tags();
  void set_allocated_tags(::MqttPodNode_Tags* tags);
  private:
  const ::MqttPodNode_Tags& _internal_tags() const;
  ::MqttPodNode_Tags* _internal_mutable_tags();
  public:
  void unsafe_arena_set_allocated_tags(
      ::MqttPodNode_Tags* tags);
  ::MqttPodNode_Tags* unsafe_arena_release_tags();

  // @@protoc_insertion_point(class_scope:MqttPodNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttPodNode_Attributes > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alternativeclientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicetypeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicetypename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::MqttPodNode_Tags* tags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mqttpod_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PodResponse

// bool success = 1;
inline void PodResponse::clear_success() {
  success_ = false;
}
inline bool PodResponse::_internal_success() const {
  return success_;
}
inline bool PodResponse::success() const {
  // @@protoc_insertion_point(field_get:PodResponse.success)
  return _internal_success();
}
inline void PodResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void PodResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:PodResponse.success)
}

// int32 errorCode = 2;
inline void PodResponse::clear_errorcode() {
  errorcode_ = 0;
}
inline int32_t PodResponse::_internal_errorcode() const {
  return errorcode_;
}
inline int32_t PodResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:PodResponse.errorCode)
  return _internal_errorcode();
}
inline void PodResponse::_internal_set_errorcode(int32_t value) {
  
  errorcode_ = value;
}
inline void PodResponse::set_errorcode(int32_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:PodResponse.errorCode)
}

// string errorDesc = 3;
inline void PodResponse::clear_errordesc() {
  errordesc_.ClearToEmpty();
}
inline const std::string& PodResponse::errordesc() const {
  // @@protoc_insertion_point(field_get:PodResponse.errorDesc)
  return _internal_errordesc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PodResponse::set_errordesc(ArgT0&& arg0, ArgT... args) {
 
 errordesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PodResponse.errorDesc)
}
inline std::string* PodResponse::mutable_errordesc() {
  std::string* _s = _internal_mutable_errordesc();
  // @@protoc_insertion_point(field_mutable:PodResponse.errorDesc)
  return _s;
}
inline const std::string& PodResponse::_internal_errordesc() const {
  return errordesc_.Get();
}
inline void PodResponse::_internal_set_errordesc(const std::string& value) {
  
  errordesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PodResponse::_internal_mutable_errordesc() {
  
  return errordesc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PodResponse::release_errordesc() {
  // @@protoc_insertion_point(field_release:PodResponse.errorDesc)
  return errordesc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PodResponse::set_allocated_errordesc(std::string* errordesc) {
  if (errordesc != nullptr) {
    
  } else {
    
  }
  errordesc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errordesc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errordesc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    errordesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PodResponse.errorDesc)
}

// -------------------------------------------------------------------

// MqttPodNode_Attributes

// string AttribName = 1;
inline void MqttPodNode_Attributes::clear_attribname() {
  attribname_.ClearToEmpty();
}
inline const std::string& MqttPodNode_Attributes::attribname() const {
  // @@protoc_insertion_point(field_get:MqttPodNode.Attributes.AttribName)
  return _internal_attribname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MqttPodNode_Attributes::set_attribname(ArgT0&& arg0, ArgT... args) {
 
 attribname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MqttPodNode.Attributes.AttribName)
}
inline std::string* MqttPodNode_Attributes::mutable_attribname() {
  std::string* _s = _internal_mutable_attribname();
  // @@protoc_insertion_point(field_mutable:MqttPodNode.Attributes.AttribName)
  return _s;
}
inline const std::string& MqttPodNode_Attributes::_internal_attribname() const {
  return attribname_.Get();
}
inline void MqttPodNode_Attributes::_internal_set_attribname(const std::string& value) {
  
  attribname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MqttPodNode_Attributes::_internal_mutable_attribname() {
  
  return attribname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MqttPodNode_Attributes::release_attribname() {
  // @@protoc_insertion_point(field_release:MqttPodNode.Attributes.AttribName)
  return attribname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MqttPodNode_Attributes::set_allocated_attribname(std::string* attribname) {
  if (attribname != nullptr) {
    
  } else {
    
  }
  attribname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attribname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attribname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    attribname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MqttPodNode.Attributes.AttribName)
}

// string AttribValue = 2;
inline void MqttPodNode_Attributes::clear_attribvalue() {
  attribvalue_.ClearToEmpty();
}
inline const std::string& MqttPodNode_Attributes::attribvalue() const {
  // @@protoc_insertion_point(field_get:MqttPodNode.Attributes.AttribValue)
  return _internal_attribvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MqttPodNode_Attributes::set_attribvalue(ArgT0&& arg0, ArgT... args) {
 
 attribvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MqttPodNode.Attributes.AttribValue)
}
inline std::string* MqttPodNode_Attributes::mutable_attribvalue() {
  std::string* _s = _internal_mutable_attribvalue();
  // @@protoc_insertion_point(field_mutable:MqttPodNode.Attributes.AttribValue)
  return _s;
}
inline const std::string& MqttPodNode_Attributes::_internal_attribvalue() const {
  return attribvalue_.Get();
}
inline void MqttPodNode_Attributes::_internal_set_attribvalue(const std::string& value) {
  
  attribvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MqttPodNode_Attributes::_internal_mutable_attribvalue() {
  
  return attribvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MqttPodNode_Attributes::release_attribvalue() {
  // @@protoc_insertion_point(field_release:MqttPodNode.Attributes.AttribValue)
  return attribvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MqttPodNode_Attributes::set_allocated_attribvalue(std::string* attribvalue) {
  if (attribvalue != nullptr) {
    
  } else {
    
  }
  attribvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attribvalue,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attribvalue_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    attribvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MqttPodNode.Attributes.AttribValue)
}

// -------------------------------------------------------------------

// MqttPodNode_Tags

// string type = 1;
inline void MqttPodNode_Tags::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& MqttPodNode_Tags::type() const {
  // @@protoc_insertion_point(field_get:MqttPodNode.Tags.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MqttPodNode_Tags::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MqttPodNode.Tags.type)
}
inline std::string* MqttPodNode_Tags::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:MqttPodNode.Tags.type)
  return _s;
}
inline const std::string& MqttPodNode_Tags::_internal_type() const {
  return type_.Get();
}
inline void MqttPodNode_Tags::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MqttPodNode_Tags::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MqttPodNode_Tags::release_type() {
  // @@protoc_insertion_point(field_release:MqttPodNode.Tags.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MqttPodNode_Tags::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MqttPodNode.Tags.type)
}

// string location = 2;
inline void MqttPodNode_Tags::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& MqttPodNode_Tags::location() const {
  // @@protoc_insertion_point(field_get:MqttPodNode.Tags.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MqttPodNode_Tags::set_location(ArgT0&& arg0, ArgT... args) {
 
 location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MqttPodNode.Tags.location)
}
inline std::string* MqttPodNode_Tags::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:MqttPodNode.Tags.location)
  return _s;
}
inline const std::string& MqttPodNode_Tags::_internal_location() const {
  return location_.Get();
}
inline void MqttPodNode_Tags::_internal_set_location(const std::string& value) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MqttPodNode_Tags::_internal_mutable_location() {
  
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MqttPodNode_Tags::release_location() {
  // @@protoc_insertion_point(field_release:MqttPodNode.Tags.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MqttPodNode_Tags::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (location_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MqttPodNode.Tags.location)
}

// -------------------------------------------------------------------

// MqttPodNode

// string id = 1;
inline void MqttPodNode::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& MqttPodNode::id() const {
  // @@protoc_insertion_point(field_get:MqttPodNode.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MqttPodNode::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MqttPodNode.id)
}
inline std::string* MqttPodNode::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:MqttPodNode.id)
  return _s;
}
inline const std::string& MqttPodNode::_internal_id() const {
  return id_.Get();
}
inline void MqttPodNode::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MqttPodNode::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MqttPodNode::release_id() {
  // @@protoc_insertion_point(field_release:MqttPodNode.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MqttPodNode::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MqttPodNode.id)
}

// string name = 2;
inline void MqttPodNode::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MqttPodNode::name() const {
  // @@protoc_insertion_point(field_get:MqttPodNode.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MqttPodNode::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MqttPodNode.name)
}
inline std::string* MqttPodNode::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:MqttPodNode.name)
  return _s;
}
inline const std::string& MqttPodNode::_internal_name() const {
  return name_.Get();
}
inline void MqttPodNode::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MqttPodNode::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MqttPodNode::release_name() {
  // @@protoc_insertion_point(field_release:MqttPodNode.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MqttPodNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MqttPodNode.name)
}

// string clientId = 3;
inline void MqttPodNode::clear_clientid() {
  clientid_.ClearToEmpty();
}
inline const std::string& MqttPodNode::clientid() const {
  // @@protoc_insertion_point(field_get:MqttPodNode.clientId)
  return _internal_clientid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MqttPodNode::set_clientid(ArgT0&& arg0, ArgT... args) {
 
 clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MqttPodNode.clientId)
}
inline std::string* MqttPodNode::mutable_clientid() {
  std::string* _s = _internal_mutable_clientid();
  // @@protoc_insertion_point(field_mutable:MqttPodNode.clientId)
  return _s;
}
inline const std::string& MqttPodNode::_internal_clientid() const {
  return clientid_.Get();
}
inline void MqttPodNode::_internal_set_clientid(const std::string& value) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MqttPodNode::_internal_mutable_clientid() {
  
  return clientid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MqttPodNode::release_clientid() {
  // @@protoc_insertion_point(field_release:MqttPodNode.clientId)
  return clientid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MqttPodNode::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (clientid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MqttPodNode.clientId)
}

// string alternativeClientId = 4;
inline void MqttPodNode::clear_alternativeclientid() {
  alternativeclientid_.ClearToEmpty();
}
inline const std::string& MqttPodNode::alternativeclientid() const {
  // @@protoc_insertion_point(field_get:MqttPodNode.alternativeClientId)
  return _internal_alternativeclientid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MqttPodNode::set_alternativeclientid(ArgT0&& arg0, ArgT... args) {
 
 alternativeclientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MqttPodNode.alternativeClientId)
}
inline std::string* MqttPodNode::mutable_alternativeclientid() {
  std::string* _s = _internal_mutable_alternativeclientid();
  // @@protoc_insertion_point(field_mutable:MqttPodNode.alternativeClientId)
  return _s;
}
inline const std::string& MqttPodNode::_internal_alternativeclientid() const {
  return alternativeclientid_.Get();
}
inline void MqttPodNode::_internal_set_alternativeclientid(const std::string& value) {
  
  alternativeclientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MqttPodNode::_internal_mutable_alternativeclientid() {
  
  return alternativeclientid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MqttPodNode::release_alternativeclientid() {
  // @@protoc_insertion_point(field_release:MqttPodNode.alternativeClientId)
  return alternativeclientid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MqttPodNode::set_allocated_alternativeclientid(std::string* alternativeclientid) {
  if (alternativeclientid != nullptr) {
    
  } else {
    
  }
  alternativeclientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alternativeclientid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (alternativeclientid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    alternativeclientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MqttPodNode.alternativeClientId)
}

// string deviceTypeId = 5;
inline void MqttPodNode::clear_devicetypeid() {
  devicetypeid_.ClearToEmpty();
}
inline const std::string& MqttPodNode::devicetypeid() const {
  // @@protoc_insertion_point(field_get:MqttPodNode.deviceTypeId)
  return _internal_devicetypeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MqttPodNode::set_devicetypeid(ArgT0&& arg0, ArgT... args) {
 
 devicetypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MqttPodNode.deviceTypeId)
}
inline std::string* MqttPodNode::mutable_devicetypeid() {
  std::string* _s = _internal_mutable_devicetypeid();
  // @@protoc_insertion_point(field_mutable:MqttPodNode.deviceTypeId)
  return _s;
}
inline const std::string& MqttPodNode::_internal_devicetypeid() const {
  return devicetypeid_.Get();
}
inline void MqttPodNode::_internal_set_devicetypeid(const std::string& value) {
  
  devicetypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MqttPodNode::_internal_mutable_devicetypeid() {
  
  return devicetypeid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MqttPodNode::release_devicetypeid() {
  // @@protoc_insertion_point(field_release:MqttPodNode.deviceTypeId)
  return devicetypeid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MqttPodNode::set_allocated_devicetypeid(std::string* devicetypeid) {
  if (devicetypeid != nullptr) {
    
  } else {
    
  }
  devicetypeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicetypeid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (devicetypeid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    devicetypeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MqttPodNode.deviceTypeId)
}

// string deviceTypeName = 6;
inline void MqttPodNode::clear_devicetypename() {
  devicetypename_.ClearToEmpty();
}
inline const std::string& MqttPodNode::devicetypename() const {
  // @@protoc_insertion_point(field_get:MqttPodNode.deviceTypeName)
  return _internal_devicetypename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MqttPodNode::set_devicetypename(ArgT0&& arg0, ArgT... args) {
 
 devicetypename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MqttPodNode.deviceTypeName)
}
inline std::string* MqttPodNode::mutable_devicetypename() {
  std::string* _s = _internal_mutable_devicetypename();
  // @@protoc_insertion_point(field_mutable:MqttPodNode.deviceTypeName)
  return _s;
}
inline const std::string& MqttPodNode::_internal_devicetypename() const {
  return devicetypename_.Get();
}
inline void MqttPodNode::_internal_set_devicetypename(const std::string& value) {
  
  devicetypename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MqttPodNode::_internal_mutable_devicetypename() {
  
  return devicetypename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MqttPodNode::release_devicetypename() {
  // @@protoc_insertion_point(field_release:MqttPodNode.deviceTypeName)
  return devicetypename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MqttPodNode::set_allocated_devicetypename(std::string* devicetypename) {
  if (devicetypename != nullptr) {
    
  } else {
    
  }
  devicetypename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicetypename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (devicetypename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    devicetypename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MqttPodNode.deviceTypeName)
}

// repeated .MqttPodNode.Attributes attributes = 7;
inline int MqttPodNode::_internal_attributes_size() const {
  return attributes_.size();
}
inline int MqttPodNode::attributes_size() const {
  return _internal_attributes_size();
}
inline void MqttPodNode::clear_attributes() {
  attributes_.Clear();
}
inline ::MqttPodNode_Attributes* MqttPodNode::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:MqttPodNode.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttPodNode_Attributes >*
MqttPodNode::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:MqttPodNode.attributes)
  return &attributes_;
}
inline const ::MqttPodNode_Attributes& MqttPodNode::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::MqttPodNode_Attributes& MqttPodNode::attributes(int index) const {
  // @@protoc_insertion_point(field_get:MqttPodNode.attributes)
  return _internal_attributes(index);
}
inline ::MqttPodNode_Attributes* MqttPodNode::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::MqttPodNode_Attributes* MqttPodNode::add_attributes() {
  ::MqttPodNode_Attributes* _add = _internal_add_attributes();
  // @@protoc_insertion_point(field_add:MqttPodNode.attributes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MqttPodNode_Attributes >&
MqttPodNode::attributes() const {
  // @@protoc_insertion_point(field_list:MqttPodNode.attributes)
  return attributes_;
}

// .MqttPodNode.Tags tags = 8;
inline bool MqttPodNode::_internal_has_tags() const {
  return this != internal_default_instance() && tags_ != nullptr;
}
inline bool MqttPodNode::has_tags() const {
  return _internal_has_tags();
}
inline void MqttPodNode::clear_tags() {
  if (GetArenaForAllocation() == nullptr && tags_ != nullptr) {
    delete tags_;
  }
  tags_ = nullptr;
}
inline const ::MqttPodNode_Tags& MqttPodNode::_internal_tags() const {
  const ::MqttPodNode_Tags* p = tags_;
  return p != nullptr ? *p : reinterpret_cast<const ::MqttPodNode_Tags&>(
      ::_MqttPodNode_Tags_default_instance_);
}
inline const ::MqttPodNode_Tags& MqttPodNode::tags() const {
  // @@protoc_insertion_point(field_get:MqttPodNode.tags)
  return _internal_tags();
}
inline void MqttPodNode::unsafe_arena_set_allocated_tags(
    ::MqttPodNode_Tags* tags) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tags_);
  }
  tags_ = tags;
  if (tags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MqttPodNode.tags)
}
inline ::MqttPodNode_Tags* MqttPodNode::release_tags() {
  
  ::MqttPodNode_Tags* temp = tags_;
  tags_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MqttPodNode_Tags* MqttPodNode::unsafe_arena_release_tags() {
  // @@protoc_insertion_point(field_release:MqttPodNode.tags)
  
  ::MqttPodNode_Tags* temp = tags_;
  tags_ = nullptr;
  return temp;
}
inline ::MqttPodNode_Tags* MqttPodNode::_internal_mutable_tags() {
  
  if (tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::MqttPodNode_Tags>(GetArenaForAllocation());
    tags_ = p;
  }
  return tags_;
}
inline ::MqttPodNode_Tags* MqttPodNode::mutable_tags() {
  ::MqttPodNode_Tags* _msg = _internal_mutable_tags();
  // @@protoc_insertion_point(field_mutable:MqttPodNode.tags)
  return _msg;
}
inline void MqttPodNode::set_allocated_tags(::MqttPodNode_Tags* tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tags_;
  }
  if (tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::MqttPodNode_Tags>::GetOwningArena(tags);
    if (message_arena != submessage_arena) {
      tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tags, submessage_arena);
    }
    
  } else {
    
  }
  tags_ = tags;
  // @@protoc_insertion_point(field_set_allocated:MqttPodNode.tags)
}

// string owner = 9;
inline void MqttPodNode::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& MqttPodNode::owner() const {
  // @@protoc_insertion_point(field_get:MqttPodNode.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MqttPodNode::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MqttPodNode.owner)
}
inline std::string* MqttPodNode::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:MqttPodNode.owner)
  return _s;
}
inline const std::string& MqttPodNode::_internal_owner() const {
  return owner_.Get();
}
inline void MqttPodNode::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MqttPodNode::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MqttPodNode::release_owner() {
  // @@protoc_insertion_point(field_release:MqttPodNode.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MqttPodNode::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owner_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MqttPodNode.owner)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mqttpod_2eproto
