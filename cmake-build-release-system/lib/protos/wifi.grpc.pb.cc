// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: wifi.proto

#include "wifi.pb.h"
#include "wifi.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* SystemCommand_method_names[] = {
  "/SystemCommand/SendSystemCommand",
};

std::unique_ptr< SystemCommand::Stub> SystemCommand::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SystemCommand::Stub> stub(new SystemCommand::Stub(channel, options));
  return stub;
}

SystemCommand::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendSystemCommand_(SystemCommand_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SystemCommand::Stub::SendSystemCommand(::grpc::ClientContext* context, const ::Command& request, ::CommandResponce* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Command, ::CommandResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendSystemCommand_, context, request, response);
}

void SystemCommand::Stub::async::SendSystemCommand(::grpc::ClientContext* context, const ::Command* request, ::CommandResponce* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Command, ::CommandResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSystemCommand_, context, request, response, std::move(f));
}

void SystemCommand::Stub::async::SendSystemCommand(::grpc::ClientContext* context, const ::Command* request, ::CommandResponce* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSystemCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CommandResponce>* SystemCommand::Stub::PrepareAsyncSendSystemCommandRaw(::grpc::ClientContext* context, const ::Command& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CommandResponce, ::Command, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendSystemCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CommandResponce>* SystemCommand::Stub::AsyncSendSystemCommandRaw(::grpc::ClientContext* context, const ::Command& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendSystemCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

SystemCommand::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SystemCommand_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SystemCommand::Service, ::Command, ::CommandResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SystemCommand::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Command* req,
             ::CommandResponce* resp) {
               return service->SendSystemCommand(ctx, req, resp);
             }, this)));
}

SystemCommand::Service::~Service() {
}

::grpc::Status SystemCommand::Service::SendSystemCommand(::grpc::ServerContext* context, const ::Command* request, ::CommandResponce* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SystemWifiConfig_method_names[] = {
  "/SystemWifiConfig/SendSystemWifiConfig",
};

std::unique_ptr< SystemWifiConfig::Stub> SystemWifiConfig::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SystemWifiConfig::Stub> stub(new SystemWifiConfig::Stub(channel, options));
  return stub;
}

SystemWifiConfig::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendSystemWifiConfig_(SystemWifiConfig_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SystemWifiConfig::Stub::SendSystemWifiConfig(::grpc::ClientContext* context, const ::ConfigWifi& request, ::ConfigWifi* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ConfigWifi, ::ConfigWifi, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendSystemWifiConfig_, context, request, response);
}

void SystemWifiConfig::Stub::async::SendSystemWifiConfig(::grpc::ClientContext* context, const ::ConfigWifi* request, ::ConfigWifi* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ConfigWifi, ::ConfigWifi, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSystemWifiConfig_, context, request, response, std::move(f));
}

void SystemWifiConfig::Stub::async::SendSystemWifiConfig(::grpc::ClientContext* context, const ::ConfigWifi* request, ::ConfigWifi* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSystemWifiConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ConfigWifi>* SystemWifiConfig::Stub::PrepareAsyncSendSystemWifiConfigRaw(::grpc::ClientContext* context, const ::ConfigWifi& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ConfigWifi, ::ConfigWifi, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendSystemWifiConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ConfigWifi>* SystemWifiConfig::Stub::AsyncSendSystemWifiConfigRaw(::grpc::ClientContext* context, const ::ConfigWifi& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendSystemWifiConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

SystemWifiConfig::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SystemWifiConfig_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SystemWifiConfig::Service, ::ConfigWifi, ::ConfigWifi, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SystemWifiConfig::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ConfigWifi* req,
             ::ConfigWifi* resp) {
               return service->SendSystemWifiConfig(ctx, req, resp);
             }, this)));
}

SystemWifiConfig::Service::~Service() {
}

::grpc::Status SystemWifiConfig::Service::SendSystemWifiConfig(::grpc::ServerContext* context, const ::ConfigWifi* request, ::ConfigWifi* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


